"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@grpc";
exports.ids = ["vendor-chunks/@grpc"];
exports.modules = {

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/admin.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/admin.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.addAdminServicesToServer = exports.registerAdminService = void 0;\nconst registeredAdminServices = [];\nfunction registerAdminService(getServiceDefinition, getHandlers) {\n    registeredAdminServices.push({\n        getServiceDefinition,\n        getHandlers\n    });\n}\nexports.registerAdminService = registerAdminService;\nfunction addAdminServicesToServer(server) {\n    for (const { getServiceDefinition, getHandlers } of registeredAdminServices){\n        server.addService(getServiceDefinition(), getHandlers());\n    }\n}\nexports.addAdminServicesToServer = addAdminServicesToServer; //# sourceMappingURL=admin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvYWRtaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHQSw0QkFBNEIsR0FBRyxLQUFLO0FBQ3ZFLE1BQU1JLDBCQUEwQixFQUFFO0FBQ2xDLFNBQVNELHFCQUFxQkUsb0JBQW9CLEVBQUVDLFdBQVc7SUFDM0RGLHdCQUF3QkcsSUFBSSxDQUFDO1FBQUVGO1FBQXNCQztJQUFZO0FBQ3JFO0FBQ0FOLDRCQUE0QixHQUFHRztBQUMvQixTQUFTRCx5QkFBeUJNLE1BQU07SUFDcEMsS0FBSyxNQUFNLEVBQUVILG9CQUFvQixFQUFFQyxXQUFXLEVBQUUsSUFBSUYsd0JBQXlCO1FBQ3pFSSxPQUFPQyxVQUFVLENBQUNKLHdCQUF3QkM7SUFDOUM7QUFDSjtBQUNBTixnQ0FBZ0MsR0FBR0UsMEJBQ25DLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2FkbWluLmpzPzk4NGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMjEgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWRkQWRtaW5TZXJ2aWNlc1RvU2VydmVyID0gZXhwb3J0cy5yZWdpc3RlckFkbWluU2VydmljZSA9IHZvaWQgMDtcbmNvbnN0IHJlZ2lzdGVyZWRBZG1pblNlcnZpY2VzID0gW107XG5mdW5jdGlvbiByZWdpc3RlckFkbWluU2VydmljZShnZXRTZXJ2aWNlRGVmaW5pdGlvbiwgZ2V0SGFuZGxlcnMpIHtcbiAgICByZWdpc3RlcmVkQWRtaW5TZXJ2aWNlcy5wdXNoKHsgZ2V0U2VydmljZURlZmluaXRpb24sIGdldEhhbmRsZXJzIH0pO1xufVxuZXhwb3J0cy5yZWdpc3RlckFkbWluU2VydmljZSA9IHJlZ2lzdGVyQWRtaW5TZXJ2aWNlO1xuZnVuY3Rpb24gYWRkQWRtaW5TZXJ2aWNlc1RvU2VydmVyKHNlcnZlcikge1xuICAgIGZvciAoY29uc3QgeyBnZXRTZXJ2aWNlRGVmaW5pdGlvbiwgZ2V0SGFuZGxlcnMgfSBvZiByZWdpc3RlcmVkQWRtaW5TZXJ2aWNlcykge1xuICAgICAgICBzZXJ2ZXIuYWRkU2VydmljZShnZXRTZXJ2aWNlRGVmaW5pdGlvbigpLCBnZXRIYW5kbGVycygpKTtcbiAgICB9XG59XG5leHBvcnRzLmFkZEFkbWluU2VydmljZXNUb1NlcnZlciA9IGFkZEFkbWluU2VydmljZXNUb1NlcnZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkbWluLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFkZEFkbWluU2VydmljZXNUb1NlcnZlciIsInJlZ2lzdGVyQWRtaW5TZXJ2aWNlIiwicmVnaXN0ZXJlZEFkbWluU2VydmljZXMiLCJnZXRTZXJ2aWNlRGVmaW5pdGlvbiIsImdldEhhbmRsZXJzIiwicHVzaCIsInNlcnZlciIsImFkZFNlcnZpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/admin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BackoffTimeout = void 0;\nconst INITIAL_BACKOFF_MS = 1000;\nconst BACKOFF_MULTIPLIER = 1.6;\nconst MAX_BACKOFF_MS = 120000;\nconst BACKOFF_JITTER = 0.2;\n/**\n * Get a number uniformly at random in the range [min, max)\n * @param min\n * @param max\n */ function uniformRandom(min, max) {\n    return Math.random() * (max - min) + min;\n}\nclass BackoffTimeout {\n    constructor(callback, options){\n        this.callback = callback;\n        /**\n         * The delay time at the start, and after each reset.\n         */ this.initialDelay = INITIAL_BACKOFF_MS;\n        /**\n         * The exponential backoff multiplier.\n         */ this.multiplier = BACKOFF_MULTIPLIER;\n        /**\n         * The maximum delay time\n         */ this.maxDelay = MAX_BACKOFF_MS;\n        /**\n         * The maximum fraction by which the delay time can randomly vary after\n         * applying the multiplier.\n         */ this.jitter = BACKOFF_JITTER;\n        /**\n         * Indicates whether the timer is currently running.\n         */ this.running = false;\n        /**\n         * Indicates whether the timer should keep the Node process running if no\n         * other async operation is doing so.\n         */ this.hasRef = true;\n        /**\n         * The time that the currently running timer was started. Only valid if\n         * running is true.\n         */ this.startTime = new Date();\n        if (options) {\n            if (options.initialDelay) {\n                this.initialDelay = options.initialDelay;\n            }\n            if (options.multiplier) {\n                this.multiplier = options.multiplier;\n            }\n            if (options.jitter) {\n                this.jitter = options.jitter;\n            }\n            if (options.maxDelay) {\n                this.maxDelay = options.maxDelay;\n            }\n        }\n        this.nextDelay = this.initialDelay;\n        this.timerId = setTimeout(()=>{}, 0);\n        clearTimeout(this.timerId);\n    }\n    runTimer(delay) {\n        var _a, _b;\n        clearTimeout(this.timerId);\n        this.timerId = setTimeout(()=>{\n            this.callback();\n            this.running = false;\n        }, delay);\n        if (!this.hasRef) {\n            (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    }\n    /**\n     * Call the callback after the current amount of delay time\n     */ runOnce() {\n        this.running = true;\n        this.startTime = new Date();\n        this.runTimer(this.nextDelay);\n        const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);\n        const jitterMagnitude = nextBackoff * this.jitter;\n        this.nextDelay = nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);\n    }\n    /**\n     * Stop the timer. The callback will not be called until `runOnce` is called\n     * again.\n     */ stop() {\n        clearTimeout(this.timerId);\n        this.running = false;\n    }\n    /**\n     * Reset the delay time to its initial value. If the timer is still running,\n     * retroactively apply that reset to the current timer.\n     */ reset() {\n        this.nextDelay = this.initialDelay;\n        if (this.running) {\n            const now = new Date();\n            const newEndTime = this.startTime;\n            newEndTime.setMilliseconds(newEndTime.getMilliseconds() + this.nextDelay);\n            clearTimeout(this.timerId);\n            if (now < newEndTime) {\n                this.runTimer(newEndTime.getTime() - now.getTime());\n            } else {\n                this.running = false;\n            }\n        }\n    }\n    /**\n     * Check whether the timer is currently running.\n     */ isRunning() {\n        return this.running;\n    }\n    /**\n     * Set that while the timer is running, it should keep the Node process\n     * running.\n     */ ref() {\n        var _a, _b;\n        this.hasRef = true;\n        (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Set that while the timer is running, it should not keep the Node process\n     * running.\n     */ unref() {\n        var _a, _b;\n        this.hasRef = false;\n        (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n}\nexports.BackoffTimeout = BackoffTimeout; //# sourceMappingURL=backoff-timeout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials-filter.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-credentials-filter.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CallCredentialsFilterFactory = exports.CallCredentialsFilter = void 0;\nconst filter_1 = __webpack_require__(/*! ./filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nclass CallCredentialsFilter extends filter_1.BaseFilter {\n    constructor(channel, stream){\n        var _a, _b;\n        super();\n        this.channel = channel;\n        this.stream = stream;\n        this.channel = channel;\n        this.stream = stream;\n        const splitPath = stream.getMethod().split(\"/\");\n        let serviceName = \"\";\n        /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n         * by '/', the first item should be empty and the second should be the\n         * service name */ if (splitPath.length >= 2) {\n            serviceName = splitPath[1];\n        }\n        const hostname = (_b = (_a = uri_parser_1.splitHostPort(stream.getHost())) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : \"localhost\";\n        /* Currently, call credentials are only allowed on HTTPS connections, so we\n         * can assume that the scheme is \"https\" */ this.serviceUrl = `https://${hostname}/${serviceName}`;\n    }\n    async sendMetadata(metadata) {\n        const credentials = this.stream.getCredentials();\n        const credsMetadata = credentials.generateMetadata({\n            service_url: this.serviceUrl\n        });\n        const resultMetadata = await metadata;\n        try {\n            resultMetadata.merge(await credsMetadata);\n        } catch (error) {\n            this.stream.cancelWithStatus(constants_1.Status.UNAUTHENTICATED, `Failed to retrieve auth metadata with error: ${error.message}`);\n            return Promise.reject(\"Failed to retrieve auth metadata\");\n        }\n        if (resultMetadata.get(\"authorization\").length > 1) {\n            this.stream.cancelWithStatus(constants_1.Status.INTERNAL, '\"authorization\" metadata cannot have multiple values');\n            return Promise.reject('\"authorization\" metadata cannot have multiple values');\n        }\n        return resultMetadata;\n    }\n}\nexports.CallCredentialsFilter = CallCredentialsFilter;\nclass CallCredentialsFilterFactory {\n    constructor(channel){\n        this.channel = channel;\n        this.channel = channel;\n    }\n    createFilter(callStream) {\n        return new CallCredentialsFilter(this.channel, callStream);\n    }\n}\nexports.CallCredentialsFilterFactory = CallCredentialsFilterFactory; //# sourceMappingURL=call-credentials-filter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1jcmVkZW50aWFscy1maWx0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9DQUFvQyxHQUFHQSw2QkFBNkIsR0FBRyxLQUFLO0FBQzVFLE1BQU1JLFdBQVdDLG1CQUFPQSxDQUFDLHdFQUFVO0FBQ25DLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLDhFQUFhO0FBQ3pDLE1BQU1FLGVBQWVGLG1CQUFPQSxDQUFDLGdGQUFjO0FBQzNDLE1BQU1GLDhCQUE4QkMsU0FBU0ksVUFBVTtJQUNuREMsWUFBWUMsT0FBTyxFQUFFQyxNQUFNLENBQUU7UUFDekIsSUFBSUMsSUFBSUM7UUFDUixLQUFLO1FBQ0wsSUFBSSxDQUFDSCxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDRCxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBQ2QsTUFBTUcsWUFBWUgsT0FBT0ksU0FBUyxHQUFHQyxLQUFLLENBQUM7UUFDM0MsSUFBSUMsY0FBYztRQUNsQjs7d0JBRWdCLEdBQ2hCLElBQUlILFVBQVVJLE1BQU0sSUFBSSxHQUFHO1lBQ3ZCRCxjQUFjSCxTQUFTLENBQUMsRUFBRTtRQUM5QjtRQUNBLE1BQU1LLFdBQVcsQ0FBQ04sS0FBSyxDQUFDRCxLQUFLTCxhQUFhYSxhQUFhLENBQUNULE9BQU9VLE9BQU8sR0FBRSxNQUFPLFFBQVFULE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1UsSUFBSSxNQUFNLFFBQVFULE9BQU8sS0FBSyxJQUFJQSxLQUFLO1FBQzFKO2lEQUN5QyxHQUN6QyxJQUFJLENBQUNVLFVBQVUsR0FBRyxDQUFDLFFBQVEsRUFBRUosU0FBUyxDQUFDLEVBQUVGLFlBQVksQ0FBQztJQUMxRDtJQUNBLE1BQU1PLGFBQWFDLFFBQVEsRUFBRTtRQUN6QixNQUFNQyxjQUFjLElBQUksQ0FBQ2YsTUFBTSxDQUFDZ0IsY0FBYztRQUM5QyxNQUFNQyxnQkFBZ0JGLFlBQVlHLGdCQUFnQixDQUFDO1lBQy9DQyxhQUFhLElBQUksQ0FBQ1AsVUFBVTtRQUNoQztRQUNBLE1BQU1RLGlCQUFpQixNQUFNTjtRQUM3QixJQUFJO1lBQ0FNLGVBQWVDLEtBQUssQ0FBQyxNQUFNSjtRQUMvQixFQUNBLE9BQU9LLE9BQU87WUFDVixJQUFJLENBQUN0QixNQUFNLENBQUN1QixnQkFBZ0IsQ0FBQzVCLFlBQVk2QixNQUFNLENBQUNDLGVBQWUsRUFBRSxDQUFDLDZDQUE2QyxFQUFFSCxNQUFNSSxPQUFPLENBQUMsQ0FBQztZQUNoSSxPQUFPQyxRQUFRQyxNQUFNLENBQUM7UUFDMUI7UUFDQSxJQUFJUixlQUFlUyxHQUFHLENBQUMsaUJBQWlCdEIsTUFBTSxHQUFHLEdBQUc7WUFDaEQsSUFBSSxDQUFDUCxNQUFNLENBQUN1QixnQkFBZ0IsQ0FBQzVCLFlBQVk2QixNQUFNLENBQUNNLFFBQVEsRUFBRTtZQUMxRCxPQUFPSCxRQUFRQyxNQUFNLENBQUM7UUFDMUI7UUFDQSxPQUFPUjtJQUNYO0FBQ0o7QUFDQS9CLDZCQUE2QixHQUFHRztBQUNoQyxNQUFNRDtJQUNGTyxZQUFZQyxPQUFPLENBQUU7UUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ25CO0lBQ0FnQyxhQUFhQyxVQUFVLEVBQUU7UUFDckIsT0FBTyxJQUFJeEMsc0JBQXNCLElBQUksQ0FBQ08sT0FBTyxFQUFFaUM7SUFDbkQ7QUFDSjtBQUNBM0Msb0NBQW9DLEdBQUdFLDhCQUN2QyxtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZmMtbmV4dGpzLXNoYWRjbi8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jYWxsLWNyZWRlbnRpYWxzLWZpbHRlci5qcz83NDFhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhbGxDcmVkZW50aWFsc0ZpbHRlckZhY3RvcnkgPSBleHBvcnRzLkNhbGxDcmVkZW50aWFsc0ZpbHRlciA9IHZvaWQgMDtcbmNvbnN0IGZpbHRlcl8xID0gcmVxdWlyZShcIi4vZmlsdGVyXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCB1cmlfcGFyc2VyXzEgPSByZXF1aXJlKFwiLi91cmktcGFyc2VyXCIpO1xuY2xhc3MgQ2FsbENyZWRlbnRpYWxzRmlsdGVyIGV4dGVuZHMgZmlsdGVyXzEuQmFzZUZpbHRlciB7XG4gICAgY29uc3RydWN0b3IoY2hhbm5lbCwgc3RyZWFtKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgY29uc3Qgc3BsaXRQYXRoID0gc3RyZWFtLmdldE1ldGhvZCgpLnNwbGl0KCcvJyk7XG4gICAgICAgIGxldCBzZXJ2aWNlTmFtZSA9ICcnO1xuICAgICAgICAvKiBUaGUgc3RhbmRhcmQgcGF0aCBmb3JtYXQgaXMgXCIve3NlcnZpY2VOYW1lfS97bWV0aG9kTmFtZX1cIiwgc28gaWYgd2Ugc3BsaXRcbiAgICAgICAgICogYnkgJy8nLCB0aGUgZmlyc3QgaXRlbSBzaG91bGQgYmUgZW1wdHkgYW5kIHRoZSBzZWNvbmQgc2hvdWxkIGJlIHRoZVxuICAgICAgICAgKiBzZXJ2aWNlIG5hbWUgKi9cbiAgICAgICAgaWYgKHNwbGl0UGF0aC5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgc2VydmljZU5hbWUgPSBzcGxpdFBhdGhbMV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG9zdG5hbWUgPSAoX2IgPSAoX2EgPSB1cmlfcGFyc2VyXzEuc3BsaXRIb3N0UG9ydChzdHJlYW0uZ2V0SG9zdCgpKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhvc3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICdsb2NhbGhvc3QnO1xuICAgICAgICAvKiBDdXJyZW50bHksIGNhbGwgY3JlZGVudGlhbHMgYXJlIG9ubHkgYWxsb3dlZCBvbiBIVFRQUyBjb25uZWN0aW9ucywgc28gd2VcbiAgICAgICAgICogY2FuIGFzc3VtZSB0aGF0IHRoZSBzY2hlbWUgaXMgXCJodHRwc1wiICovXG4gICAgICAgIHRoaXMuc2VydmljZVVybCA9IGBodHRwczovLyR7aG9zdG5hbWV9LyR7c2VydmljZU5hbWV9YDtcbiAgICB9XG4gICAgYXN5bmMgc2VuZE1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gdGhpcy5zdHJlYW0uZ2V0Q3JlZGVudGlhbHMoKTtcbiAgICAgICAgY29uc3QgY3JlZHNNZXRhZGF0YSA9IGNyZWRlbnRpYWxzLmdlbmVyYXRlTWV0YWRhdGEoe1xuICAgICAgICAgICAgc2VydmljZV91cmw6IHRoaXMuc2VydmljZVVybCxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdE1ldGFkYXRhID0gYXdhaXQgbWV0YWRhdGE7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHRNZXRhZGF0YS5tZXJnZShhd2FpdCBjcmVkc01ldGFkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtLmNhbmNlbFdpdGhTdGF0dXMoY29uc3RhbnRzXzEuU3RhdHVzLlVOQVVUSEVOVElDQVRFRCwgYEZhaWxlZCB0byByZXRyaWV2ZSBhdXRoIG1ldGFkYXRhIHdpdGggZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnRmFpbGVkIHRvIHJldHJpZXZlIGF1dGggbWV0YWRhdGEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0TWV0YWRhdGEuZ2V0KCdhdXRob3JpemF0aW9uJykubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhpcy5zdHJlYW0uY2FuY2VsV2l0aFN0YXR1cyhjb25zdGFudHNfMS5TdGF0dXMuSU5URVJOQUwsICdcImF1dGhvcml6YXRpb25cIiBtZXRhZGF0YSBjYW5ub3QgaGF2ZSBtdWx0aXBsZSB2YWx1ZXMnKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnXCJhdXRob3JpemF0aW9uXCIgbWV0YWRhdGEgY2Fubm90IGhhdmUgbXVsdGlwbGUgdmFsdWVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdE1ldGFkYXRhO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2FsbENyZWRlbnRpYWxzRmlsdGVyID0gQ2FsbENyZWRlbnRpYWxzRmlsdGVyO1xuY2xhc3MgQ2FsbENyZWRlbnRpYWxzRmlsdGVyRmFjdG9yeSB7XG4gICAgY29uc3RydWN0b3IoY2hhbm5lbCkge1xuICAgICAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuICAgICAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuICAgIH1cbiAgICBjcmVhdGVGaWx0ZXIoY2FsbFN0cmVhbSkge1xuICAgICAgICByZXR1cm4gbmV3IENhbGxDcmVkZW50aWFsc0ZpbHRlcih0aGlzLmNoYW5uZWwsIGNhbGxTdHJlYW0pO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2FsbENyZWRlbnRpYWxzRmlsdGVyRmFjdG9yeSA9IENhbGxDcmVkZW50aWFsc0ZpbHRlckZhY3Rvcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWxsLWNyZWRlbnRpYWxzLWZpbHRlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDYWxsQ3JlZGVudGlhbHNGaWx0ZXJGYWN0b3J5IiwiQ2FsbENyZWRlbnRpYWxzRmlsdGVyIiwiZmlsdGVyXzEiLCJyZXF1aXJlIiwiY29uc3RhbnRzXzEiLCJ1cmlfcGFyc2VyXzEiLCJCYXNlRmlsdGVyIiwiY29uc3RydWN0b3IiLCJjaGFubmVsIiwic3RyZWFtIiwiX2EiLCJfYiIsInNwbGl0UGF0aCIsImdldE1ldGhvZCIsInNwbGl0Iiwic2VydmljZU5hbWUiLCJsZW5ndGgiLCJob3N0bmFtZSIsInNwbGl0SG9zdFBvcnQiLCJnZXRIb3N0IiwiaG9zdCIsInNlcnZpY2VVcmwiLCJzZW5kTWV0YWRhdGEiLCJtZXRhZGF0YSIsImNyZWRlbnRpYWxzIiwiZ2V0Q3JlZGVudGlhbHMiLCJjcmVkc01ldGFkYXRhIiwiZ2VuZXJhdGVNZXRhZGF0YSIsInNlcnZpY2VfdXJsIiwicmVzdWx0TWV0YWRhdGEiLCJtZXJnZSIsImVycm9yIiwiY2FuY2VsV2l0aFN0YXR1cyIsIlN0YXR1cyIsIlVOQVVUSEVOVElDQVRFRCIsIm1lc3NhZ2UiLCJQcm9taXNlIiwicmVqZWN0IiwiZ2V0IiwiSU5URVJOQUwiLCJjcmVhdGVGaWx0ZXIiLCJjYWxsU3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js":
/*!******************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-credentials.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CallCredentials = void 0;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nfunction isCurrentOauth2Client(client) {\n    return \"getRequestHeaders\" in client && typeof client.getRequestHeaders === \"function\";\n}\n/**\n * A class that represents a generic method of adding authentication-related\n * metadata on a per-request basis.\n */ class CallCredentials {\n    /**\n     * Creates a new CallCredentials object from a given function that generates\n     * Metadata objects.\n     * @param metadataGenerator A function that accepts a set of options, and\n     * generates a Metadata object based on these options, which is passed back\n     * to the caller via a supplied (err, metadata) callback.\n     */ static createFromMetadataGenerator(metadataGenerator) {\n        return new SingleCallCredentials(metadataGenerator);\n    }\n    /**\n     * Create a gRPC credential from a Google credential object.\n     * @param googleCredentials The authentication client to use.\n     * @return The resulting CallCredentials object.\n     */ static createFromGoogleCredential(googleCredentials) {\n        return CallCredentials.createFromMetadataGenerator((options, callback)=>{\n            let getHeaders;\n            if (isCurrentOauth2Client(googleCredentials)) {\n                getHeaders = googleCredentials.getRequestHeaders(options.service_url);\n            } else {\n                getHeaders = new Promise((resolve, reject)=>{\n                    googleCredentials.getRequestMetadata(options.service_url, (err, headers)=>{\n                        if (err) {\n                            reject(err);\n                            return;\n                        }\n                        resolve(headers);\n                    });\n                });\n            }\n            getHeaders.then((headers)=>{\n                const metadata = new metadata_1.Metadata();\n                for (const key of Object.keys(headers)){\n                    metadata.add(key, headers[key]);\n                }\n                callback(null, metadata);\n            }, (err)=>{\n                callback(err);\n            });\n        });\n    }\n    static createEmpty() {\n        return new EmptyCallCredentials();\n    }\n}\nexports.CallCredentials = CallCredentials;\nclass ComposedCallCredentials extends CallCredentials {\n    constructor(creds){\n        super();\n        this.creds = creds;\n    }\n    async generateMetadata(options) {\n        const base = new metadata_1.Metadata();\n        const generated = await Promise.all(this.creds.map((cred)=>cred.generateMetadata(options)));\n        for (const gen of generated){\n            base.merge(gen);\n        }\n        return base;\n    }\n    compose(other) {\n        return new ComposedCallCredentials(this.creds.concat([\n            other\n        ]));\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ComposedCallCredentials) {\n            return this.creds.every((value, index)=>value._equals(other.creds[index]));\n        } else {\n            return false;\n        }\n    }\n}\nclass SingleCallCredentials extends CallCredentials {\n    constructor(metadataGenerator){\n        super();\n        this.metadataGenerator = metadataGenerator;\n    }\n    generateMetadata(options) {\n        return new Promise((resolve, reject)=>{\n            this.metadataGenerator(options, (err, metadata)=>{\n                if (metadata !== undefined) {\n                    resolve(metadata);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    }\n    compose(other) {\n        return new ComposedCallCredentials([\n            this,\n            other\n        ]);\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof SingleCallCredentials) {\n            return this.metadataGenerator === other.metadataGenerator;\n        } else {\n            return false;\n        }\n    }\n}\nclass EmptyCallCredentials extends CallCredentials {\n    generateMetadata(options) {\n        return Promise.resolve(new metadata_1.Metadata());\n    }\n    compose(other) {\n        return other;\n    }\n    _equals(other) {\n        return other instanceof EmptyCallCredentials;\n    }\n} //# sourceMappingURL=call-credentials.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/call-stream.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-stream.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Http2CallStream = exports.InterceptingListenerImpl = exports.isInterceptingListener = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst stream_decoder_1 = __webpack_require__(/*! ./stream-decoder */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst TRACER_NAME = \"call_stream\";\nconst { HTTP2_HEADER_STATUS, HTTP2_HEADER_CONTENT_TYPE, NGHTTP2_CANCEL } = http2.constants;\n/**\n * Should do approximately the same thing as util.getSystemErrorName but the\n * TypeScript types don't have that function for some reason so I just made my\n * own.\n * @param errno\n */ function getSystemErrorName(errno) {\n    for (const [name, num] of Object.entries(os.constants.errno)){\n        if (num === errno) {\n            return name;\n        }\n    }\n    return \"Unknown system error \" + errno;\n}\nfunction getMinDeadline(deadlineList) {\n    let minValue = Infinity;\n    for (const deadline of deadlineList){\n        const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;\n        if (deadlineMsecs < minValue) {\n            minValue = deadlineMsecs;\n        }\n    }\n    return minValue;\n}\nfunction isInterceptingListener(listener) {\n    return listener.onReceiveMetadata !== undefined && listener.onReceiveMetadata.length === 1;\n}\nexports.isInterceptingListener = isInterceptingListener;\nclass InterceptingListenerImpl {\n    constructor(listener, nextListener){\n        this.listener = listener;\n        this.nextListener = nextListener;\n        this.processingMetadata = false;\n        this.hasPendingMessage = false;\n        this.processingMessage = false;\n        this.pendingStatus = null;\n    }\n    processPendingMessage() {\n        if (this.hasPendingMessage) {\n            this.nextListener.onReceiveMessage(this.pendingMessage);\n            this.pendingMessage = null;\n            this.hasPendingMessage = false;\n        }\n    }\n    processPendingStatus() {\n        if (this.pendingStatus) {\n            this.nextListener.onReceiveStatus(this.pendingStatus);\n        }\n    }\n    onReceiveMetadata(metadata) {\n        this.processingMetadata = true;\n        this.listener.onReceiveMetadata(metadata, (metadata)=>{\n            this.processingMetadata = false;\n            this.nextListener.onReceiveMetadata(metadata);\n            this.processPendingMessage();\n            this.processPendingStatus();\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onReceiveMessage(message) {\n        /* If this listener processes messages asynchronously, the last message may\n         * be reordered with respect to the status */ this.processingMessage = true;\n        this.listener.onReceiveMessage(message, (msg)=>{\n            this.processingMessage = false;\n            if (this.processingMetadata) {\n                this.pendingMessage = msg;\n                this.hasPendingMessage = true;\n            } else {\n                this.nextListener.onReceiveMessage(msg);\n                this.processPendingStatus();\n            }\n        });\n    }\n    onReceiveStatus(status) {\n        this.listener.onReceiveStatus(status, (processedStatus)=>{\n            if (this.processingMetadata || this.processingMessage) {\n                this.pendingStatus = processedStatus;\n            } else {\n                this.nextListener.onReceiveStatus(processedStatus);\n            }\n        });\n    }\n}\nexports.InterceptingListenerImpl = InterceptingListenerImpl;\nclass Http2CallStream {\n    constructor(methodName, channel, options, filterStackFactory, channelCallCredentials, callNumber){\n        this.methodName = methodName;\n        this.channel = channel;\n        this.options = options;\n        this.channelCallCredentials = channelCallCredentials;\n        this.callNumber = callNumber;\n        this.http2Stream = null;\n        this.pendingRead = false;\n        this.isWriteFilterPending = false;\n        this.pendingWrite = null;\n        this.pendingWriteCallback = null;\n        this.writesClosed = false;\n        this.decoder = new stream_decoder_1.StreamDecoder();\n        this.isReadFilterPending = false;\n        this.canPush = false;\n        /**\n         * Indicates that an 'end' event has come from the http2 stream, so there\n         * will be no more data events.\n         */ this.readsClosed = false;\n        this.statusOutput = false;\n        this.unpushedReadMessages = [];\n        this.unfilteredReadMessages = [];\n        // Status code mapped from :status. To be used if grpc-status is not received\n        this.mappedStatusCode = constants_1.Status.UNKNOWN;\n        // This is populated (non-null) if and only if the call has ended\n        this.finalStatus = null;\n        this.subchannel = null;\n        this.listener = null;\n        this.internalError = null;\n        this.configDeadline = Infinity;\n        this.statusWatchers = [];\n        this.streamEndWatchers = [];\n        this.callStatsTracker = null;\n        this.filterStack = filterStackFactory.createFilter(this);\n        this.credentials = channelCallCredentials;\n        this.disconnectListener = ()=>{\n            this.endCall({\n                code: constants_1.Status.UNAVAILABLE,\n                details: \"Connection dropped\",\n                metadata: new metadata_1.Metadata()\n            });\n        };\n        if (this.options.parentCall && this.options.flags & constants_1.Propagate.CANCELLATION) {\n            this.options.parentCall.on(\"cancelled\", ()=>{\n                this.cancelWithStatus(constants_1.Status.CANCELLED, \"Cancelled by parent call\");\n            });\n        }\n    }\n    outputStatus() {\n        var _a;\n        /* Precondition: this.finalStatus !== null */ if (this.listener && !this.statusOutput) {\n            this.statusOutput = true;\n            const filteredStatus = this.filterStack.receiveTrailers(this.finalStatus);\n            this.trace(\"ended with status: code=\" + filteredStatus.code + ' details=\"' + filteredStatus.details + '\"');\n            this.statusWatchers.forEach((watcher)=>watcher(filteredStatus));\n            /* We delay the actual action of bubbling up the status to insulate the\n             * cleanup code in this class from any errors that may be thrown in the\n             * upper layers as a result of bubbling up the status. In particular,\n             * if the status is not OK, the \"error\" event may be emitted\n             * synchronously at the top level, which will result in a thrown error if\n             * the user does not handle that event. */ process.nextTick(()=>{\n                var _a;\n                (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);\n            });\n            /* Leave the http2 stream in flowing state to drain incoming messages, to\n             * ensure that the stream closure completes. The call stream already does\n             * not push more messages after the status is output, so the messages go\n             * nowhere either way. */ (_a = this.http2Stream) === null || _a === void 0 ? void 0 : _a.resume();\n            if (this.subchannel) {\n                this.subchannel.callUnref();\n                this.subchannel.removeDisconnectListener(this.disconnectListener);\n            }\n        }\n    }\n    trace(text) {\n        logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, \"[\" + this.callNumber + \"] \" + text);\n    }\n    /**\n     * On first call, emits a 'status' event with the given StatusObject.\n     * Subsequent calls are no-ops.\n     * @param status The status of the call.\n     */ endCall(status) {\n        /* If the status is OK and a new status comes in (e.g. from a\n         * deserialization failure), that new status takes priority */ if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\n            this.finalStatus = status;\n            this.maybeOutputStatus();\n        }\n        this.destroyHttp2Stream();\n    }\n    maybeOutputStatus() {\n        if (this.finalStatus !== null) {\n            /* The combination check of readsClosed and that the two message buffer\n             * arrays are empty checks that there all incoming data has been fully\n             * processed */ if (this.finalStatus.code !== constants_1.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && this.unfilteredReadMessages.length === 0 && !this.isReadFilterPending) {\n                this.outputStatus();\n            }\n        }\n    }\n    push(message) {\n        this.trace(\"pushing to reader message of length \" + (message instanceof Buffer ? message.length : null));\n        this.canPush = false;\n        process.nextTick(()=>{\n            var _a;\n            /* If we have already output the status any later messages should be\n             * ignored, and can cause out-of-order operation errors higher up in the\n             * stack. Checking as late as possible here to avoid any race conditions.\n             */ if (this.statusOutput) {\n                return;\n            }\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMessage(message);\n            this.maybeOutputStatus();\n        });\n    }\n    handleFilterError(error) {\n        this.cancelWithStatus(constants_1.Status.INTERNAL, error.message);\n    }\n    handleFilteredRead(message) {\n        /* If we the call has already ended with an error, we don't want to do\n         * anything with this message. Dropping it on the floor is correct\n         * behavior */ if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n            this.maybeOutputStatus();\n            return;\n        }\n        this.isReadFilterPending = false;\n        if (this.canPush) {\n            this.http2Stream.pause();\n            this.push(message);\n        } else {\n            this.trace(\"unpushedReadMessages.push message of length \" + message.length);\n            this.unpushedReadMessages.push(message);\n        }\n        if (this.unfilteredReadMessages.length > 0) {\n            /* nextMessage is guaranteed not to be undefined because\n               unfilteredReadMessages is non-empty */ const nextMessage = this.unfilteredReadMessages.shift();\n            this.filterReceivedMessage(nextMessage);\n        }\n    }\n    filterReceivedMessage(framedMessage) {\n        /* If we the call has already ended with an error, we don't want to do\n         * anything with this message. Dropping it on the floor is correct\n         * behavior */ if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n            this.maybeOutputStatus();\n            return;\n        }\n        this.trace(\"filterReceivedMessage of length \" + framedMessage.length);\n        this.isReadFilterPending = true;\n        this.filterStack.receiveMessage(Promise.resolve(framedMessage)).then(this.handleFilteredRead.bind(this), this.handleFilterError.bind(this));\n    }\n    tryPush(messageBytes) {\n        if (this.isReadFilterPending) {\n            this.trace(\"unfilteredReadMessages.push message of length \" + (messageBytes && messageBytes.length));\n            this.unfilteredReadMessages.push(messageBytes);\n        } else {\n            this.filterReceivedMessage(messageBytes);\n        }\n    }\n    handleTrailers(headers) {\n        this.streamEndWatchers.forEach((watcher)=>watcher(true));\n        let headersString = \"\";\n        for (const header of Object.keys(headers)){\n            headersString += \"\t\t\" + header + \": \" + headers[header] + \"\\n\";\n        }\n        this.trace(\"Received server trailers:\\n\" + headersString);\n        let metadata;\n        try {\n            metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n        } catch (e) {\n            metadata = new metadata_1.Metadata();\n        }\n        const metadataMap = metadata.getMap();\n        let code = this.mappedStatusCode;\n        if (code === constants_1.Status.UNKNOWN && typeof metadataMap[\"grpc-status\"] === \"string\") {\n            const receivedStatus = Number(metadataMap[\"grpc-status\"]);\n            if (receivedStatus in constants_1.Status) {\n                code = receivedStatus;\n                this.trace(\"received status code \" + receivedStatus + \" from server\");\n            }\n            metadata.remove(\"grpc-status\");\n        }\n        let details = \"\";\n        if (typeof metadataMap[\"grpc-message\"] === \"string\") {\n            try {\n                details = decodeURI(metadataMap[\"grpc-message\"]);\n            } catch (e) {\n                details = metadataMap[\"grpc-message\"];\n            }\n            metadata.remove(\"grpc-message\");\n            this.trace('received status details string \"' + details + '\" from server');\n        }\n        const status = {\n            code,\n            details,\n            metadata\n        };\n        // This is a no-op if the call was already ended when handling headers.\n        this.endCall(status);\n    }\n    writeMessageToStream(message, callback) {\n        var _a;\n        (_a = this.callStatsTracker) === null || _a === void 0 ? void 0 : _a.addMessageSent();\n        this.http2Stream.write(message, callback);\n    }\n    attachHttp2Stream(stream, subchannel, extraFilters, callStatsTracker) {\n        this.filterStack.push(extraFilters);\n        if (this.finalStatus !== null) {\n            stream.close(NGHTTP2_CANCEL);\n        } else {\n            this.trace(\"attachHttp2Stream from subchannel \" + subchannel.getAddress());\n            this.http2Stream = stream;\n            this.subchannel = subchannel;\n            this.callStatsTracker = callStatsTracker;\n            subchannel.addDisconnectListener(this.disconnectListener);\n            subchannel.callRef();\n            stream.on(\"response\", (headers, flags)=>{\n                var _a;\n                let headersString = \"\";\n                for (const header of Object.keys(headers)){\n                    headersString += \"\t\t\" + header + \": \" + headers[header] + \"\\n\";\n                }\n                this.trace(\"Received server headers:\\n\" + headersString);\n                switch(headers[\":status\"]){\n                    // TODO(murgatroid99): handle 100 and 101\n                    case 400:\n                        this.mappedStatusCode = constants_1.Status.INTERNAL;\n                        break;\n                    case 401:\n                        this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\n                        break;\n                    case 403:\n                        this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\n                        break;\n                    case 404:\n                        this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\n                        break;\n                    case 429:\n                    case 502:\n                    case 503:\n                    case 504:\n                        this.mappedStatusCode = constants_1.Status.UNAVAILABLE;\n                        break;\n                    default:\n                        this.mappedStatusCode = constants_1.Status.UNKNOWN;\n                }\n                if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n                    this.handleTrailers(headers);\n                } else {\n                    let metadata;\n                    try {\n                        metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n                    } catch (error) {\n                        this.endCall({\n                            code: constants_1.Status.UNKNOWN,\n                            details: error.message,\n                            metadata: new metadata_1.Metadata()\n                        });\n                        return;\n                    }\n                    try {\n                        const finalMetadata = this.filterStack.receiveMetadata(metadata);\n                        (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMetadata(finalMetadata);\n                    } catch (error) {\n                        this.endCall({\n                            code: constants_1.Status.UNKNOWN,\n                            details: error.message,\n                            metadata: new metadata_1.Metadata()\n                        });\n                    }\n                }\n            });\n            stream.on(\"trailers\", (headers)=>{\n                this.handleTrailers(headers);\n            });\n            stream.on(\"data\", (data)=>{\n                /* If the status has already been output, allow the http2 stream to\n                 * drain without processing the data. */ if (this.statusOutput) {\n                    return;\n                }\n                this.trace(\"receive HTTP/2 data frame of length \" + data.length);\n                const messages = this.decoder.write(data);\n                for (const message of messages){\n                    this.trace(\"parsed message of length \" + message.length);\n                    this.callStatsTracker.addMessageReceived();\n                    this.tryPush(message);\n                }\n            });\n            stream.on(\"end\", ()=>{\n                this.readsClosed = true;\n                this.maybeOutputStatus();\n            });\n            stream.on(\"close\", ()=>{\n                /* Use process.next tick to ensure that this code happens after any\n                 * \"error\" event that may be emitted at about the same time, so that\n                 * we can bubble up the error message from that event. */ process.nextTick(()=>{\n                    var _a;\n                    this.trace(\"HTTP/2 stream closed with code \" + stream.rstCode);\n                    /* If we have a final status with an OK status code, that means that\n                     * we have received all of the messages and we have processed the\n                     * trailers and the call completed successfully, so it doesn't matter\n                     * how the stream ends after that */ if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n                        return;\n                    }\n                    let code;\n                    let details = \"\";\n                    switch(stream.rstCode){\n                        case http2.constants.NGHTTP2_NO_ERROR:\n                            /* If we get a NO_ERROR code and we already have a status, the\n                             * stream completed properly and we just haven't fully processed\n                             * it yet */ if (this.finalStatus !== null) {\n                                return;\n                            }\n                            code = constants_1.Status.INTERNAL;\n                            details = `Received RST_STREAM with code ${stream.rstCode}`;\n                            break;\n                        case http2.constants.NGHTTP2_REFUSED_STREAM:\n                            code = constants_1.Status.UNAVAILABLE;\n                            details = \"Stream refused by server\";\n                            break;\n                        case http2.constants.NGHTTP2_CANCEL:\n                            code = constants_1.Status.CANCELLED;\n                            details = \"Call cancelled\";\n                            break;\n                        case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n                            code = constants_1.Status.RESOURCE_EXHAUSTED;\n                            details = \"Bandwidth exhausted or memory limit exceeded\";\n                            break;\n                        case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n                            code = constants_1.Status.PERMISSION_DENIED;\n                            details = \"Protocol not secure enough\";\n                            break;\n                        case http2.constants.NGHTTP2_INTERNAL_ERROR:\n                            code = constants_1.Status.INTERNAL;\n                            if (this.internalError === null) {\n                                /* This error code was previously handled in the default case, and\n                                 * there are several instances of it online, so I wanted to\n                                 * preserve the original error message so that people find existing\n                                 * information in searches, but also include the more recognizable\n                                 * \"Internal server error\" message. */ details = `Received RST_STREAM with code ${stream.rstCode} (Internal server error)`;\n                            } else {\n                                if (this.internalError.code === \"ECONNRESET\" || this.internalError.code === \"ETIMEDOUT\") {\n                                    code = constants_1.Status.UNAVAILABLE;\n                                    details = this.internalError.message;\n                                } else {\n                                    /* The \"Received RST_STREAM with code ...\" error is preserved\n                                     * here for continuity with errors reported online, but the\n                                     * error message at the end will probably be more relevant in\n                                     * most cases. */ details = `Received RST_STREAM with code ${stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\n                                }\n                            }\n                            break;\n                        default:\n                            code = constants_1.Status.INTERNAL;\n                            details = `Received RST_STREAM with code ${stream.rstCode}`;\n                    }\n                    // This is a no-op if trailers were received at all.\n                    // This is OK, because status codes emitted here correspond to more\n                    // catastrophic issues that prevent us from receiving trailers in the\n                    // first place.\n                    this.endCall({\n                        code,\n                        details,\n                        metadata: new metadata_1.Metadata()\n                    });\n                });\n            });\n            stream.on(\"error\", (err)=>{\n                /* We need an error handler here to stop \"Uncaught Error\" exceptions\n                 * from bubbling up. However, errors here should all correspond to\n                 * \"close\" events, where we will handle the error more granularly */ /* Specifically looking for stream errors that were *not* constructed\n                 * from a RST_STREAM response here:\n                 * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\n                 */ if (err.code !== \"ERR_HTTP2_STREAM_ERROR\") {\n                    this.trace(\"Node error event: message=\" + err.message + \" code=\" + err.code + \" errno=\" + getSystemErrorName(err.errno) + \" syscall=\" + err.syscall);\n                    this.internalError = err;\n                }\n                this.streamEndWatchers.forEach((watcher)=>watcher(false));\n            });\n            if (this.pendingWrite) {\n                if (!this.pendingWriteCallback) {\n                    throw new Error(\"Invalid state in write handling code\");\n                }\n                this.trace(\"sending data chunk of length \" + this.pendingWrite.length + \" (deferred)\");\n                try {\n                    this.writeMessageToStream(this.pendingWrite, this.pendingWriteCallback);\n                } catch (error) {\n                    this.endCall({\n                        code: constants_1.Status.UNAVAILABLE,\n                        details: `Write failed with error ${error.message}`,\n                        metadata: new metadata_1.Metadata()\n                    });\n                }\n            }\n            this.maybeCloseWrites();\n        }\n    }\n    start(metadata, listener) {\n        this.trace(\"Sending metadata\");\n        this.listener = listener;\n        this.channel._startCallStream(this, metadata);\n        this.maybeOutputStatus();\n    }\n    destroyHttp2Stream() {\n        var _a;\n        // The http2 stream could already have been destroyed if cancelWithStatus\n        // is called in response to an internal http2 error.\n        if (this.http2Stream !== null && !this.http2Stream.destroyed) {\n            /* If the call has ended with an OK status, communicate that when closing\n             * the stream, partly to avoid a situation in which we detect an error\n             * RST_STREAM as a result after we have the status */ let code;\n            if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n                code = http2.constants.NGHTTP2_NO_ERROR;\n            } else {\n                code = http2.constants.NGHTTP2_CANCEL;\n            }\n            this.trace(\"close http2 stream with code \" + code);\n            this.http2Stream.close(code);\n        }\n    }\n    cancelWithStatus(status, details) {\n        this.trace(\"cancelWithStatus code: \" + status + ' details: \"' + details + '\"');\n        this.endCall({\n            code: status,\n            details,\n            metadata: new metadata_1.Metadata()\n        });\n    }\n    getDeadline() {\n        const deadlineList = [\n            this.options.deadline\n        ];\n        if (this.options.parentCall && this.options.flags & constants_1.Propagate.DEADLINE) {\n            deadlineList.push(this.options.parentCall.getDeadline());\n        }\n        if (this.configDeadline) {\n            deadlineList.push(this.configDeadline);\n        }\n        return getMinDeadline(deadlineList);\n    }\n    getCredentials() {\n        return this.credentials;\n    }\n    setCredentials(credentials) {\n        this.credentials = this.channelCallCredentials.compose(credentials);\n    }\n    getStatus() {\n        return this.finalStatus;\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.subchannel) === null || _a === void 0 ? void 0 : _a.getAddress()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n    }\n    getMethod() {\n        return this.methodName;\n    }\n    getHost() {\n        return this.options.host;\n    }\n    setConfigDeadline(configDeadline) {\n        this.configDeadline = configDeadline;\n    }\n    addStatusWatcher(watcher) {\n        this.statusWatchers.push(watcher);\n    }\n    addStreamEndWatcher(watcher) {\n        this.streamEndWatchers.push(watcher);\n    }\n    addFilters(extraFilters) {\n        this.filterStack.push(extraFilters);\n    }\n    getCallNumber() {\n        return this.callNumber;\n    }\n    startRead() {\n        /* If the stream has ended with an error, we should not emit any more\n         * messages and we should communicate that the stream has ended */ if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n            this.readsClosed = true;\n            this.maybeOutputStatus();\n            return;\n        }\n        this.canPush = true;\n        if (this.http2Stream === null) {\n            this.pendingRead = true;\n        } else {\n            if (this.unpushedReadMessages.length > 0) {\n                const nextMessage = this.unpushedReadMessages.shift();\n                this.push(nextMessage);\n                return;\n            }\n            /* Only resume reading from the http2Stream if we don't have any pending\n             * messages to emit */ this.http2Stream.resume();\n        }\n    }\n    maybeCloseWrites() {\n        if (this.writesClosed && !this.isWriteFilterPending && this.http2Stream !== null) {\n            this.trace(\"calling end() on HTTP/2 stream\");\n            this.http2Stream.end();\n        }\n    }\n    sendMessageWithContext(context, message) {\n        this.trace(\"write() called with message of length \" + message.length);\n        const writeObj = {\n            message,\n            flags: context.flags\n        };\n        const cb = (error)=>{\n            var _a, _b;\n            let code = constants_1.Status.UNAVAILABLE;\n            if (((_a = error) === null || _a === void 0 ? void 0 : _a.code) === \"ERR_STREAM_WRITE_AFTER_END\") {\n                code = constants_1.Status.INTERNAL;\n            }\n            if (error) {\n                this.cancelWithStatus(code, `Write error: ${error.message}`);\n            }\n            (_b = context.callback) === null || _b === void 0 ? void 0 : _b.call(context);\n        };\n        this.isWriteFilterPending = true;\n        this.filterStack.sendMessage(Promise.resolve(writeObj)).then((message)=>{\n            this.isWriteFilterPending = false;\n            if (this.http2Stream === null) {\n                this.trace(\"deferring writing data chunk of length \" + message.message.length);\n                this.pendingWrite = message.message;\n                this.pendingWriteCallback = cb;\n            } else {\n                this.trace(\"sending data chunk of length \" + message.message.length);\n                try {\n                    this.writeMessageToStream(message.message, cb);\n                } catch (error) {\n                    this.endCall({\n                        code: constants_1.Status.UNAVAILABLE,\n                        details: `Write failed with error ${error.message}`,\n                        metadata: new metadata_1.Metadata()\n                    });\n                }\n                this.maybeCloseWrites();\n            }\n        }, this.handleFilterError.bind(this));\n    }\n    halfClose() {\n        this.trace(\"end() called\");\n        this.writesClosed = true;\n        this.maybeCloseWrites();\n    }\n}\nexports.Http2CallStream = Http2CallStream; //# sourceMappingURL=call-stream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/call-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/call.js":
/*!******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ClientDuplexStreamImpl = exports.ClientWritableStreamImpl = exports.ClientReadableStreamImpl = exports.ClientUnaryCallImpl = exports.callErrorFromStatus = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\n/**\n * Construct a ServiceError from a StatusObject. This function exists primarily\n * as an attempt to make the error stack trace clearly communicate that the\n * error is not necessarily a problem in gRPC itself.\n * @param status\n */ function callErrorFromStatus(status, callerStack) {\n    const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;\n    const error = new Error(message);\n    const stack = `${error.stack}\\nfor call at\\n${callerStack}`;\n    return Object.assign(new Error(message), status, {\n        stack\n    });\n}\nexports.callErrorFromStatus = callErrorFromStatus;\nclass ClientUnaryCallImpl extends events_1.EventEmitter {\n    constructor(){\n        super();\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, \"Cancelled on client\");\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : \"unknown\";\n    }\n}\nexports.ClientUnaryCallImpl = ClientUnaryCallImpl;\nclass ClientReadableStreamImpl extends stream_1.Readable {\n    constructor(deserialize){\n        super({\n            objectMode: true\n        });\n        this.deserialize = deserialize;\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, \"Cancelled on client\");\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : \"unknown\";\n    }\n    _read(_size) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n    }\n}\nexports.ClientReadableStreamImpl = ClientReadableStreamImpl;\nclass ClientWritableStreamImpl extends stream_1.Writable {\n    constructor(serialize){\n        super({\n            objectMode: true\n        });\n        this.serialize = serialize;\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, \"Cancelled on client\");\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : \"unknown\";\n    }\n    _write(chunk, encoding, cb) {\n        var _a;\n        const context = {\n            callback: cb\n        };\n        const flags = Number(encoding);\n        if (!Number.isNaN(flags)) {\n            context.flags = flags;\n        }\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n    }\n    _final(cb) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n        cb();\n    }\n}\nexports.ClientWritableStreamImpl = ClientWritableStreamImpl;\nclass ClientDuplexStreamImpl extends stream_1.Duplex {\n    constructor(serialize, deserialize){\n        super({\n            objectMode: true\n        });\n        this.serialize = serialize;\n        this.deserialize = deserialize;\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, \"Cancelled on client\");\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : \"unknown\";\n    }\n    _read(_size) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n    }\n    _write(chunk, encoding, cb) {\n        var _a;\n        const context = {\n            callback: cb\n        };\n        const flags = Number(encoding);\n        if (!Number.isNaN(flags)) {\n            context.flags = flags;\n        }\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n    }\n    _final(cb) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n        cb();\n    }\n}\nexports.ClientDuplexStreamImpl = ClientDuplexStreamImpl; //# sourceMappingURL=call.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/call.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel-credentials.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChannelCredentials = void 0;\nconst tls_1 = __webpack_require__(/*! tls */ \"tls\");\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\nconst tls_helpers_1 = __webpack_require__(/*! ./tls-helpers */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n    if (obj && !(obj instanceof Buffer)) {\n        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n    }\n}\nfunction bufferOrNullEqual(buf1, buf2) {\n    if (buf1 === null && buf2 === null) {\n        return true;\n    } else {\n        return buf1 !== null && buf2 !== null && buf1.equals(buf2);\n    }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */ class ChannelCredentials {\n    constructor(callCredentials){\n        this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\n    }\n    /**\n     * Gets the set of per-call credentials associated with this instance.\n     */ _getCallCredentials() {\n        return this.callCredentials;\n    }\n    /**\n     * Return a new ChannelCredentials instance with a given set of credentials.\n     * The resulting instance can be used to construct a Channel that communicates\n     * over TLS.\n     * @param rootCerts The root certificate data.\n     * @param privateKey The client certificate private key, if available.\n     * @param certChain The client certificate key chain, if available.\n     * @param verifyOptions Additional options to modify certificate verification\n     */ static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n        var _a;\n        verifyIsBufferOrNull(rootCerts, \"Root certificate\");\n        verifyIsBufferOrNull(privateKey, \"Private key\");\n        verifyIsBufferOrNull(certChain, \"Certificate chain\");\n        if (privateKey && !certChain) {\n            throw new Error(\"Private key must be given with accompanying certificate chain\");\n        }\n        if (!privateKey && certChain) {\n            throw new Error(\"Certificate chain must be given with accompanying private key\");\n        }\n        const secureContext = tls_1.createSecureContext({\n            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : tls_helpers_1.getDefaultRootsData()) !== null && _a !== void 0 ? _a : undefined,\n            key: privateKey !== null && privateKey !== void 0 ? privateKey : undefined,\n            cert: certChain !== null && certChain !== void 0 ? certChain : undefined,\n            ciphers: tls_helpers_1.CIPHER_SUITES\n        });\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n    }\n    /**\n     * Return a new ChannelCredentials instance with credentials created using\n     * the provided secureContext. The resulting instances can be used to\n     * construct a Channel that communicates over TLS. gRPC will not override\n     * anything in the provided secureContext, so the environment variables\n     * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will\n     * not be applied.\n     * @param secureContext The return value of tls.createSecureContext()\n     * @param verifyOptions Additional options to modify certificate verification\n     */ static createFromSecureContext(secureContext, verifyOptions) {\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n    }\n    /**\n     * Return a new ChannelCredentials instance with no credentials.\n     */ static createInsecure() {\n        return new InsecureChannelCredentialsImpl();\n    }\n}\nexports.ChannelCredentials = ChannelCredentials;\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(callCredentials){\n        super(callCredentials);\n    }\n    compose(callCredentials) {\n        throw new Error(\"Cannot compose insecure credentials\");\n    }\n    _getConnectionOptions() {\n        return null;\n    }\n    _isSecure() {\n        return false;\n    }\n    _equals(other) {\n        return other instanceof InsecureChannelCredentialsImpl;\n    }\n}\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(secureContext, verifyOptions){\n        super();\n        this.secureContext = secureContext;\n        this.verifyOptions = verifyOptions;\n        this.connectionOptions = {\n            secureContext\n        };\n        // Node asserts that this option is a function, so we cannot pass undefined\n        if (verifyOptions === null || verifyOptions === void 0 ? void 0 : verifyOptions.checkServerIdentity) {\n            this.connectionOptions.checkServerIdentity = verifyOptions.checkServerIdentity;\n        }\n    }\n    compose(callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n        return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);\n    }\n    _getConnectionOptions() {\n        // Copy to prevent callers from mutating this.connectionOptions\n        return Object.assign({}, this.connectionOptions);\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof SecureChannelCredentialsImpl) {\n            return this.secureContext === other.secureContext && this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity;\n        } else {\n            return false;\n        }\n    }\n}\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\n    constructor(channelCredentials, callCreds){\n        super(callCreds);\n        this.channelCredentials = channelCredentials;\n    }\n    compose(callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\n    }\n    _getConnectionOptions() {\n        return this.channelCredentials._getConnectionOptions();\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ComposedChannelCredentialsImpl) {\n            return this.channelCredentials._equals(other.channelCredentials) && this.callCredentials._equals(other.callCredentials);\n        } else {\n            return false;\n        }\n    }\n} //# sourceMappingURL=channel-credentials.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel-options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.channelOptionsEqual = exports.recognizedOptions = void 0;\n/**\n * This is for checking provided options at runtime. This is an object for\n * easier membership checking.\n */ exports.recognizedOptions = {\n    \"grpc.ssl_target_name_override\": true,\n    \"grpc.primary_user_agent\": true,\n    \"grpc.secondary_user_agent\": true,\n    \"grpc.default_authority\": true,\n    \"grpc.keepalive_time_ms\": true,\n    \"grpc.keepalive_timeout_ms\": true,\n    \"grpc.keepalive_permit_without_calls\": true,\n    \"grpc.service_config\": true,\n    \"grpc.max_concurrent_streams\": true,\n    \"grpc.initial_reconnect_backoff_ms\": true,\n    \"grpc.max_reconnect_backoff_ms\": true,\n    \"grpc.use_local_subchannel_pool\": true,\n    \"grpc.max_send_message_length\": true,\n    \"grpc.max_receive_message_length\": true,\n    \"grpc.enable_http_proxy\": true,\n    \"grpc.enable_channelz\": true,\n    \"grpc.dns_min_time_between_resolutions_ms\": true,\n    \"grpc-node.max_session_memory\": true\n};\nfunction channelOptionsEqual(options1, options2) {\n    const keys1 = Object.keys(options1).sort();\n    const keys2 = Object.keys(options2).sort();\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for(let i = 0; i < keys1.length; i += 1){\n        if (keys1[i] !== keys2[i]) {\n            return false;\n        }\n        if (options1[keys1[i]] !== options2[keys2[i]]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.channelOptionsEqual = channelOptionsEqual; //# sourceMappingURL=channel-options.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwyQkFBMkIsR0FBR0EseUJBQXlCLEdBQUcsS0FBSztBQUMvRDs7O0NBR0MsR0FDREEseUJBQXlCLEdBQUc7SUFDeEIsaUNBQWlDO0lBQ2pDLDJCQUEyQjtJQUMzQiw2QkFBNkI7SUFDN0IsMEJBQTBCO0lBQzFCLDBCQUEwQjtJQUMxQiw2QkFBNkI7SUFDN0IsdUNBQXVDO0lBQ3ZDLHVCQUF1QjtJQUN2QiwrQkFBK0I7SUFDL0IscUNBQXFDO0lBQ3JDLGlDQUFpQztJQUNqQyxrQ0FBa0M7SUFDbEMsZ0NBQWdDO0lBQ2hDLG1DQUFtQztJQUNuQywwQkFBMEI7SUFDMUIsd0JBQXdCO0lBQ3hCLDRDQUE0QztJQUM1QyxnQ0FBZ0M7QUFDcEM7QUFDQSxTQUFTRSxvQkFBb0JFLFFBQVEsRUFBRUMsUUFBUTtJQUMzQyxNQUFNQyxRQUFRUixPQUFPUyxJQUFJLENBQUNILFVBQVVJLElBQUk7SUFDeEMsTUFBTUMsUUFBUVgsT0FBT1MsSUFBSSxDQUFDRixVQUFVRyxJQUFJO0lBQ3hDLElBQUlGLE1BQU1JLE1BQU0sS0FBS0QsTUFBTUMsTUFBTSxFQUFFO1FBQy9CLE9BQU87SUFDWDtJQUNBLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxNQUFNSSxNQUFNLEVBQUVDLEtBQUssRUFBRztRQUN0QyxJQUFJTCxLQUFLLENBQUNLLEVBQUUsS0FBS0YsS0FBSyxDQUFDRSxFQUFFLEVBQUU7WUFDdkIsT0FBTztRQUNYO1FBQ0EsSUFBSVAsUUFBUSxDQUFDRSxLQUFLLENBQUNLLEVBQUUsQ0FBQyxLQUFLTixRQUFRLENBQUNJLEtBQUssQ0FBQ0UsRUFBRSxDQUFDLEVBQUU7WUFDM0MsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPO0FBQ1g7QUFDQVgsMkJBQTJCLEdBQUdFLHFCQUM5QiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZmMtbmV4dGpzLXNoYWRjbi8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jaGFubmVsLW9wdGlvbnMuanM/Nzc2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jaGFubmVsT3B0aW9uc0VxdWFsID0gZXhwb3J0cy5yZWNvZ25pemVkT3B0aW9ucyA9IHZvaWQgMDtcbi8qKlxuICogVGhpcyBpcyBmb3IgY2hlY2tpbmcgcHJvdmlkZWQgb3B0aW9ucyBhdCBydW50aW1lLiBUaGlzIGlzIGFuIG9iamVjdCBmb3JcbiAqIGVhc2llciBtZW1iZXJzaGlwIGNoZWNraW5nLlxuICovXG5leHBvcnRzLnJlY29nbml6ZWRPcHRpb25zID0ge1xuICAgICdncnBjLnNzbF90YXJnZXRfbmFtZV9vdmVycmlkZSc6IHRydWUsXG4gICAgJ2dycGMucHJpbWFyeV91c2VyX2FnZW50JzogdHJ1ZSxcbiAgICAnZ3JwYy5zZWNvbmRhcnlfdXNlcl9hZ2VudCc6IHRydWUsXG4gICAgJ2dycGMuZGVmYXVsdF9hdXRob3JpdHknOiB0cnVlLFxuICAgICdncnBjLmtlZXBhbGl2ZV90aW1lX21zJzogdHJ1ZSxcbiAgICAnZ3JwYy5rZWVwYWxpdmVfdGltZW91dF9tcyc6IHRydWUsXG4gICAgJ2dycGMua2VlcGFsaXZlX3Blcm1pdF93aXRob3V0X2NhbGxzJzogdHJ1ZSxcbiAgICAnZ3JwYy5zZXJ2aWNlX2NvbmZpZyc6IHRydWUsXG4gICAgJ2dycGMubWF4X2NvbmN1cnJlbnRfc3RyZWFtcyc6IHRydWUsXG4gICAgJ2dycGMuaW5pdGlhbF9yZWNvbm5lY3RfYmFja29mZl9tcyc6IHRydWUsXG4gICAgJ2dycGMubWF4X3JlY29ubmVjdF9iYWNrb2ZmX21zJzogdHJ1ZSxcbiAgICAnZ3JwYy51c2VfbG9jYWxfc3ViY2hhbm5lbF9wb29sJzogdHJ1ZSxcbiAgICAnZ3JwYy5tYXhfc2VuZF9tZXNzYWdlX2xlbmd0aCc6IHRydWUsXG4gICAgJ2dycGMubWF4X3JlY2VpdmVfbWVzc2FnZV9sZW5ndGgnOiB0cnVlLFxuICAgICdncnBjLmVuYWJsZV9odHRwX3Byb3h5JzogdHJ1ZSxcbiAgICAnZ3JwYy5lbmFibGVfY2hhbm5lbHonOiB0cnVlLFxuICAgICdncnBjLmRuc19taW5fdGltZV9iZXR3ZWVuX3Jlc29sdXRpb25zX21zJzogdHJ1ZSxcbiAgICAnZ3JwYy1ub2RlLm1heF9zZXNzaW9uX21lbW9yeSc6IHRydWUsXG59O1xuZnVuY3Rpb24gY2hhbm5lbE9wdGlvbnNFcXVhbChvcHRpb25zMSwgb3B0aW9uczIpIHtcbiAgICBjb25zdCBrZXlzMSA9IE9iamVjdC5rZXlzKG9wdGlvbnMxKS5zb3J0KCk7XG4gICAgY29uc3Qga2V5czIgPSBPYmplY3Qua2V5cyhvcHRpb25zMikuc29ydCgpO1xuICAgIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5czEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGtleXMxW2ldICE9PSBrZXlzMltpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zMVtrZXlzMVtpXV0gIT09IG9wdGlvbnMyW2tleXMyW2ldXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5jaGFubmVsT3B0aW9uc0VxdWFsID0gY2hhbm5lbE9wdGlvbnNFcXVhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYW5uZWwtb3B0aW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjaGFubmVsT3B0aW9uc0VxdWFsIiwicmVjb2duaXplZE9wdGlvbnMiLCJvcHRpb25zMSIsIm9wdGlvbnMyIiwia2V5czEiLCJrZXlzIiwic29ydCIsImtleXMyIiwibGVuZ3RoIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/channel.js":
/*!*********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChannelImplementation = void 0;\nconst call_stream_1 = __webpack_require__(/*! ./call-stream */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call-stream.js\");\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\nconst resolving_load_balancer_1 = __webpack_require__(/*! ./resolving-load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js\");\nconst subchannel_pool_1 = __webpack_require__(/*! ./subchannel-pool */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst filter_stack_1 = __webpack_require__(/*! ./filter-stack */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\");\nconst call_credentials_filter_1 = __webpack_require__(/*! ./call-credentials-filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials-filter.js\");\nconst deadline_filter_1 = __webpack_require__(/*! ./deadline-filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/deadline-filter.js\");\nconst compression_filter_1 = __webpack_require__(/*! ./compression-filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst max_message_size_filter_1 = __webpack_require__(/*! ./max-message-size-filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js\");\nconst http_proxy_1 = __webpack_require__(/*! ./http_proxy */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\n/**\n * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args\n */ const MAX_TIMEOUT_TIME = 2147483647;\nlet nextCallNumber = 0;\nfunction getNewCallNumber() {\n    const callNumber = nextCallNumber;\n    nextCallNumber += 1;\n    if (nextCallNumber >= Number.MAX_SAFE_INTEGER) {\n        nextCallNumber = 0;\n    }\n    return callNumber;\n}\nconst INAPPROPRIATE_CONTROL_PLANE_CODES = [\n    constants_1.Status.OK,\n    constants_1.Status.INVALID_ARGUMENT,\n    constants_1.Status.NOT_FOUND,\n    constants_1.Status.ALREADY_EXISTS,\n    constants_1.Status.FAILED_PRECONDITION,\n    constants_1.Status.ABORTED,\n    constants_1.Status.OUT_OF_RANGE,\n    constants_1.Status.DATA_LOSS\n];\nfunction restrictControlPlaneStatusCode(code, details) {\n    if (INAPPROPRIATE_CONTROL_PLANE_CODES.includes(code)) {\n        return {\n            code: constants_1.Status.INTERNAL,\n            details: `Invalid status from control plane: ${code} ${constants_1.Status[code]} ${details}`\n        };\n    } else {\n        return {\n            code,\n            details\n        };\n    }\n}\nclass ChannelImplementation {\n    constructor(target, credentials, options){\n        var _a, _b, _c, _d;\n        this.credentials = credentials;\n        this.options = options;\n        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n        this.currentPicker = new picker_1.UnavailablePicker();\n        /**\n         * Calls queued up to get a call config. Should only be populated before the\n         * first time the resolver returns a result, which includes the ConfigSelector.\n         */ this.configSelectionQueue = [];\n        this.pickQueue = [];\n        this.connectivityStateWatchers = [];\n        this.configSelector = null;\n        /**\n         * This is the error from the name resolver if it failed most recently. It\n         * is only used to end calls that start while there is no config selector\n         * and the name resolver is in backoff, so it should be nulled if\n         * configSelector becomes set or the channel state becomes anything other\n         * than TRANSIENT_FAILURE.\n         */ this.currentResolutionError = null;\n        // Channelz info\n        this.channelzEnabled = true;\n        this.callTracker = new channelz_1.ChannelzCallTracker();\n        this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n        if (typeof target !== \"string\") {\n            throw new TypeError(\"Channel target must be a string\");\n        }\n        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\n            throw new TypeError(\"Channel credentials must be a ChannelCredentials object\");\n        }\n        if (options) {\n            if (typeof options !== \"object\") {\n                throw new TypeError(\"Channel options must be an object\");\n            }\n        }\n        this.originalTarget = target;\n        const originalTargetUri = uri_parser_1.parseUri(target);\n        if (originalTargetUri === null) {\n            throw new Error(`Could not parse target name \"${target}\"`);\n        }\n        /* This ensures that the target has a scheme that is registered with the\n         * resolver */ const defaultSchemeMapResult = resolver_1.mapUriDefaultScheme(originalTargetUri);\n        if (defaultSchemeMapResult === null) {\n            throw new Error(`Could not find a default scheme for target name \"${target}\"`);\n        }\n        this.callRefTimer = setInterval(()=>{}, MAX_TIMEOUT_TIME);\n        (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        if (this.options[\"grpc.enable_channelz\"] === 0) {\n            this.channelzEnabled = false;\n        }\n        this.channelzTrace = new channelz_1.ChannelzTrace();\n        this.channelzRef = channelz_1.registerChannelzChannel(target, ()=>this.getChannelzInfo(), this.channelzEnabled);\n        if (this.channelzEnabled) {\n            this.channelzTrace.addTrace(\"CT_INFO\", \"Channel created\");\n        }\n        if (this.options[\"grpc.default_authority\"]) {\n            this.defaultAuthority = this.options[\"grpc.default_authority\"];\n        } else {\n            this.defaultAuthority = resolver_1.getDefaultAuthority(defaultSchemeMapResult);\n        }\n        const proxyMapResult = http_proxy_1.mapProxyName(defaultSchemeMapResult, options);\n        this.target = proxyMapResult.target;\n        this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);\n        /* The global boolean parameter to getSubchannelPool has the inverse meaning to what\n         * the grpc.use_local_subchannel_pool channel option means. */ this.subchannelPool = subchannel_pool_1.getSubchannelPool(((_c = options[\"grpc.use_local_subchannel_pool\"]) !== null && _c !== void 0 ? _c : 0) === 0);\n        const channelControlHelper = {\n            createSubchannel: (subchannelAddress, subchannelArgs)=>{\n                const subchannel = this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, Object.assign({}, this.options, subchannelArgs), this.credentials);\n                if (this.channelzEnabled) {\n                    this.channelzTrace.addTrace(\"CT_INFO\", \"Created subchannel or used existing subchannel\", subchannel.getChannelzRef());\n                }\n                return subchannel;\n            },\n            updateState: (connectivityState, picker)=>{\n                this.currentPicker = picker;\n                const queueCopy = this.pickQueue.slice();\n                this.pickQueue = [];\n                this.callRefTimerUnref();\n                for (const { callStream, callMetadata, callConfig, dynamicFilters } of queueCopy){\n                    this.tryPick(callStream, callMetadata, callConfig, dynamicFilters);\n                }\n                this.updateState(connectivityState);\n            },\n            requestReresolution: ()=>{\n                // This should never be called.\n                throw new Error(\"Resolving load balancer should never call requestReresolution\");\n            },\n            addChannelzChild: (child)=>{\n                if (this.channelzEnabled) {\n                    this.childrenTracker.refChild(child);\n                }\n            },\n            removeChannelzChild: (child)=>{\n                if (this.channelzEnabled) {\n                    this.childrenTracker.unrefChild(child);\n                }\n            }\n        };\n        this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, options, (configSelector)=>{\n            if (this.channelzEnabled) {\n                this.channelzTrace.addTrace(\"CT_INFO\", \"Address resolution succeeded\");\n            }\n            this.configSelector = configSelector;\n            this.currentResolutionError = null;\n            /* We process the queue asynchronously to ensure that the corresponding\n             * load balancer update has completed. */ process.nextTick(()=>{\n                const localQueue = this.configSelectionQueue;\n                this.configSelectionQueue = [];\n                this.callRefTimerUnref();\n                for (const { callStream, callMetadata } of localQueue){\n                    this.tryGetConfig(callStream, callMetadata);\n                }\n                this.configSelectionQueue = [];\n            });\n        }, (status)=>{\n            if (this.channelzEnabled) {\n                this.channelzTrace.addTrace(\"CT_WARNING\", \"Address resolution failed with code \" + status.code + ' and details \"' + status.details + '\"');\n            }\n            if (this.configSelectionQueue.length > 0) {\n                this.trace(\"Name resolution failed with calls queued for config selection\");\n            }\n            if (this.configSelector === null) {\n                this.currentResolutionError = Object.assign(Object.assign({}, restrictControlPlaneStatusCode(status.code, status.details)), {\n                    metadata: status.metadata\n                });\n            }\n            const localQueue = this.configSelectionQueue;\n            this.configSelectionQueue = [];\n            this.callRefTimerUnref();\n            for (const { callStream, callMetadata } of localQueue){\n                if (callMetadata.getOptions().waitForReady) {\n                    this.callRefTimerRef();\n                    this.configSelectionQueue.push({\n                        callStream,\n                        callMetadata\n                    });\n                } else {\n                    callStream.cancelWithStatus(status.code, status.details);\n                }\n            }\n        });\n        this.filterStackFactory = new filter_stack_1.FilterStackFactory([\n            new call_credentials_filter_1.CallCredentialsFilterFactory(this),\n            new deadline_filter_1.DeadlineFilterFactory(this),\n            new max_message_size_filter_1.MaxMessageSizeFilterFactory(this.options),\n            new compression_filter_1.CompressionFilterFactory(this, this.options)\n        ]);\n        this.trace(\"Channel constructed with options \" + JSON.stringify(options, undefined, 2));\n        const error = new Error();\n        logging_1.trace(constants_1.LogVerbosity.DEBUG, \"channel_stacktrace\", \"(\" + this.channelzRef.id + \") \" + \"Channel constructed \\n\" + ((_d = error.stack) === null || _d === void 0 ? void 0 : _d.substring(error.stack.indexOf(\"\\n\") + 1)));\n    }\n    getChannelzInfo() {\n        return {\n            target: this.originalTarget,\n            state: this.connectivityState,\n            trace: this.channelzTrace,\n            callTracker: this.callTracker,\n            children: this.childrenTracker.getChildLists()\n        };\n    }\n    trace(text, verbosityOverride) {\n        logging_1.trace(verbosityOverride !== null && verbosityOverride !== void 0 ? verbosityOverride : constants_1.LogVerbosity.DEBUG, \"channel\", \"(\" + this.channelzRef.id + \") \" + uri_parser_1.uriToString(this.target) + \" \" + text);\n    }\n    callRefTimerRef() {\n        var _a, _b, _c, _d;\n        // If the hasRef function does not exist, always run the code\n        if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n            this.trace(\"callRefTimer.ref | configSelectionQueue.length=\" + this.configSelectionQueue.length + \" pickQueue.length=\" + this.pickQueue.length);\n            (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);\n        }\n    }\n    callRefTimerUnref() {\n        var _a, _b;\n        // If the hasRef function does not exist, always run the code\n        if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {\n            this.trace(\"callRefTimer.unref | configSelectionQueue.length=\" + this.configSelectionQueue.length + \" pickQueue.length=\" + this.pickQueue.length);\n            (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    }\n    pushPick(callStream, callMetadata, callConfig, dynamicFilters) {\n        this.pickQueue.push({\n            callStream,\n            callMetadata,\n            callConfig,\n            dynamicFilters\n        });\n        this.callRefTimerRef();\n    }\n    /**\n     * Check the picker output for the given call and corresponding metadata,\n     * and take any relevant actions. Should not be called while iterating\n     * over pickQueue.\n     * @param callStream\n     * @param callMetadata\n     */ tryPick(callStream, callMetadata, callConfig, dynamicFilters) {\n        var _a, _b;\n        const pickResult = this.currentPicker.pick({\n            metadata: callMetadata,\n            extraPickInfo: callConfig.pickInformation\n        });\n        const subchannelString = pickResult.subchannel ? \"(\" + pickResult.subchannel.getChannelzRef().id + \") \" + pickResult.subchannel.getAddress() : \"\" + pickResult.subchannel;\n        this.trace(\"Pick result for call [\" + callStream.getCallNumber() + \"]: \" + picker_1.PickResultType[pickResult.pickResultType] + \" subchannel: \" + subchannelString + \" status: \" + ((_a = pickResult.status) === null || _a === void 0 ? void 0 : _a.code) + \" \" + ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.details));\n        switch(pickResult.pickResultType){\n            case picker_1.PickResultType.COMPLETE:\n                if (pickResult.subchannel === null) {\n                    callStream.cancelWithStatus(constants_1.Status.UNAVAILABLE, \"Request dropped by load balancing policy\");\n                // End the call with an error\n                } else {\n                    /* If the subchannel is not in the READY state, that indicates a bug\n                     * somewhere in the load balancer or picker. So, we log an error and\n                     * queue the pick to be tried again later. */ if (pickResult.subchannel.getConnectivityState() !== connectivity_state_1.ConnectivityState.READY) {\n                        logging_1.log(constants_1.LogVerbosity.ERROR, \"Error: COMPLETE pick result subchannel \" + subchannelString + \" has state \" + connectivity_state_1.ConnectivityState[pickResult.subchannel.getConnectivityState()]);\n                        this.pushPick(callStream, callMetadata, callConfig, dynamicFilters);\n                        break;\n                    }\n                    /* We need to clone the callMetadata here because the transparent\n                     * retry code in the promise resolution handler use the same\n                     * callMetadata object, so it needs to stay unmodified */ callStream.filterStack.sendMetadata(Promise.resolve(callMetadata.clone())).then((finalMetadata)=>{\n                        var _a, _b, _c;\n                        const subchannelState = pickResult.subchannel.getConnectivityState();\n                        if (subchannelState === connectivity_state_1.ConnectivityState.READY) {\n                            try {\n                                const pickExtraFilters = pickResult.extraFilterFactories.map((factory)=>factory.createFilter(callStream));\n                                (_a = pickResult.subchannel) === null || _a === void 0 ? void 0 : _a.getRealSubchannel().startCallStream(finalMetadata, callStream, [\n                                    ...dynamicFilters,\n                                    ...pickExtraFilters\n                                ]);\n                                /* If we reach this point, the call stream has started\n                                 * successfully */ (_b = callConfig.onCommitted) === null || _b === void 0 ? void 0 : _b.call(callConfig);\n                                (_c = pickResult.onCallStarted) === null || _c === void 0 ? void 0 : _c.call(pickResult);\n                            } catch (error) {\n                                const errorCode = error.code;\n                                if (errorCode === \"ERR_HTTP2_GOAWAY_SESSION\" || errorCode === \"ERR_HTTP2_INVALID_SESSION\") {\n                                    /* An error here indicates that something went wrong with\n                                     * the picked subchannel's http2 stream right before we\n                                     * tried to start the stream. We are handling a promise\n                                     * result here, so this is asynchronous with respect to the\n                                     * original tryPick call, so calling it again is not\n                                     * recursive. We call tryPick immediately instead of\n                                     * queueing this pick again because handling the queue is\n                                     * triggered by state changes, and we want to immediately\n                                     * check if the state has already changed since the\n                                     * previous tryPick call. We do this instead of cancelling\n                                     * the stream because the correct behavior may be\n                                     * re-queueing instead, based on the logic in the rest of\n                                     * tryPick */ this.trace(\"Failed to start call on picked subchannel \" + subchannelString + \" with error \" + error.message + \". Retrying pick\", constants_1.LogVerbosity.INFO);\n                                    this.tryPick(callStream, callMetadata, callConfig, dynamicFilters);\n                                } else {\n                                    this.trace(\"Failed to start call on picked subchanel \" + subchannelString + \" with error \" + error.message + \". Ending call\", constants_1.LogVerbosity.INFO);\n                                    callStream.cancelWithStatus(constants_1.Status.INTERNAL, `Failed to start HTTP/2 stream with error: ${error.message}`);\n                                }\n                            }\n                        } else {\n                            /* The logic for doing this here is the same as in the catch\n                             * block above */ this.trace(\"Picked subchannel \" + subchannelString + \" has state \" + connectivity_state_1.ConnectivityState[subchannelState] + \" after metadata filters. Retrying pick\", constants_1.LogVerbosity.INFO);\n                            this.tryPick(callStream, callMetadata, callConfig, dynamicFilters);\n                        }\n                    }, (error)=>{\n                        // We assume the error code isn't 0 (Status.OK)\n                        const { code, details } = restrictControlPlaneStatusCode(typeof error.code === \"number\" ? error.code : constants_1.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error.message}`);\n                        callStream.cancelWithStatus(code, details);\n                    });\n                }\n                break;\n            case picker_1.PickResultType.QUEUE:\n                this.pushPick(callStream, callMetadata, callConfig, dynamicFilters);\n                break;\n            case picker_1.PickResultType.TRANSIENT_FAILURE:\n                if (callMetadata.getOptions().waitForReady) {\n                    this.pushPick(callStream, callMetadata, callConfig, dynamicFilters);\n                } else {\n                    const { code, details } = restrictControlPlaneStatusCode(pickResult.status.code, pickResult.status.details);\n                    callStream.cancelWithStatus(code, details);\n                }\n                break;\n            case picker_1.PickResultType.DROP:\n                const { code, details } = restrictControlPlaneStatusCode(pickResult.status.code, pickResult.status.details);\n                callStream.cancelWithStatus(code, details);\n                break;\n            default:\n                throw new Error(`Invalid state: unknown pickResultType ${pickResult.pickResultType}`);\n        }\n    }\n    removeConnectivityStateWatcher(watcherObject) {\n        const watcherIndex = this.connectivityStateWatchers.findIndex((value)=>value === watcherObject);\n        if (watcherIndex >= 0) {\n            this.connectivityStateWatchers.splice(watcherIndex, 1);\n        }\n    }\n    updateState(newState) {\n        logging_1.trace(constants_1.LogVerbosity.DEBUG, \"connectivity_state\", \"(\" + this.channelzRef.id + \") \" + uri_parser_1.uriToString(this.target) + \" \" + connectivity_state_1.ConnectivityState[this.connectivityState] + \" -> \" + connectivity_state_1.ConnectivityState[newState]);\n        if (this.channelzEnabled) {\n            this.channelzTrace.addTrace(\"CT_INFO\", connectivity_state_1.ConnectivityState[this.connectivityState] + \" -> \" + connectivity_state_1.ConnectivityState[newState]);\n        }\n        this.connectivityState = newState;\n        const watchersCopy = this.connectivityStateWatchers.slice();\n        for (const watcherObject of watchersCopy){\n            if (newState !== watcherObject.currentState) {\n                if (watcherObject.timer) {\n                    clearTimeout(watcherObject.timer);\n                }\n                this.removeConnectivityStateWatcher(watcherObject);\n                watcherObject.callback();\n            }\n        }\n        if (newState !== connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n            this.currentResolutionError = null;\n        }\n    }\n    tryGetConfig(stream, metadata) {\n        if (stream.getStatus() !== null) {\n            /* If the stream has a status, it has already finished and we don't need\n             * to take any more actions on it. */ return;\n        }\n        if (this.configSelector === null) {\n            /* This branch will only be taken at the beginning of the channel's life,\n             * before the resolver ever returns a result. So, the\n             * ResolvingLoadBalancer may be idle and if so it needs to be kicked\n             * because it now has a pending request. */ this.resolvingLoadBalancer.exitIdle();\n            if (this.currentResolutionError && !metadata.getOptions().waitForReady) {\n                stream.cancelWithStatus(this.currentResolutionError.code, this.currentResolutionError.details);\n            } else {\n                this.configSelectionQueue.push({\n                    callStream: stream,\n                    callMetadata: metadata\n                });\n                this.callRefTimerRef();\n            }\n        } else {\n            const callConfig = this.configSelector(stream.getMethod(), metadata);\n            if (callConfig.status === constants_1.Status.OK) {\n                if (callConfig.methodConfig.timeout) {\n                    const deadline = new Date();\n                    deadline.setSeconds(deadline.getSeconds() + callConfig.methodConfig.timeout.seconds);\n                    deadline.setMilliseconds(deadline.getMilliseconds() + callConfig.methodConfig.timeout.nanos / 1000000);\n                    stream.setConfigDeadline(deadline);\n                    // Refreshing the filters makes the deadline filter pick up the new deadline\n                    stream.filterStack.refresh();\n                }\n                if (callConfig.dynamicFilterFactories.length > 0) {\n                    /* These dynamicFilters are the mechanism for implementing gRFC A39:\n                     * https://github.com/grpc/proposal/blob/master/A39-xds-http-filters.md\n                     * We run them here instead of with the rest of the filters because\n                     * that spec says \"the xDS HTTP filters will run in between name\n                     * resolution and load balancing\".\n                     *\n                     * We use the filter stack here to simplify the multi-filter async\n                     * waterfall logic, but we pass along the underlying list of filters\n                     * to avoid having nested filter stacks when combining it with the\n                     * original filter stack. We do not pass along the original filter\n                     * factory list because these filters may need to persist data\n                     * between sending headers and other operations. */ const dynamicFilterStackFactory = new filter_stack_1.FilterStackFactory(callConfig.dynamicFilterFactories);\n                    const dynamicFilterStack = dynamicFilterStackFactory.createFilter(stream);\n                    dynamicFilterStack.sendMetadata(Promise.resolve(metadata)).then((filteredMetadata)=>{\n                        this.tryPick(stream, filteredMetadata, callConfig, dynamicFilterStack.getFilters());\n                    });\n                } else {\n                    this.tryPick(stream, metadata, callConfig, []);\n                }\n            } else {\n                const { code, details } = restrictControlPlaneStatusCode(callConfig.status, \"Failed to route call to method \" + stream.getMethod());\n                stream.cancelWithStatus(code, details);\n            }\n        }\n    }\n    _startCallStream(stream, metadata) {\n        this.tryGetConfig(stream, metadata.clone());\n    }\n    close() {\n        this.resolvingLoadBalancer.destroy();\n        this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN);\n        clearInterval(this.callRefTimer);\n        if (this.channelzEnabled) {\n            channelz_1.unregisterChannelzRef(this.channelzRef);\n        }\n        this.subchannelPool.unrefUnusedSubchannels();\n    }\n    getTarget() {\n        return uri_parser_1.uriToString(this.target);\n    }\n    getConnectivityState(tryToConnect) {\n        const connectivityState = this.connectivityState;\n        if (tryToConnect) {\n            this.resolvingLoadBalancer.exitIdle();\n        }\n        return connectivityState;\n    }\n    watchConnectivityState(currentState, deadline, callback) {\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n            throw new Error(\"Channel has been shut down\");\n        }\n        let timer = null;\n        if (deadline !== Infinity) {\n            const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);\n            const now = new Date();\n            if (deadline === -Infinity || deadlineDate <= now) {\n                process.nextTick(callback, new Error(\"Deadline passed without connectivity state change\"));\n                return;\n            }\n            timer = setTimeout(()=>{\n                this.removeConnectivityStateWatcher(watcherObject);\n                callback(new Error(\"Deadline passed without connectivity state change\"));\n            }, deadlineDate.getTime() - now.getTime());\n        }\n        const watcherObject = {\n            currentState,\n            callback,\n            timer\n        };\n        this.connectivityStateWatchers.push(watcherObject);\n    }\n    /**\n     * Get the channelz reference object for this channel. The returned value is\n     * garbage if channelz is disabled for this channel.\n     * @returns\n     */ getChannelzRef() {\n        return this.channelzRef;\n    }\n    createCall(method, deadline, host, parentCall, propagateFlags) {\n        if (typeof method !== \"string\") {\n            throw new TypeError(\"Channel#createCall: method must be a string\");\n        }\n        if (!(typeof deadline === \"number\" || deadline instanceof Date)) {\n            throw new TypeError(\"Channel#createCall: deadline must be a number or Date\");\n        }\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n            throw new Error(\"Channel has been shut down\");\n        }\n        const callNumber = getNewCallNumber();\n        this.trace(\"createCall [\" + callNumber + '] method=\"' + method + '\", deadline=' + deadline);\n        const finalOptions = {\n            deadline: deadline,\n            flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,\n            host: host !== null && host !== void 0 ? host : this.defaultAuthority,\n            parentCall: parentCall\n        };\n        const stream = new call_stream_1.Http2CallStream(method, this, finalOptions, this.filterStackFactory, this.credentials._getCallCredentials(), callNumber);\n        if (this.channelzEnabled) {\n            this.callTracker.addCallStarted();\n            stream.addStatusWatcher((status)=>{\n                if (status.code === constants_1.Status.OK) {\n                    this.callTracker.addCallSucceeded();\n                } else {\n                    this.callTracker.addCallFailed();\n                }\n            });\n        }\n        return stream;\n    }\n}\nexports.ChannelImplementation = ChannelImplementation; //# sourceMappingURL=channel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/channel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channelz.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setup = exports.getChannelzServiceDefinition = exports.getChannelzHandlers = exports.unregisterChannelzRef = exports.registerChannelzSocket = exports.registerChannelzServer = exports.registerChannelzSubchannel = exports.registerChannelzChannel = exports.ChannelzCallTracker = exports.ChannelzChildrenTracker = exports.ChannelzTrace = void 0;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\nconst make_client_1 = __webpack_require__(/*! ./make-client */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/make-client.js\");\nfunction channelRefToMessage(ref) {\n    return {\n        channel_id: ref.id,\n        name: ref.name\n    };\n}\nfunction subchannelRefToMessage(ref) {\n    return {\n        subchannel_id: ref.id,\n        name: ref.name\n    };\n}\nfunction serverRefToMessage(ref) {\n    return {\n        server_id: ref.id\n    };\n}\nfunction socketRefToMessage(ref) {\n    return {\n        socket_id: ref.id,\n        name: ref.name\n    };\n}\n/**\n * The loose upper bound on the number of events that should be retained in a\n * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a\n * number that should be large enough to contain the recent relevant\n * information, but small enough to not use excessive memory.\n */ const TARGET_RETAINED_TRACES = 32;\nclass ChannelzTrace {\n    constructor(){\n        this.events = [];\n        this.eventsLogged = 0;\n        this.creationTimestamp = new Date();\n    }\n    addTrace(severity, description, child) {\n        const timestamp = new Date();\n        this.events.push({\n            description: description,\n            severity: severity,\n            timestamp: timestamp,\n            childChannel: (child === null || child === void 0 ? void 0 : child.kind) === \"channel\" ? child : undefined,\n            childSubchannel: (child === null || child === void 0 ? void 0 : child.kind) === \"subchannel\" ? child : undefined\n        });\n        // Whenever the trace array gets too large, discard the first half\n        if (this.events.length >= TARGET_RETAINED_TRACES * 2) {\n            this.events = this.events.slice(TARGET_RETAINED_TRACES);\n        }\n        this.eventsLogged += 1;\n    }\n    getTraceMessage() {\n        return {\n            creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\n            num_events_logged: this.eventsLogged,\n            events: this.events.map((event)=>{\n                return {\n                    description: event.description,\n                    severity: event.severity,\n                    timestamp: dateToProtoTimestamp(event.timestamp),\n                    channel_ref: event.childChannel ? channelRefToMessage(event.childChannel) : null,\n                    subchannel_ref: event.childSubchannel ? subchannelRefToMessage(event.childSubchannel) : null\n                };\n            })\n        };\n    }\n}\nexports.ChannelzTrace = ChannelzTrace;\nclass ChannelzChildrenTracker {\n    constructor(){\n        this.channelChildren = new Map();\n        this.subchannelChildren = new Map();\n        this.socketChildren = new Map();\n    }\n    refChild(child) {\n        var _a, _b, _c;\n        switch(child.kind){\n            case \"channel\":\n                {\n                    let trackedChild = (_a = this.channelChildren.get(child.id)) !== null && _a !== void 0 ? _a : {\n                        ref: child,\n                        count: 0\n                    };\n                    trackedChild.count += 1;\n                    this.channelChildren.set(child.id, trackedChild);\n                    break;\n                }\n            case \"subchannel\":\n                {\n                    let trackedChild = (_b = this.subchannelChildren.get(child.id)) !== null && _b !== void 0 ? _b : {\n                        ref: child,\n                        count: 0\n                    };\n                    trackedChild.count += 1;\n                    this.subchannelChildren.set(child.id, trackedChild);\n                    break;\n                }\n            case \"socket\":\n                {\n                    let trackedChild = (_c = this.socketChildren.get(child.id)) !== null && _c !== void 0 ? _c : {\n                        ref: child,\n                        count: 0\n                    };\n                    trackedChild.count += 1;\n                    this.socketChildren.set(child.id, trackedChild);\n                    break;\n                }\n        }\n    }\n    unrefChild(child) {\n        switch(child.kind){\n            case \"channel\":\n                {\n                    let trackedChild = this.channelChildren.get(child.id);\n                    if (trackedChild !== undefined) {\n                        trackedChild.count -= 1;\n                        if (trackedChild.count === 0) {\n                            this.channelChildren.delete(child.id);\n                        } else {\n                            this.channelChildren.set(child.id, trackedChild);\n                        }\n                    }\n                    break;\n                }\n            case \"subchannel\":\n                {\n                    let trackedChild = this.subchannelChildren.get(child.id);\n                    if (trackedChild !== undefined) {\n                        trackedChild.count -= 1;\n                        if (trackedChild.count === 0) {\n                            this.subchannelChildren.delete(child.id);\n                        } else {\n                            this.subchannelChildren.set(child.id, trackedChild);\n                        }\n                    }\n                    break;\n                }\n            case \"socket\":\n                {\n                    let trackedChild = this.socketChildren.get(child.id);\n                    if (trackedChild !== undefined) {\n                        trackedChild.count -= 1;\n                        if (trackedChild.count === 0) {\n                            this.socketChildren.delete(child.id);\n                        } else {\n                            this.socketChildren.set(child.id, trackedChild);\n                        }\n                    }\n                    break;\n                }\n        }\n    }\n    getChildLists() {\n        const channels = [];\n        for (const { ref } of this.channelChildren.values()){\n            channels.push(ref);\n        }\n        const subchannels = [];\n        for (const { ref } of this.subchannelChildren.values()){\n            subchannels.push(ref);\n        }\n        const sockets = [];\n        for (const { ref } of this.socketChildren.values()){\n            sockets.push(ref);\n        }\n        return {\n            channels,\n            subchannels,\n            sockets\n        };\n    }\n}\nexports.ChannelzChildrenTracker = ChannelzChildrenTracker;\nclass ChannelzCallTracker {\n    constructor(){\n        this.callsStarted = 0;\n        this.callsSucceeded = 0;\n        this.callsFailed = 0;\n        this.lastCallStartedTimestamp = null;\n    }\n    addCallStarted() {\n        this.callsStarted += 1;\n        this.lastCallStartedTimestamp = new Date();\n    }\n    addCallSucceeded() {\n        this.callsSucceeded += 1;\n    }\n    addCallFailed() {\n        this.callsFailed += 1;\n    }\n}\nexports.ChannelzCallTracker = ChannelzCallTracker;\nlet nextId = 1;\nfunction getNextId() {\n    return nextId++;\n}\nconst channels = [];\nconst subchannels = [];\nconst servers = [];\nconst sockets = [];\nfunction registerChannelzChannel(name, getInfo, channelzEnabled) {\n    const id = getNextId();\n    const ref = {\n        id,\n        name,\n        kind: \"channel\"\n    };\n    if (channelzEnabled) {\n        channels[id] = {\n            ref,\n            getInfo\n        };\n    }\n    return ref;\n}\nexports.registerChannelzChannel = registerChannelzChannel;\nfunction registerChannelzSubchannel(name, getInfo, channelzEnabled) {\n    const id = getNextId();\n    const ref = {\n        id,\n        name,\n        kind: \"subchannel\"\n    };\n    if (channelzEnabled) {\n        subchannels[id] = {\n            ref,\n            getInfo\n        };\n    }\n    return ref;\n}\nexports.registerChannelzSubchannel = registerChannelzSubchannel;\nfunction registerChannelzServer(getInfo, channelzEnabled) {\n    const id = getNextId();\n    const ref = {\n        id,\n        kind: \"server\"\n    };\n    if (channelzEnabled) {\n        servers[id] = {\n            ref,\n            getInfo\n        };\n    }\n    return ref;\n}\nexports.registerChannelzServer = registerChannelzServer;\nfunction registerChannelzSocket(name, getInfo, channelzEnabled) {\n    const id = getNextId();\n    const ref = {\n        id,\n        name,\n        kind: \"socket\"\n    };\n    if (channelzEnabled) {\n        sockets[id] = {\n            ref,\n            getInfo\n        };\n    }\n    return ref;\n}\nexports.registerChannelzSocket = registerChannelzSocket;\nfunction unregisterChannelzRef(ref) {\n    switch(ref.kind){\n        case \"channel\":\n            delete channels[ref.id];\n            return;\n        case \"subchannel\":\n            delete subchannels[ref.id];\n            return;\n        case \"server\":\n            delete servers[ref.id];\n            return;\n        case \"socket\":\n            delete sockets[ref.id];\n            return;\n    }\n}\nexports.unregisterChannelzRef = unregisterChannelzRef;\n/**\n * Parse a single section of an IPv6 address as two bytes\n * @param addressSection A hexadecimal string of length up to 4\n * @returns The pair of bytes representing this address section\n */ function parseIPv6Section(addressSection) {\n    const numberValue = Number.parseInt(addressSection, 16);\n    return [\n        numberValue / 256 | 0,\n        numberValue % 256\n    ];\n}\n/**\n * Parse a chunk of an IPv6 address string to some number of bytes\n * @param addressChunk Some number of segments of up to 4 hexadecimal\n *   characters each, joined by colons.\n * @returns The list of bytes representing this address chunk\n */ function parseIPv6Chunk(addressChunk) {\n    if (addressChunk === \"\") {\n        return [];\n    }\n    const bytePairs = addressChunk.split(\":\").map((section)=>parseIPv6Section(section));\n    const result = [];\n    return result.concat(...bytePairs);\n}\n/**\n * Converts an IPv4 or IPv6 address from string representation to binary\n * representation\n * @param ipAddress an IP address in standard IPv4 or IPv6 text format\n * @returns\n */ function ipAddressStringToBuffer(ipAddress) {\n    if (net_1.isIPv4(ipAddress)) {\n        return Buffer.from(Uint8Array.from(ipAddress.split(\".\").map((segment)=>Number.parseInt(segment))));\n    } else if (net_1.isIPv6(ipAddress)) {\n        let leftSection;\n        let rightSection;\n        const doubleColonIndex = ipAddress.indexOf(\"::\");\n        if (doubleColonIndex === -1) {\n            leftSection = ipAddress;\n            rightSection = \"\";\n        } else {\n            leftSection = ipAddress.substring(0, doubleColonIndex);\n            rightSection = ipAddress.substring(doubleColonIndex + 2);\n        }\n        const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));\n        const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));\n        const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);\n        return Buffer.concat([\n            leftBuffer,\n            middleBuffer,\n            rightBuffer\n        ]);\n    } else {\n        return null;\n    }\n}\nfunction connectivityStateToMessage(state) {\n    switch(state){\n        case connectivity_state_1.ConnectivityState.CONNECTING:\n            return {\n                state: \"CONNECTING\"\n            };\n        case connectivity_state_1.ConnectivityState.IDLE:\n            return {\n                state: \"IDLE\"\n            };\n        case connectivity_state_1.ConnectivityState.READY:\n            return {\n                state: \"READY\"\n            };\n        case connectivity_state_1.ConnectivityState.SHUTDOWN:\n            return {\n                state: \"SHUTDOWN\"\n            };\n        case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n            return {\n                state: \"TRANSIENT_FAILURE\"\n            };\n        default:\n            return {\n                state: \"UNKNOWN\"\n            };\n    }\n}\nfunction dateToProtoTimestamp(date) {\n    if (!date) {\n        return null;\n    }\n    const millisSinceEpoch = date.getTime();\n    return {\n        seconds: millisSinceEpoch / 1000 | 0,\n        nanos: millisSinceEpoch % 1000 * 1000000\n    };\n}\nfunction getChannelMessage(channelEntry) {\n    const resolvedInfo = channelEntry.getInfo();\n    return {\n        ref: channelRefToMessage(channelEntry.ref),\n        data: {\n            target: resolvedInfo.target,\n            state: connectivityStateToMessage(resolvedInfo.state),\n            calls_started: resolvedInfo.callTracker.callsStarted,\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n            calls_failed: resolvedInfo.callTracker.callsFailed,\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n            trace: resolvedInfo.trace.getTraceMessage()\n        },\n        channel_ref: resolvedInfo.children.channels.map((ref)=>channelRefToMessage(ref)),\n        subchannel_ref: resolvedInfo.children.subchannels.map((ref)=>subchannelRefToMessage(ref))\n    };\n}\nfunction GetChannel(call, callback) {\n    const channelId = Number.parseInt(call.request.channel_id);\n    const channelEntry = channels[channelId];\n    if (channelEntry === undefined) {\n        callback({\n            \"code\": constants_1.Status.NOT_FOUND,\n            \"details\": \"No channel data found for id \" + channelId\n        });\n        return;\n    }\n    callback(null, {\n        channel: getChannelMessage(channelEntry)\n    });\n}\nfunction GetTopChannels(call, callback) {\n    const maxResults = Number.parseInt(call.request.max_results);\n    const resultList = [];\n    let i = Number.parseInt(call.request.start_channel_id);\n    for(; i < channels.length; i++){\n        const channelEntry = channels[i];\n        if (channelEntry === undefined) {\n            continue;\n        }\n        resultList.push(getChannelMessage(channelEntry));\n        if (resultList.length >= maxResults) {\n            break;\n        }\n    }\n    callback(null, {\n        channel: resultList,\n        end: i >= servers.length\n    });\n}\nfunction getServerMessage(serverEntry) {\n    const resolvedInfo = serverEntry.getInfo();\n    return {\n        ref: serverRefToMessage(serverEntry.ref),\n        data: {\n            calls_started: resolvedInfo.callTracker.callsStarted,\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n            calls_failed: resolvedInfo.callTracker.callsFailed,\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n            trace: resolvedInfo.trace.getTraceMessage()\n        },\n        listen_socket: resolvedInfo.listenerChildren.sockets.map((ref)=>socketRefToMessage(ref))\n    };\n}\nfunction GetServer(call, callback) {\n    const serverId = Number.parseInt(call.request.server_id);\n    const serverEntry = servers[serverId];\n    if (serverEntry === undefined) {\n        callback({\n            \"code\": constants_1.Status.NOT_FOUND,\n            \"details\": \"No server data found for id \" + serverId\n        });\n        return;\n    }\n    callback(null, {\n        server: getServerMessage(serverEntry)\n    });\n}\nfunction GetServers(call, callback) {\n    const maxResults = Number.parseInt(call.request.max_results);\n    const resultList = [];\n    let i = Number.parseInt(call.request.start_server_id);\n    for(; i < servers.length; i++){\n        const serverEntry = servers[i];\n        if (serverEntry === undefined) {\n            continue;\n        }\n        resultList.push(getServerMessage(serverEntry));\n        if (resultList.length >= maxResults) {\n            break;\n        }\n    }\n    callback(null, {\n        server: resultList,\n        end: i >= servers.length\n    });\n}\nfunction GetSubchannel(call, callback) {\n    const subchannelId = Number.parseInt(call.request.subchannel_id);\n    const subchannelEntry = subchannels[subchannelId];\n    if (subchannelEntry === undefined) {\n        callback({\n            \"code\": constants_1.Status.NOT_FOUND,\n            \"details\": \"No subchannel data found for id \" + subchannelId\n        });\n        return;\n    }\n    const resolvedInfo = subchannelEntry.getInfo();\n    const subchannelMessage = {\n        ref: subchannelRefToMessage(subchannelEntry.ref),\n        data: {\n            target: resolvedInfo.target,\n            state: connectivityStateToMessage(resolvedInfo.state),\n            calls_started: resolvedInfo.callTracker.callsStarted,\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n            calls_failed: resolvedInfo.callTracker.callsFailed,\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n            trace: resolvedInfo.trace.getTraceMessage()\n        },\n        socket_ref: resolvedInfo.children.sockets.map((ref)=>socketRefToMessage(ref))\n    };\n    callback(null, {\n        subchannel: subchannelMessage\n    });\n}\nfunction subchannelAddressToAddressMessage(subchannelAddress) {\n    var _a;\n    if (subchannel_address_1.isTcpSubchannelAddress(subchannelAddress)) {\n        return {\n            address: \"tcpip_address\",\n            tcpip_address: {\n                ip_address: (_a = ipAddressStringToBuffer(subchannelAddress.host)) !== null && _a !== void 0 ? _a : undefined,\n                port: subchannelAddress.port\n            }\n        };\n    } else {\n        return {\n            address: \"uds_address\",\n            uds_address: {\n                filename: subchannelAddress.path\n            }\n        };\n    }\n}\nfunction GetSocket(call, callback) {\n    var _a, _b, _c, _d, _e;\n    const socketId = Number.parseInt(call.request.socket_id);\n    const socketEntry = sockets[socketId];\n    if (socketEntry === undefined) {\n        callback({\n            \"code\": constants_1.Status.NOT_FOUND,\n            \"details\": \"No socket data found for id \" + socketId\n        });\n        return;\n    }\n    const resolvedInfo = socketEntry.getInfo();\n    const securityMessage = resolvedInfo.security ? {\n        model: \"tls\",\n        tls: {\n            cipher_suite: resolvedInfo.security.cipherSuiteStandardName ? \"standard_name\" : \"other_name\",\n            standard_name: (_a = resolvedInfo.security.cipherSuiteStandardName) !== null && _a !== void 0 ? _a : undefined,\n            other_name: (_b = resolvedInfo.security.cipherSuiteOtherName) !== null && _b !== void 0 ? _b : undefined,\n            local_certificate: (_c = resolvedInfo.security.localCertificate) !== null && _c !== void 0 ? _c : undefined,\n            remote_certificate: (_d = resolvedInfo.security.remoteCertificate) !== null && _d !== void 0 ? _d : undefined\n        }\n    } : null;\n    const socketMessage = {\n        ref: socketRefToMessage(socketEntry.ref),\n        local: resolvedInfo.localAddress ? subchannelAddressToAddressMessage(resolvedInfo.localAddress) : null,\n        remote: resolvedInfo.remoteAddress ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress) : null,\n        remote_name: (_e = resolvedInfo.remoteName) !== null && _e !== void 0 ? _e : undefined,\n        security: securityMessage,\n        data: {\n            keep_alives_sent: resolvedInfo.keepAlivesSent,\n            streams_started: resolvedInfo.streamsStarted,\n            streams_succeeded: resolvedInfo.streamsSucceeded,\n            streams_failed: resolvedInfo.streamsFailed,\n            last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),\n            last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),\n            messages_received: resolvedInfo.messagesReceived,\n            messages_sent: resolvedInfo.messagesSent,\n            last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),\n            last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),\n            local_flow_control_window: resolvedInfo.localFlowControlWindow ? {\n                value: resolvedInfo.localFlowControlWindow\n            } : null,\n            remote_flow_control_window: resolvedInfo.remoteFlowControlWindow ? {\n                value: resolvedInfo.remoteFlowControlWindow\n            } : null\n        }\n    };\n    callback(null, {\n        socket: socketMessage\n    });\n}\nfunction GetServerSockets(call, callback) {\n    const serverId = Number.parseInt(call.request.server_id);\n    const serverEntry = servers[serverId];\n    if (serverEntry === undefined) {\n        callback({\n            \"code\": constants_1.Status.NOT_FOUND,\n            \"details\": \"No server data found for id \" + serverId\n        });\n        return;\n    }\n    const startId = Number.parseInt(call.request.start_socket_id);\n    const maxResults = Number.parseInt(call.request.max_results);\n    const resolvedInfo = serverEntry.getInfo();\n    // If we wanted to include listener sockets in the result, this line would\n    // instead say\n    // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);\n    const allSockets = resolvedInfo.sessionChildren.sockets.sort((ref1, ref2)=>ref1.id - ref2.id);\n    const resultList = [];\n    let i = 0;\n    for(; i < allSockets.length; i++){\n        if (allSockets[i].id >= startId) {\n            resultList.push(socketRefToMessage(allSockets[i]));\n            if (resultList.length >= maxResults) {\n                break;\n            }\n        }\n    }\n    callback(null, {\n        socket_ref: resultList,\n        end: i >= allSockets.length\n    });\n}\nfunction getChannelzHandlers() {\n    return {\n        GetChannel,\n        GetTopChannels,\n        GetServer,\n        GetServers,\n        GetSubchannel,\n        GetSocket,\n        GetServerSockets\n    };\n}\nexports.getChannelzHandlers = getChannelzHandlers;\nlet loadedChannelzDefinition = null;\nfunction getChannelzServiceDefinition() {\n    if (loadedChannelzDefinition) {\n        return loadedChannelzDefinition;\n    }\n    /* The purpose of this complexity is to avoid loading @grpc/proto-loader at\n     * runtime for users who will not use/enable channelz. */ const loaderLoadSync = (__webpack_require__(/*! @grpc/proto-loader */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/@grpc/proto-loader/build/src/index.js\").loadSync);\n    const loadedProto = loaderLoadSync(\"channelz.proto\", {\n        keepCase: true,\n        longs: String,\n        enums: String,\n        defaults: true,\n        oneofs: true,\n        includeDirs: [\n            `${__dirname}/../../proto`\n        ]\n    });\n    const channelzGrpcObject = make_client_1.loadPackageDefinition(loadedProto);\n    loadedChannelzDefinition = channelzGrpcObject.grpc.channelz.v1.Channelz.service;\n    return loadedChannelzDefinition;\n}\nexports.getChannelzServiceDefinition = getChannelzServiceDefinition;\nfunction setup() {\n    admin_1.registerAdminService(getChannelzServiceDefinition, getChannelzHandlers);\n}\nexports.setup = setup; //# sourceMappingURL=channelz.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/client-interceptors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getInterceptingCall = exports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.InterceptorConfigurationError = void 0;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst call_stream_1 = __webpack_require__(/*! ./call-stream */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call-stream.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\n/**\n * Error class associated with passing both interceptors and interceptor\n * providers to a client constructor or as call options.\n */ class InterceptorConfigurationError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"InterceptorConfigurationError\";\n        Error.captureStackTrace(this, InterceptorConfigurationError);\n    }\n}\nexports.InterceptorConfigurationError = InterceptorConfigurationError;\nclass ListenerBuilder {\n    constructor(){\n        this.metadata = undefined;\n        this.message = undefined;\n        this.status = undefined;\n    }\n    withOnReceiveMetadata(onReceiveMetadata) {\n        this.metadata = onReceiveMetadata;\n        return this;\n    }\n    withOnReceiveMessage(onReceiveMessage) {\n        this.message = onReceiveMessage;\n        return this;\n    }\n    withOnReceiveStatus(onReceiveStatus) {\n        this.status = onReceiveStatus;\n        return this;\n    }\n    build() {\n        return {\n            onReceiveMetadata: this.metadata,\n            onReceiveMessage: this.message,\n            onReceiveStatus: this.status\n        };\n    }\n}\nexports.ListenerBuilder = ListenerBuilder;\nclass RequesterBuilder {\n    constructor(){\n        this.start = undefined;\n        this.message = undefined;\n        this.halfClose = undefined;\n        this.cancel = undefined;\n    }\n    withStart(start) {\n        this.start = start;\n        return this;\n    }\n    withSendMessage(sendMessage) {\n        this.message = sendMessage;\n        return this;\n    }\n    withHalfClose(halfClose) {\n        this.halfClose = halfClose;\n        return this;\n    }\n    withCancel(cancel) {\n        this.cancel = cancel;\n        return this;\n    }\n    build() {\n        return {\n            start: this.start,\n            sendMessage: this.message,\n            halfClose: this.halfClose,\n            cancel: this.cancel\n        };\n    }\n}\nexports.RequesterBuilder = RequesterBuilder;\n/**\n * A Listener with a default pass-through implementation of each method. Used\n * for filling out Listeners with some methods omitted.\n */ const defaultListener = {\n    onReceiveMetadata: (metadata, next)=>{\n        next(metadata);\n    },\n    onReceiveMessage: (message, next)=>{\n        next(message);\n    },\n    onReceiveStatus: (status, next)=>{\n        next(status);\n    }\n};\n/**\n * A Requester with a default pass-through implementation of each method. Used\n * for filling out Requesters with some methods omitted.\n */ const defaultRequester = {\n    start: (metadata, listener, next)=>{\n        next(metadata, listener);\n    },\n    sendMessage: (message, next)=>{\n        next(message);\n    },\n    halfClose: (next)=>{\n        next();\n    },\n    cancel: (next)=>{\n        next();\n    }\n};\nclass InterceptingCall {\n    constructor(nextCall, requester){\n        var _a, _b, _c, _d;\n        this.nextCall = nextCall;\n        /**\n         * Indicates that metadata has been passed to the requester's start\n         * method but it has not been passed to the corresponding next callback\n         */ this.processingMetadata = false;\n        /**\n         * Message context for a pending message that is waiting for\n         */ this.pendingMessageContext = null;\n        /**\n         * Indicates that a message has been passed to the requester's sendMessage\n         * method but it has not been passed to the corresponding next callback\n         */ this.processingMessage = false;\n        /**\n         * Indicates that a status was received but could not be propagated because\n         * a message was still being processed.\n         */ this.pendingHalfClose = false;\n        if (requester) {\n            this.requester = {\n                start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,\n                sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,\n                halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,\n                cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel\n            };\n        } else {\n            this.requester = defaultRequester;\n        }\n    }\n    cancelWithStatus(status, details) {\n        this.requester.cancel(()=>{\n            this.nextCall.cancelWithStatus(status, details);\n        });\n    }\n    getPeer() {\n        return this.nextCall.getPeer();\n    }\n    processPendingMessage() {\n        if (this.pendingMessageContext) {\n            this.nextCall.sendMessageWithContext(this.pendingMessageContext, this.pendingMessage);\n            this.pendingMessageContext = null;\n            this.pendingMessage = null;\n        }\n    }\n    processPendingHalfClose() {\n        if (this.pendingHalfClose) {\n            this.nextCall.halfClose();\n        }\n    }\n    start(metadata, interceptingListener) {\n        var _a, _b, _c, _d, _e, _f;\n        const fullInterceptingListener = {\n            onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : (metadata)=>{},\n            onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : (message)=>{},\n            onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : (status)=>{}\n        };\n        this.processingMetadata = true;\n        this.requester.start(metadata, fullInterceptingListener, (md, listener)=>{\n            var _a, _b, _c;\n            this.processingMetadata = false;\n            let finalInterceptingListener;\n            if (call_stream_1.isInterceptingListener(listener)) {\n                finalInterceptingListener = listener;\n            } else {\n                const fullListener = {\n                    onReceiveMetadata: (_a = listener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultListener.onReceiveMetadata,\n                    onReceiveMessage: (_b = listener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultListener.onReceiveMessage,\n                    onReceiveStatus: (_c = listener.onReceiveStatus) !== null && _c !== void 0 ? _c : defaultListener.onReceiveStatus\n                };\n                finalInterceptingListener = new call_stream_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);\n            }\n            this.nextCall.start(md, finalInterceptingListener);\n            this.processPendingMessage();\n            this.processPendingHalfClose();\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessageWithContext(context, message) {\n        this.processingMessage = true;\n        this.requester.sendMessage(message, (finalMessage)=>{\n            this.processingMessage = false;\n            if (this.processingMetadata) {\n                this.pendingMessageContext = context;\n                this.pendingMessage = message;\n            } else {\n                this.nextCall.sendMessageWithContext(context, finalMessage);\n                this.processPendingHalfClose();\n            }\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessage(message) {\n        this.sendMessageWithContext({}, message);\n    }\n    startRead() {\n        this.nextCall.startRead();\n    }\n    halfClose() {\n        this.requester.halfClose(()=>{\n            if (this.processingMetadata || this.processingMessage) {\n                this.pendingHalfClose = true;\n            } else {\n                this.nextCall.halfClose();\n            }\n        });\n    }\n    setCredentials(credentials) {\n        this.nextCall.setCredentials(credentials);\n    }\n}\nexports.InterceptingCall = InterceptingCall;\nfunction getCall(channel, path, options) {\n    var _a, _b;\n    const deadline = (_a = options.deadline) !== null && _a !== void 0 ? _a : Infinity;\n    const host = options.host;\n    const parent = (_b = options.parent) !== null && _b !== void 0 ? _b : null;\n    const propagateFlags = options.propagate_flags;\n    const credentials = options.credentials;\n    const call = channel.createCall(path, deadline, host, parent, propagateFlags);\n    if (credentials) {\n        call.setCredentials(credentials);\n    }\n    return call;\n}\n/**\n * InterceptingCall implementation that directly owns the underlying Call\n * object and handles serialization and deseraizliation.\n */ class BaseInterceptingCall {\n    constructor(call, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    methodDefinition){\n        this.call = call;\n        this.methodDefinition = methodDefinition;\n    }\n    cancelWithStatus(status, details) {\n        this.call.cancelWithStatus(status, details);\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    setCredentials(credentials) {\n        this.call.setCredentials(credentials);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessageWithContext(context, message) {\n        let serialized;\n        try {\n            serialized = this.methodDefinition.requestSerialize(message);\n        } catch (e) {\n            this.call.cancelWithStatus(constants_1.Status.INTERNAL, `Request message serialization failure: ${e.message}`);\n            return;\n        }\n        this.call.sendMessageWithContext(context, serialized);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessage(message) {\n        this.sendMessageWithContext({}, message);\n    }\n    start(metadata, interceptingListener) {\n        let readError = null;\n        this.call.start(metadata, {\n            onReceiveMetadata: (metadata)=>{\n                var _a;\n                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata);\n            },\n            onReceiveMessage: (message)=>{\n                var _a;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let deserialized;\n                try {\n                    deserialized = this.methodDefinition.responseDeserialize(message);\n                } catch (e) {\n                    readError = {\n                        code: constants_1.Status.INTERNAL,\n                        details: `Response message parsing error: ${e.message}`,\n                        metadata: new metadata_1.Metadata()\n                    };\n                    this.call.cancelWithStatus(readError.code, readError.details);\n                    return;\n                }\n                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);\n            },\n            onReceiveStatus: (status)=>{\n                var _a, _b;\n                if (readError) {\n                    (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);\n                } else {\n                    (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);\n                }\n            }\n        });\n    }\n    startRead() {\n        this.call.startRead();\n    }\n    halfClose() {\n        this.call.halfClose();\n    }\n}\n/**\n * BaseInterceptingCall with special-cased behavior for methods with unary\n * responses.\n */ class BaseUnaryInterceptingCall extends BaseInterceptingCall {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(call, methodDefinition){\n        super(call, methodDefinition);\n    }\n    start(metadata, listener) {\n        var _a, _b;\n        let receivedMessage = false;\n        const wrapperListener = {\n            onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : (metadata)=>{},\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage: (message)=>{\n                var _a;\n                receivedMessage = true;\n                (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, message);\n            },\n            onReceiveStatus: (status)=>{\n                var _a, _b;\n                if (!receivedMessage) {\n                    (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, null);\n                }\n                (_b = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(listener, status);\n            }\n        };\n        super.start(metadata, wrapperListener);\n        this.call.startRead();\n    }\n}\n/**\n * BaseInterceptingCall with special-cased behavior for methods with streaming\n * responses.\n */ class BaseStreamingInterceptingCall extends BaseInterceptingCall {\n}\nfunction getBottomInterceptingCall(channel, options, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nmethodDefinition) {\n    const call = getCall(channel, methodDefinition.path, options);\n    if (methodDefinition.responseStream) {\n        return new BaseStreamingInterceptingCall(call, methodDefinition);\n    } else {\n        return new BaseUnaryInterceptingCall(call, methodDefinition);\n    }\n}\nfunction getInterceptingCall(interceptorArgs, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nmethodDefinition, options, channel) {\n    if (interceptorArgs.clientInterceptors.length > 0 && interceptorArgs.clientInterceptorProviders.length > 0) {\n        throw new InterceptorConfigurationError(\"Both interceptors and interceptor_providers were passed as options \" + \"to the client constructor. Only one of these is allowed.\");\n    }\n    if (interceptorArgs.callInterceptors.length > 0 && interceptorArgs.callInterceptorProviders.length > 0) {\n        throw new InterceptorConfigurationError(\"Both interceptors and interceptor_providers were passed as call \" + \"options. Only one of these is allowed.\");\n    }\n    let interceptors = [];\n    // Interceptors passed to the call override interceptors passed to the client constructor\n    if (interceptorArgs.callInterceptors.length > 0 || interceptorArgs.callInterceptorProviders.length > 0) {\n        interceptors = [].concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map((provider)=>provider(methodDefinition))).filter((interceptor)=>interceptor);\n    // Filter out falsy values when providers return nothing\n    } else {\n        interceptors = [].concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map((provider)=>provider(methodDefinition))).filter((interceptor)=>interceptor);\n    // Filter out falsy values when providers return nothing\n    }\n    const interceptorOptions = Object.assign({}, options, {\n        method_definition: methodDefinition\n    });\n    /* For each interceptor in the list, the nextCall function passed to it is\n     * based on the next interceptor in the list, using a nextCall function\n     * constructed with the following interceptor in the list, and so on. The\n     * initialValue, which is effectively at the end of the list, is a nextCall\n     * function that invokes getBottomInterceptingCall, the result of which\n     * handles (de)serialization and also gets the underlying call from the\n     * channel. */ const getCall = interceptors.reduceRight((nextCall, nextInterceptor)=>{\n        return (currentOptions)=>nextInterceptor(currentOptions, nextCall);\n    }, (finalOptions)=>getBottomInterceptingCall(channel, finalOptions, methodDefinition));\n    return getCall(interceptorOptions);\n}\nexports.getInterceptingCall = getInterceptingCall; //# sourceMappingURL=client-interceptors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/client.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/client.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Client = void 0;\nconst call_1 = __webpack_require__(/*! ./call */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call.js\");\nconst channel_1 = __webpack_require__(/*! ./channel */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst client_interceptors_1 = __webpack_require__(/*! ./client-interceptors */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\");\nconst CHANNEL_SYMBOL = Symbol();\nconst INTERCEPTOR_SYMBOL = Symbol();\nconst INTERCEPTOR_PROVIDER_SYMBOL = Symbol();\nconst CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();\nfunction isFunction(arg) {\n    return typeof arg === \"function\";\n}\nfunction getErrorStackString(error) {\n    return error.stack.split(\"\\n\").slice(1).join(\"\\n\");\n}\n/**\n * A generic gRPC client. Primarily useful as a base class for all generated\n * clients.\n */ class Client {\n    constructor(address, credentials, options = {}){\n        var _a, _b;\n        options = Object.assign({}, options);\n        this[INTERCEPTOR_SYMBOL] = (_a = options.interceptors) !== null && _a !== void 0 ? _a : [];\n        delete options.interceptors;\n        this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options.interceptor_providers) !== null && _b !== void 0 ? _b : [];\n        delete options.interceptor_providers;\n        if (this[INTERCEPTOR_SYMBOL].length > 0 && this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {\n            throw new Error(\"Both interceptors and interceptor_providers were passed as options \" + \"to the client constructor. Only one of these is allowed.\");\n        }\n        this[CALL_INVOCATION_TRANSFORMER_SYMBOL] = options.callInvocationTransformer;\n        delete options.callInvocationTransformer;\n        if (options.channelOverride) {\n            this[CHANNEL_SYMBOL] = options.channelOverride;\n        } else if (options.channelFactoryOverride) {\n            const channelFactoryOverride = options.channelFactoryOverride;\n            delete options.channelFactoryOverride;\n            this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options);\n        } else {\n            this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options);\n        }\n    }\n    close() {\n        this[CHANNEL_SYMBOL].close();\n    }\n    getChannel() {\n        return this[CHANNEL_SYMBOL];\n    }\n    waitForReady(deadline, callback) {\n        const checkState = (err)=>{\n            if (err) {\n                callback(new Error(\"Failed to connect before the deadline\"));\n                return;\n            }\n            let newState;\n            try {\n                newState = this[CHANNEL_SYMBOL].getConnectivityState(true);\n            } catch (e) {\n                callback(new Error(\"The channel has been closed\"));\n                return;\n            }\n            if (newState === connectivity_state_1.ConnectivityState.READY) {\n                callback();\n            } else {\n                try {\n                    this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);\n                } catch (e) {\n                    callback(new Error(\"The channel has been closed\"));\n                }\n            }\n        };\n        setImmediate(checkState);\n    }\n    checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {\n        if (isFunction(arg1)) {\n            return {\n                metadata: new metadata_1.Metadata(),\n                options: {},\n                callback: arg1\n            };\n        } else if (isFunction(arg2)) {\n            if (arg1 instanceof metadata_1.Metadata) {\n                return {\n                    metadata: arg1,\n                    options: {},\n                    callback: arg2\n                };\n            } else {\n                return {\n                    metadata: new metadata_1.Metadata(),\n                    options: arg1,\n                    callback: arg2\n                };\n            }\n        } else {\n            if (!(arg1 instanceof metadata_1.Metadata && arg2 instanceof Object && isFunction(arg3))) {\n                throw new Error(\"Incorrect arguments passed\");\n            }\n            return {\n                metadata: arg1,\n                options: arg2,\n                callback: arg3\n            };\n        }\n    }\n    makeUnaryRequest(method, serialize, deserialize, argument, metadata, options, callback) {\n        var _a, _b;\n        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n        const methodDefinition = {\n            path: method,\n            requestStream: false,\n            responseStream: false,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize\n        };\n        let callProperties = {\n            argument: argument,\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientUnaryCallImpl(),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options,\n            callback: checkedArguments.callback\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const emitter = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n        };\n        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */ emitter.call = call;\n        if (callProperties.callOptions.credentials) {\n            call.setCredentials(callProperties.callOptions.credentials);\n        }\n        let responseMessage = null;\n        let receivedStatus = false;\n        const callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata: (metadata)=>{\n                emitter.emit(\"metadata\", metadata);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage (message) {\n                if (responseMessage !== null) {\n                    call.cancelWithStatus(constants_1.Status.INTERNAL, \"Too many responses received\");\n                }\n                responseMessage = message;\n            },\n            onReceiveStatus (status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                if (status.code === constants_1.Status.OK) {\n                    if (responseMessage === null) {\n                        const callerStack = getErrorStackString(callerStackError);\n                        callProperties.callback(call_1.callErrorFromStatus({\n                            code: constants_1.Status.INTERNAL,\n                            details: \"No message received\",\n                            metadata: status.metadata\n                        }, callerStack));\n                    } else {\n                        callProperties.callback(null, responseMessage);\n                    }\n                } else {\n                    const callerStack = getErrorStackString(callerStackError);\n                    callProperties.callback(call_1.callErrorFromStatus(status, callerStack));\n                }\n                emitter.emit(\"status\", status);\n            }\n        });\n        call.sendMessage(argument);\n        call.halfClose();\n        return emitter;\n    }\n    makeClientStreamRequest(method, serialize, deserialize, metadata, options, callback) {\n        var _a, _b;\n        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n        const methodDefinition = {\n            path: method,\n            requestStream: true,\n            responseStream: false,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize\n        };\n        let callProperties = {\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientWritableStreamImpl(serialize),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options,\n            callback: checkedArguments.callback\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const emitter = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n        };\n        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */ emitter.call = call;\n        if (callProperties.callOptions.credentials) {\n            call.setCredentials(callProperties.callOptions.credentials);\n        }\n        let responseMessage = null;\n        let receivedStatus = false;\n        const callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata: (metadata)=>{\n                emitter.emit(\"metadata\", metadata);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage (message) {\n                if (responseMessage !== null) {\n                    call.cancelWithStatus(constants_1.Status.INTERNAL, \"Too many responses received\");\n                }\n                responseMessage = message;\n            },\n            onReceiveStatus (status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                if (status.code === constants_1.Status.OK) {\n                    if (responseMessage === null) {\n                        const callerStack = getErrorStackString(callerStackError);\n                        callProperties.callback(call_1.callErrorFromStatus({\n                            code: constants_1.Status.INTERNAL,\n                            details: \"No message received\",\n                            metadata: status.metadata\n                        }, callerStack));\n                    } else {\n                        callProperties.callback(null, responseMessage);\n                    }\n                } else {\n                    const callerStack = getErrorStackString(callerStackError);\n                    callProperties.callback(call_1.callErrorFromStatus(status, callerStack));\n                }\n                emitter.emit(\"status\", status);\n            }\n        });\n        return emitter;\n    }\n    checkMetadataAndOptions(arg1, arg2) {\n        let metadata;\n        let options;\n        if (arg1 instanceof metadata_1.Metadata) {\n            metadata = arg1;\n            if (arg2) {\n                options = arg2;\n            } else {\n                options = {};\n            }\n        } else {\n            if (arg1) {\n                options = arg1;\n            } else {\n                options = {};\n            }\n            metadata = new metadata_1.Metadata();\n        }\n        return {\n            metadata,\n            options\n        };\n    }\n    makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options) {\n        var _a, _b;\n        const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n        const methodDefinition = {\n            path: method,\n            requestStream: false,\n            responseStream: true,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize\n        };\n        let callProperties = {\n            argument: argument,\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientReadableStreamImpl(deserialize),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const stream = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n        };\n        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */ stream.call = call;\n        if (callProperties.callOptions.credentials) {\n            call.setCredentials(callProperties.callOptions.credentials);\n        }\n        let receivedStatus = false;\n        const callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata (metadata) {\n                stream.emit(\"metadata\", metadata);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage (message) {\n                stream.push(message);\n            },\n            onReceiveStatus (status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                stream.push(null);\n                if (status.code !== constants_1.Status.OK) {\n                    const callerStack = getErrorStackString(callerStackError);\n                    stream.emit(\"error\", call_1.callErrorFromStatus(status, callerStack));\n                }\n                stream.emit(\"status\", status);\n            }\n        });\n        call.sendMessage(argument);\n        call.halfClose();\n        return stream;\n    }\n    makeBidiStreamRequest(method, serialize, deserialize, metadata, options) {\n        var _a, _b;\n        const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n        const methodDefinition = {\n            path: method,\n            requestStream: true,\n            responseStream: true,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize\n        };\n        let callProperties = {\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const stream = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n        };\n        const call = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */ stream.call = call;\n        if (callProperties.callOptions.credentials) {\n            call.setCredentials(callProperties.callOptions.credentials);\n        }\n        let receivedStatus = false;\n        const callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata (metadata) {\n                stream.emit(\"metadata\", metadata);\n            },\n            onReceiveMessage (message) {\n                stream.push(message);\n            },\n            onReceiveStatus (status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                stream.push(null);\n                if (status.code !== constants_1.Status.OK) {\n                    const callerStack = getErrorStackString(callerStackError);\n                    stream.emit(\"error\", call_1.callErrorFromStatus(status, callerStack));\n                }\n                stream.emit(\"status\", status);\n            }\n        });\n        return stream;\n    }\n}\nexports.Client = Client; //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0QixNQUFNRyxTQUFTQyxtQkFBT0EsQ0FBQyxvRUFBUTtBQUMvQixNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQywwRUFBVztBQUNyQyxNQUFNRSx1QkFBdUJGLG1CQUFPQSxDQUFDLGdHQUFzQjtBQUMzRCxNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQyw4RUFBYTtBQUN6QyxNQUFNSSxhQUFhSixtQkFBT0EsQ0FBQyw0RUFBWTtBQUN2QyxNQUFNSyx3QkFBd0JMLG1CQUFPQSxDQUFDLGtHQUF1QjtBQUM3RCxNQUFNTSxpQkFBaUJDO0FBQ3ZCLE1BQU1DLHFCQUFxQkQ7QUFDM0IsTUFBTUUsOEJBQThCRjtBQUNwQyxNQUFNRyxxQ0FBcUNIO0FBQzNDLFNBQVNJLFdBQVdDLEdBQUc7SUFDbkIsT0FBTyxPQUFPQSxRQUFRO0FBQzFCO0FBQ0EsU0FBU0Msb0JBQW9CQyxLQUFLO0lBQzlCLE9BQU9BLE1BQU1DLEtBQUssQ0FBQ0MsS0FBSyxDQUFDLE1BQU1DLEtBQUssQ0FBQyxHQUFHQyxJQUFJLENBQUM7QUFDakQ7QUFDQTs7O0NBR0MsR0FDRCxNQUFNcEI7SUFDRnFCLFlBQVlDLE9BQU8sRUFBRUMsV0FBVyxFQUFFQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQzVDLElBQUlDLElBQUlDO1FBQ1JGLFVBQVU1QixPQUFPK0IsTUFBTSxDQUFDLENBQUMsR0FBR0g7UUFDNUIsSUFBSSxDQUFDZCxtQkFBbUIsR0FBRyxDQUFDZSxLQUFLRCxRQUFRSSxZQUFZLE1BQU0sUUFBUUgsT0FBTyxLQUFLLElBQUlBLEtBQUssRUFBRTtRQUMxRixPQUFPRCxRQUFRSSxZQUFZO1FBQzNCLElBQUksQ0FBQ2pCLDRCQUE0QixHQUFHLENBQUNlLEtBQUtGLFFBQVFLLHFCQUFxQixNQUFNLFFBQVFILE9BQU8sS0FBSyxJQUFJQSxLQUFLLEVBQUU7UUFDNUcsT0FBT0YsUUFBUUsscUJBQXFCO1FBQ3BDLElBQUksSUFBSSxDQUFDbkIsbUJBQW1CLENBQUNvQixNQUFNLEdBQUcsS0FDbEMsSUFBSSxDQUFDbkIsNEJBQTRCLENBQUNtQixNQUFNLEdBQUcsR0FBRztZQUM5QyxNQUFNLElBQUlDLE1BQU0sd0VBQ1o7UUFDUjtRQUNBLElBQUksQ0FBQ25CLG1DQUFtQyxHQUNwQ1ksUUFBUVEseUJBQXlCO1FBQ3JDLE9BQU9SLFFBQVFRLHlCQUF5QjtRQUN4QyxJQUFJUixRQUFRUyxlQUFlLEVBQUU7WUFDekIsSUFBSSxDQUFDekIsZUFBZSxHQUFHZ0IsUUFBUVMsZUFBZTtRQUNsRCxPQUNLLElBQUlULFFBQVFVLHNCQUFzQixFQUFFO1lBQ3JDLE1BQU1BLHlCQUF5QlYsUUFBUVUsc0JBQXNCO1lBQzdELE9BQU9WLFFBQVFVLHNCQUFzQjtZQUNyQyxJQUFJLENBQUMxQixlQUFlLEdBQUcwQix1QkFBdUJaLFNBQVNDLGFBQWFDO1FBQ3hFLE9BQ0s7WUFDRCxJQUFJLENBQUNoQixlQUFlLEdBQUcsSUFBSUwsVUFBVWdDLHFCQUFxQixDQUFDYixTQUFTQyxhQUFhQztRQUNyRjtJQUNKO0lBQ0FZLFFBQVE7UUFDSixJQUFJLENBQUM1QixlQUFlLENBQUM0QixLQUFLO0lBQzlCO0lBQ0FDLGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQzdCLGVBQWU7SUFDL0I7SUFDQThCLGFBQWFDLFFBQVEsRUFBRUMsUUFBUSxFQUFFO1FBQzdCLE1BQU1DLGFBQWEsQ0FBQ0M7WUFDaEIsSUFBSUEsS0FBSztnQkFDTEYsU0FBUyxJQUFJVCxNQUFNO2dCQUNuQjtZQUNKO1lBQ0EsSUFBSVk7WUFDSixJQUFJO2dCQUNBQSxXQUFXLElBQUksQ0FBQ25DLGVBQWUsQ0FBQ29DLG9CQUFvQixDQUFDO1lBQ3pELEVBQ0EsT0FBT0MsR0FBRztnQkFDTkwsU0FBUyxJQUFJVCxNQUFNO2dCQUNuQjtZQUNKO1lBQ0EsSUFBSVksYUFBYXZDLHFCQUFxQjBDLGlCQUFpQixDQUFDQyxLQUFLLEVBQUU7Z0JBQzNEUDtZQUNKLE9BQ0s7Z0JBQ0QsSUFBSTtvQkFDQSxJQUFJLENBQUNoQyxlQUFlLENBQUN3QyxzQkFBc0IsQ0FBQ0wsVUFBVUosVUFBVUU7Z0JBQ3BFLEVBQ0EsT0FBT0ksR0FBRztvQkFDTkwsU0FBUyxJQUFJVCxNQUFNO2dCQUN2QjtZQUNKO1FBQ0o7UUFDQWtCLGFBQWFSO0lBQ2pCO0lBQ0FTLG9DQUFvQ0MsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRTtRQUNsRCxJQUFJeEMsV0FBV3NDLE9BQU87WUFDbEIsT0FBTztnQkFBRUcsVUFBVSxJQUFJaEQsV0FBV2lELFFBQVE7Z0JBQUkvQixTQUFTLENBQUM7Z0JBQUdnQixVQUFVVztZQUFLO1FBQzlFLE9BQ0ssSUFBSXRDLFdBQVd1QyxPQUFPO1lBQ3ZCLElBQUlELGdCQUFnQjdDLFdBQVdpRCxRQUFRLEVBQUU7Z0JBQ3JDLE9BQU87b0JBQUVELFVBQVVIO29CQUFNM0IsU0FBUyxDQUFDO29CQUFHZ0IsVUFBVVk7Z0JBQUs7WUFDekQsT0FDSztnQkFDRCxPQUFPO29CQUFFRSxVQUFVLElBQUloRCxXQUFXaUQsUUFBUTtvQkFBSS9CLFNBQVMyQjtvQkFBTVgsVUFBVVk7Z0JBQUs7WUFDaEY7UUFDSixPQUNLO1lBQ0QsSUFBSSxDQUFFRCxDQUFBQSxnQkFBZ0I3QyxXQUFXaUQsUUFBUSxJQUNyQ0gsZ0JBQWdCeEQsVUFDaEJpQixXQUFXd0MsS0FBSSxHQUFJO2dCQUNuQixNQUFNLElBQUl0QixNQUFNO1lBQ3BCO1lBQ0EsT0FBTztnQkFBRXVCLFVBQVVIO2dCQUFNM0IsU0FBUzRCO2dCQUFNWixVQUFVYTtZQUFLO1FBQzNEO0lBQ0o7SUFDQUcsaUJBQWlCQyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxRQUFRLEVBQUVOLFFBQVEsRUFBRTlCLE9BQU8sRUFBRWdCLFFBQVEsRUFBRTtRQUNwRixJQUFJZixJQUFJQztRQUNSLE1BQU1tQyxtQkFBbUIsSUFBSSxDQUFDWCxtQ0FBbUMsQ0FBQ0ksVUFBVTlCLFNBQVNnQjtRQUNyRixNQUFNc0IsbUJBQW1CO1lBQ3JCQyxNQUFNTjtZQUNOTyxlQUFlO1lBQ2ZDLGdCQUFnQjtZQUNoQkMsa0JBQWtCUjtZQUNsQlMscUJBQXFCUjtRQUN6QjtRQUNBLElBQUlTLGlCQUFpQjtZQUNqQlIsVUFBVUE7WUFDVk4sVUFBVU8saUJBQWlCUCxRQUFRO1lBQ25DZSxNQUFNLElBQUlwRSxPQUFPcUUsbUJBQW1CO1lBQ3BDQyxTQUFTLElBQUksQ0FBQy9ELGVBQWU7WUFDN0JzRCxrQkFBa0JBO1lBQ2xCVSxhQUFhWCxpQkFBaUJyQyxPQUFPO1lBQ3JDZ0IsVUFBVXFCLGlCQUFpQnJCLFFBQVE7UUFDdkM7UUFDQSxJQUFJLElBQUksQ0FBQzVCLG1DQUFtQyxFQUFFO1lBQzFDd0QsaUJBQWlCLElBQUksQ0FBQ3hELG1DQUFtQyxDQUFDd0Q7UUFDOUQ7UUFDQSxNQUFNSyxVQUFVTCxlQUFlQyxJQUFJO1FBQ25DLE1BQU1LLGtCQUFrQjtZQUNwQkMsb0JBQW9CLElBQUksQ0FBQ2pFLG1CQUFtQjtZQUM1Q2tFLDRCQUE0QixJQUFJLENBQUNqRSw0QkFBNEI7WUFDN0RrRSxrQkFBa0IsQ0FBQ3BELEtBQUsyQyxlQUFlSSxXQUFXLENBQUM1QyxZQUFZLE1BQU0sUUFBUUgsT0FBTyxLQUFLLElBQUlBLEtBQUssRUFBRTtZQUNwR3FELDBCQUEwQixDQUFDcEQsS0FBSzBDLGVBQWVJLFdBQVcsQ0FBQzNDLHFCQUFxQixNQUFNLFFBQVFILE9BQU8sS0FBSyxJQUFJQSxLQUFLLEVBQUU7UUFDekg7UUFDQSxNQUFNMkMsT0FBTzlELHNCQUFzQndFLG1CQUFtQixDQUFDTCxpQkFBaUJOLGVBQWVOLGdCQUFnQixFQUFFTSxlQUFlSSxXQUFXLEVBQUVKLGVBQWVHLE9BQU87UUFDM0o7Ozs0QkFHb0IsR0FDcEJFLFFBQVFKLElBQUksR0FBR0E7UUFDZixJQUFJRCxlQUFlSSxXQUFXLENBQUNqRCxXQUFXLEVBQUU7WUFDeEM4QyxLQUFLVyxjQUFjLENBQUNaLGVBQWVJLFdBQVcsQ0FBQ2pELFdBQVc7UUFDOUQ7UUFDQSxJQUFJMEQsa0JBQWtCO1FBQ3RCLElBQUlDLGlCQUFpQjtRQUNyQixNQUFNQyxtQkFBbUIsSUFBSXBEO1FBQzdCc0MsS0FBS2UsS0FBSyxDQUFDaEIsZUFBZWQsUUFBUSxFQUFFO1lBQ2hDK0IsbUJBQW1CLENBQUMvQjtnQkFDaEJtQixRQUFRYSxJQUFJLENBQUMsWUFBWWhDO1lBQzdCO1lBQ0EsOERBQThEO1lBQzlEaUMsa0JBQWlCQyxPQUFPO2dCQUNwQixJQUFJUCxvQkFBb0IsTUFBTTtvQkFDMUJaLEtBQUtvQixnQkFBZ0IsQ0FBQ3BGLFlBQVlxRixNQUFNLENBQUNDLFFBQVEsRUFBRTtnQkFDdkQ7Z0JBQ0FWLGtCQUFrQk87WUFDdEI7WUFDQUksaUJBQWdCQyxNQUFNO2dCQUNsQixJQUFJWCxnQkFBZ0I7b0JBQ2hCO2dCQUNKO2dCQUNBQSxpQkFBaUI7Z0JBQ2pCLElBQUlXLE9BQU9DLElBQUksS0FBS3pGLFlBQVlxRixNQUFNLENBQUNLLEVBQUUsRUFBRTtvQkFDdkMsSUFBSWQsb0JBQW9CLE1BQU07d0JBQzFCLE1BQU1lLGNBQWNqRixvQkFBb0JvRTt3QkFDeENmLGVBQWU1QixRQUFRLENBQUN2QyxPQUFPZ0csbUJBQW1CLENBQUM7NEJBQy9DSCxNQUFNekYsWUFBWXFGLE1BQU0sQ0FBQ0MsUUFBUTs0QkFDakNPLFNBQVM7NEJBQ1Q1QyxVQUFVdUMsT0FBT3ZDLFFBQVE7d0JBQzdCLEdBQUcwQztvQkFDUCxPQUNLO3dCQUNENUIsZUFBZTVCLFFBQVEsQ0FBQyxNQUFNeUM7b0JBQ2xDO2dCQUNKLE9BQ0s7b0JBQ0QsTUFBTWUsY0FBY2pGLG9CQUFvQm9FO29CQUN4Q2YsZUFBZTVCLFFBQVEsQ0FBQ3ZDLE9BQU9nRyxtQkFBbUIsQ0FBQ0osUUFBUUc7Z0JBQy9EO2dCQUNBdkIsUUFBUWEsSUFBSSxDQUFDLFVBQVVPO1lBQzNCO1FBQ0o7UUFDQXhCLEtBQUs4QixXQUFXLENBQUN2QztRQUNqQlMsS0FBSytCLFNBQVM7UUFDZCxPQUFPM0I7SUFDWDtJQUNBNEIsd0JBQXdCNUMsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFdBQVcsRUFBRUwsUUFBUSxFQUFFOUIsT0FBTyxFQUFFZ0IsUUFBUSxFQUFFO1FBQ2pGLElBQUlmLElBQUlDO1FBQ1IsTUFBTW1DLG1CQUFtQixJQUFJLENBQUNYLG1DQUFtQyxDQUFDSSxVQUFVOUIsU0FBU2dCO1FBQ3JGLE1BQU1zQixtQkFBbUI7WUFDckJDLE1BQU1OO1lBQ05PLGVBQWU7WUFDZkMsZ0JBQWdCO1lBQ2hCQyxrQkFBa0JSO1lBQ2xCUyxxQkFBcUJSO1FBQ3pCO1FBQ0EsSUFBSVMsaUJBQWlCO1lBQ2pCZCxVQUFVTyxpQkFBaUJQLFFBQVE7WUFDbkNlLE1BQU0sSUFBSXBFLE9BQU9xRyx3QkFBd0IsQ0FBQzVDO1lBQzFDYSxTQUFTLElBQUksQ0FBQy9ELGVBQWU7WUFDN0JzRCxrQkFBa0JBO1lBQ2xCVSxhQUFhWCxpQkFBaUJyQyxPQUFPO1lBQ3JDZ0IsVUFBVXFCLGlCQUFpQnJCLFFBQVE7UUFDdkM7UUFDQSxJQUFJLElBQUksQ0FBQzVCLG1DQUFtQyxFQUFFO1lBQzFDd0QsaUJBQWlCLElBQUksQ0FBQ3hELG1DQUFtQyxDQUFDd0Q7UUFDOUQ7UUFDQSxNQUFNSyxVQUFVTCxlQUFlQyxJQUFJO1FBQ25DLE1BQU1LLGtCQUFrQjtZQUNwQkMsb0JBQW9CLElBQUksQ0FBQ2pFLG1CQUFtQjtZQUM1Q2tFLDRCQUE0QixJQUFJLENBQUNqRSw0QkFBNEI7WUFDN0RrRSxrQkFBa0IsQ0FBQ3BELEtBQUsyQyxlQUFlSSxXQUFXLENBQUM1QyxZQUFZLE1BQU0sUUFBUUgsT0FBTyxLQUFLLElBQUlBLEtBQUssRUFBRTtZQUNwR3FELDBCQUEwQixDQUFDcEQsS0FBSzBDLGVBQWVJLFdBQVcsQ0FBQzNDLHFCQUFxQixNQUFNLFFBQVFILE9BQU8sS0FBSyxJQUFJQSxLQUFLLEVBQUU7UUFDekg7UUFDQSxNQUFNMkMsT0FBTzlELHNCQUFzQndFLG1CQUFtQixDQUFDTCxpQkFBaUJOLGVBQWVOLGdCQUFnQixFQUFFTSxlQUFlSSxXQUFXLEVBQUVKLGVBQWVHLE9BQU87UUFDM0o7Ozs0QkFHb0IsR0FDcEJFLFFBQVFKLElBQUksR0FBR0E7UUFDZixJQUFJRCxlQUFlSSxXQUFXLENBQUNqRCxXQUFXLEVBQUU7WUFDeEM4QyxLQUFLVyxjQUFjLENBQUNaLGVBQWVJLFdBQVcsQ0FBQ2pELFdBQVc7UUFDOUQ7UUFDQSxJQUFJMEQsa0JBQWtCO1FBQ3RCLElBQUlDLGlCQUFpQjtRQUNyQixNQUFNQyxtQkFBbUIsSUFBSXBEO1FBQzdCc0MsS0FBS2UsS0FBSyxDQUFDaEIsZUFBZWQsUUFBUSxFQUFFO1lBQ2hDK0IsbUJBQW1CLENBQUMvQjtnQkFDaEJtQixRQUFRYSxJQUFJLENBQUMsWUFBWWhDO1lBQzdCO1lBQ0EsOERBQThEO1lBQzlEaUMsa0JBQWlCQyxPQUFPO2dCQUNwQixJQUFJUCxvQkFBb0IsTUFBTTtvQkFDMUJaLEtBQUtvQixnQkFBZ0IsQ0FBQ3BGLFlBQVlxRixNQUFNLENBQUNDLFFBQVEsRUFBRTtnQkFDdkQ7Z0JBQ0FWLGtCQUFrQk87WUFDdEI7WUFDQUksaUJBQWdCQyxNQUFNO2dCQUNsQixJQUFJWCxnQkFBZ0I7b0JBQ2hCO2dCQUNKO2dCQUNBQSxpQkFBaUI7Z0JBQ2pCLElBQUlXLE9BQU9DLElBQUksS0FBS3pGLFlBQVlxRixNQUFNLENBQUNLLEVBQUUsRUFBRTtvQkFDdkMsSUFBSWQsb0JBQW9CLE1BQU07d0JBQzFCLE1BQU1lLGNBQWNqRixvQkFBb0JvRTt3QkFDeENmLGVBQWU1QixRQUFRLENBQUN2QyxPQUFPZ0csbUJBQW1CLENBQUM7NEJBQy9DSCxNQUFNekYsWUFBWXFGLE1BQU0sQ0FBQ0MsUUFBUTs0QkFDakNPLFNBQVM7NEJBQ1Q1QyxVQUFVdUMsT0FBT3ZDLFFBQVE7d0JBQzdCLEdBQUcwQztvQkFDUCxPQUNLO3dCQUNENUIsZUFBZTVCLFFBQVEsQ0FBQyxNQUFNeUM7b0JBQ2xDO2dCQUNKLE9BQ0s7b0JBQ0QsTUFBTWUsY0FBY2pGLG9CQUFvQm9FO29CQUN4Q2YsZUFBZTVCLFFBQVEsQ0FBQ3ZDLE9BQU9nRyxtQkFBbUIsQ0FBQ0osUUFBUUc7Z0JBQy9EO2dCQUNBdkIsUUFBUWEsSUFBSSxDQUFDLFVBQVVPO1lBQzNCO1FBQ0o7UUFDQSxPQUFPcEI7SUFDWDtJQUNBOEIsd0JBQXdCcEQsSUFBSSxFQUFFQyxJQUFJLEVBQUU7UUFDaEMsSUFBSUU7UUFDSixJQUFJOUI7UUFDSixJQUFJMkIsZ0JBQWdCN0MsV0FBV2lELFFBQVEsRUFBRTtZQUNyQ0QsV0FBV0g7WUFDWCxJQUFJQyxNQUFNO2dCQUNONUIsVUFBVTRCO1lBQ2QsT0FDSztnQkFDRDVCLFVBQVUsQ0FBQztZQUNmO1FBQ0osT0FDSztZQUNELElBQUkyQixNQUFNO2dCQUNOM0IsVUFBVTJCO1lBQ2QsT0FDSztnQkFDRDNCLFVBQVUsQ0FBQztZQUNmO1lBQ0E4QixXQUFXLElBQUloRCxXQUFXaUQsUUFBUTtRQUN0QztRQUNBLE9BQU87WUFBRUQ7WUFBVTlCO1FBQVE7SUFDL0I7SUFDQWdGLHdCQUF3Qi9DLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLFFBQVEsRUFBRU4sUUFBUSxFQUFFOUIsT0FBTyxFQUFFO1FBQ2pGLElBQUlDLElBQUlDO1FBQ1IsTUFBTW1DLG1CQUFtQixJQUFJLENBQUMwQyx1QkFBdUIsQ0FBQ2pELFVBQVU5QjtRQUNoRSxNQUFNc0MsbUJBQW1CO1lBQ3JCQyxNQUFNTjtZQUNOTyxlQUFlO1lBQ2ZDLGdCQUFnQjtZQUNoQkMsa0JBQWtCUjtZQUNsQlMscUJBQXFCUjtRQUN6QjtRQUNBLElBQUlTLGlCQUFpQjtZQUNqQlIsVUFBVUE7WUFDVk4sVUFBVU8saUJBQWlCUCxRQUFRO1lBQ25DZSxNQUFNLElBQUlwRSxPQUFPd0csd0JBQXdCLENBQUM5QztZQUMxQ1ksU0FBUyxJQUFJLENBQUMvRCxlQUFlO1lBQzdCc0Qsa0JBQWtCQTtZQUNsQlUsYUFBYVgsaUJBQWlCckMsT0FBTztRQUN6QztRQUNBLElBQUksSUFBSSxDQUFDWixtQ0FBbUMsRUFBRTtZQUMxQ3dELGlCQUFpQixJQUFJLENBQUN4RCxtQ0FBbUMsQ0FBQ3dEO1FBQzlEO1FBQ0EsTUFBTXNDLFNBQVN0QyxlQUFlQyxJQUFJO1FBQ2xDLE1BQU1LLGtCQUFrQjtZQUNwQkMsb0JBQW9CLElBQUksQ0FBQ2pFLG1CQUFtQjtZQUM1Q2tFLDRCQUE0QixJQUFJLENBQUNqRSw0QkFBNEI7WUFDN0RrRSxrQkFBa0IsQ0FBQ3BELEtBQUsyQyxlQUFlSSxXQUFXLENBQUM1QyxZQUFZLE1BQU0sUUFBUUgsT0FBTyxLQUFLLElBQUlBLEtBQUssRUFBRTtZQUNwR3FELDBCQUEwQixDQUFDcEQsS0FBSzBDLGVBQWVJLFdBQVcsQ0FBQzNDLHFCQUFxQixNQUFNLFFBQVFILE9BQU8sS0FBSyxJQUFJQSxLQUFLLEVBQUU7UUFDekg7UUFDQSxNQUFNMkMsT0FBTzlELHNCQUFzQndFLG1CQUFtQixDQUFDTCxpQkFBaUJOLGVBQWVOLGdCQUFnQixFQUFFTSxlQUFlSSxXQUFXLEVBQUVKLGVBQWVHLE9BQU87UUFDM0o7Ozs0QkFHb0IsR0FDcEJtQyxPQUFPckMsSUFBSSxHQUFHQTtRQUNkLElBQUlELGVBQWVJLFdBQVcsQ0FBQ2pELFdBQVcsRUFBRTtZQUN4QzhDLEtBQUtXLGNBQWMsQ0FBQ1osZUFBZUksV0FBVyxDQUFDakQsV0FBVztRQUM5RDtRQUNBLElBQUkyRCxpQkFBaUI7UUFDckIsTUFBTUMsbUJBQW1CLElBQUlwRDtRQUM3QnNDLEtBQUtlLEtBQUssQ0FBQ2hCLGVBQWVkLFFBQVEsRUFBRTtZQUNoQytCLG1CQUFrQi9CLFFBQVE7Z0JBQ3RCb0QsT0FBT3BCLElBQUksQ0FBQyxZQUFZaEM7WUFDNUI7WUFDQSw4REFBOEQ7WUFDOURpQyxrQkFBaUJDLE9BQU87Z0JBQ3BCa0IsT0FBT0MsSUFBSSxDQUFDbkI7WUFDaEI7WUFDQUksaUJBQWdCQyxNQUFNO2dCQUNsQixJQUFJWCxnQkFBZ0I7b0JBQ2hCO2dCQUNKO2dCQUNBQSxpQkFBaUI7Z0JBQ2pCd0IsT0FBT0MsSUFBSSxDQUFDO2dCQUNaLElBQUlkLE9BQU9DLElBQUksS0FBS3pGLFlBQVlxRixNQUFNLENBQUNLLEVBQUUsRUFBRTtvQkFDdkMsTUFBTUMsY0FBY2pGLG9CQUFvQm9FO29CQUN4Q3VCLE9BQU9wQixJQUFJLENBQUMsU0FBU3JGLE9BQU9nRyxtQkFBbUIsQ0FBQ0osUUFBUUc7Z0JBQzVEO2dCQUNBVSxPQUFPcEIsSUFBSSxDQUFDLFVBQVVPO1lBQzFCO1FBQ0o7UUFDQXhCLEtBQUs4QixXQUFXLENBQUN2QztRQUNqQlMsS0FBSytCLFNBQVM7UUFDZCxPQUFPTTtJQUNYO0lBQ0FFLHNCQUFzQm5ELE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxXQUFXLEVBQUVMLFFBQVEsRUFBRTlCLE9BQU8sRUFBRTtRQUNyRSxJQUFJQyxJQUFJQztRQUNSLE1BQU1tQyxtQkFBbUIsSUFBSSxDQUFDMEMsdUJBQXVCLENBQUNqRCxVQUFVOUI7UUFDaEUsTUFBTXNDLG1CQUFtQjtZQUNyQkMsTUFBTU47WUFDTk8sZUFBZTtZQUNmQyxnQkFBZ0I7WUFDaEJDLGtCQUFrQlI7WUFDbEJTLHFCQUFxQlI7UUFDekI7UUFDQSxJQUFJUyxpQkFBaUI7WUFDakJkLFVBQVVPLGlCQUFpQlAsUUFBUTtZQUNuQ2UsTUFBTSxJQUFJcEUsT0FBTzRHLHNCQUFzQixDQUFDbkQsV0FBV0M7WUFDbkRZLFNBQVMsSUFBSSxDQUFDL0QsZUFBZTtZQUM3QnNELGtCQUFrQkE7WUFDbEJVLGFBQWFYLGlCQUFpQnJDLE9BQU87UUFDekM7UUFDQSxJQUFJLElBQUksQ0FBQ1osbUNBQW1DLEVBQUU7WUFDMUN3RCxpQkFBaUIsSUFBSSxDQUFDeEQsbUNBQW1DLENBQUN3RDtRQUM5RDtRQUNBLE1BQU1zQyxTQUFTdEMsZUFBZUMsSUFBSTtRQUNsQyxNQUFNSyxrQkFBa0I7WUFDcEJDLG9CQUFvQixJQUFJLENBQUNqRSxtQkFBbUI7WUFDNUNrRSw0QkFBNEIsSUFBSSxDQUFDakUsNEJBQTRCO1lBQzdEa0Usa0JBQWtCLENBQUNwRCxLQUFLMkMsZUFBZUksV0FBVyxDQUFDNUMsWUFBWSxNQUFNLFFBQVFILE9BQU8sS0FBSyxJQUFJQSxLQUFLLEVBQUU7WUFDcEdxRCwwQkFBMEIsQ0FBQ3BELEtBQUswQyxlQUFlSSxXQUFXLENBQUMzQyxxQkFBcUIsTUFBTSxRQUFRSCxPQUFPLEtBQUssSUFBSUEsS0FBSyxFQUFFO1FBQ3pIO1FBQ0EsTUFBTTJDLE9BQU85RCxzQkFBc0J3RSxtQkFBbUIsQ0FBQ0wsaUJBQWlCTixlQUFlTixnQkFBZ0IsRUFBRU0sZUFBZUksV0FBVyxFQUFFSixlQUFlRyxPQUFPO1FBQzNKOzs7NEJBR29CLEdBQ3BCbUMsT0FBT3JDLElBQUksR0FBR0E7UUFDZCxJQUFJRCxlQUFlSSxXQUFXLENBQUNqRCxXQUFXLEVBQUU7WUFDeEM4QyxLQUFLVyxjQUFjLENBQUNaLGVBQWVJLFdBQVcsQ0FBQ2pELFdBQVc7UUFDOUQ7UUFDQSxJQUFJMkQsaUJBQWlCO1FBQ3JCLE1BQU1DLG1CQUFtQixJQUFJcEQ7UUFDN0JzQyxLQUFLZSxLQUFLLENBQUNoQixlQUFlZCxRQUFRLEVBQUU7WUFDaEMrQixtQkFBa0IvQixRQUFRO2dCQUN0Qm9ELE9BQU9wQixJQUFJLENBQUMsWUFBWWhDO1lBQzVCO1lBQ0FpQyxrQkFBaUJDLE9BQU87Z0JBQ3BCa0IsT0FBT0MsSUFBSSxDQUFDbkI7WUFDaEI7WUFDQUksaUJBQWdCQyxNQUFNO2dCQUNsQixJQUFJWCxnQkFBZ0I7b0JBQ2hCO2dCQUNKO2dCQUNBQSxpQkFBaUI7Z0JBQ2pCd0IsT0FBT0MsSUFBSSxDQUFDO2dCQUNaLElBQUlkLE9BQU9DLElBQUksS0FBS3pGLFlBQVlxRixNQUFNLENBQUNLLEVBQUUsRUFBRTtvQkFDdkMsTUFBTUMsY0FBY2pGLG9CQUFvQm9FO29CQUN4Q3VCLE9BQU9wQixJQUFJLENBQUMsU0FBU3JGLE9BQU9nRyxtQkFBbUIsQ0FBQ0osUUFBUUc7Z0JBQzVEO2dCQUNBVSxPQUFPcEIsSUFBSSxDQUFDLFVBQVVPO1lBQzFCO1FBQ0o7UUFDQSxPQUFPYTtJQUNYO0FBQ0o7QUFDQTVHLGNBQWMsR0FBR0UsUUFDakIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZjLW5leHRqcy1zaGFkY24vLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2xpZW50LmpzPzgyNjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2xpZW50ID0gdm9pZCAwO1xuY29uc3QgY2FsbF8xID0gcmVxdWlyZShcIi4vY2FsbFwiKTtcbmNvbnN0IGNoYW5uZWxfMSA9IHJlcXVpcmUoXCIuL2NoYW5uZWxcIik7XG5jb25zdCBjb25uZWN0aXZpdHlfc3RhdGVfMSA9IHJlcXVpcmUoXCIuL2Nvbm5lY3Rpdml0eS1zdGF0ZVwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgbWV0YWRhdGFfMSA9IHJlcXVpcmUoXCIuL21ldGFkYXRhXCIpO1xuY29uc3QgY2xpZW50X2ludGVyY2VwdG9yc18xID0gcmVxdWlyZShcIi4vY2xpZW50LWludGVyY2VwdG9yc1wiKTtcbmNvbnN0IENIQU5ORUxfU1lNQk9MID0gU3ltYm9sKCk7XG5jb25zdCBJTlRFUkNFUFRPUl9TWU1CT0wgPSBTeW1ib2woKTtcbmNvbnN0IElOVEVSQ0VQVE9SX1BST1ZJREVSX1NZTUJPTCA9IFN5bWJvbCgpO1xuY29uc3QgQ0FMTF9JTlZPQ0FUSU9OX1RSQU5TRk9STUVSX1NZTUJPTCA9IFN5bWJvbCgpO1xuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGdldEVycm9yU3RhY2tTdHJpbmcoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3Iuc3RhY2suc3BsaXQoJ1xcbicpLnNsaWNlKDEpLmpvaW4oJ1xcbicpO1xufVxuLyoqXG4gKiBBIGdlbmVyaWMgZ1JQQyBjbGllbnQuIFByaW1hcmlseSB1c2VmdWwgYXMgYSBiYXNlIGNsYXNzIGZvciBhbGwgZ2VuZXJhdGVkXG4gKiBjbGllbnRzLlxuICovXG5jbGFzcyBDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKGFkZHJlc3MsIGNyZWRlbnRpYWxzLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzW0lOVEVSQ0VQVE9SX1NZTUJPTF0gPSAoX2EgPSBvcHRpb25zLmludGVyY2VwdG9ycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmludGVyY2VwdG9ycztcbiAgICAgICAgdGhpc1tJTlRFUkNFUFRPUl9QUk9WSURFUl9TWU1CT0xdID0gKF9iID0gb3B0aW9ucy5pbnRlcmNlcHRvcl9wcm92aWRlcnMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5pbnRlcmNlcHRvcl9wcm92aWRlcnM7XG4gICAgICAgIGlmICh0aGlzW0lOVEVSQ0VQVE9SX1NZTUJPTF0ubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgdGhpc1tJTlRFUkNFUFRPUl9QUk9WSURFUl9TWU1CT0xdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQm90aCBpbnRlcmNlcHRvcnMgYW5kIGludGVyY2VwdG9yX3Byb3ZpZGVycyB3ZXJlIHBhc3NlZCBhcyBvcHRpb25zICcgK1xuICAgICAgICAgICAgICAgICd0byB0aGUgY2xpZW50IGNvbnN0cnVjdG9yLiBPbmx5IG9uZSBvZiB0aGVzZSBpcyBhbGxvd2VkLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbQ0FMTF9JTlZPQ0FUSU9OX1RSQU5TRk9STUVSX1NZTUJPTF0gPVxuICAgICAgICAgICAgb3B0aW9ucy5jYWxsSW52b2NhdGlvblRyYW5zZm9ybWVyO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5jYWxsSW52b2NhdGlvblRyYW5zZm9ybWVyO1xuICAgICAgICBpZiAob3B0aW9ucy5jaGFubmVsT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIHRoaXNbQ0hBTk5FTF9TWU1CT0xdID0gb3B0aW9ucy5jaGFubmVsT3ZlcnJpZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5jaGFubmVsRmFjdG9yeU92ZXJyaWRlKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFubmVsRmFjdG9yeU92ZXJyaWRlID0gb3B0aW9ucy5jaGFubmVsRmFjdG9yeU92ZXJyaWRlO1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuY2hhbm5lbEZhY3RvcnlPdmVycmlkZTtcbiAgICAgICAgICAgIHRoaXNbQ0hBTk5FTF9TWU1CT0xdID0gY2hhbm5lbEZhY3RvcnlPdmVycmlkZShhZGRyZXNzLCBjcmVkZW50aWFscywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzW0NIQU5ORUxfU1lNQk9MXSA9IG5ldyBjaGFubmVsXzEuQ2hhbm5lbEltcGxlbWVudGF0aW9uKGFkZHJlc3MsIGNyZWRlbnRpYWxzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpc1tDSEFOTkVMX1NZTUJPTF0uY2xvc2UoKTtcbiAgICB9XG4gICAgZ2V0Q2hhbm5lbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbQ0hBTk5FTF9TWU1CT0xdO1xuICAgIH1cbiAgICB3YWl0Rm9yUmVhZHkoZGVhZGxpbmUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNoZWNrU3RhdGUgPSAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCdGYWlsZWQgdG8gY29ubmVjdCBiZWZvcmUgdGhlIGRlYWRsaW5lJykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuZXdTdGF0ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB0aGlzW0NIQU5ORUxfU1lNQk9MXS5nZXRDb25uZWN0aXZpdHlTdGF0ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCdUaGUgY2hhbm5lbCBoYXMgYmVlbiBjbG9zZWQnKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld1N0YXRlID09PSBjb25uZWN0aXZpdHlfc3RhdGVfMS5Db25uZWN0aXZpdHlTdGF0ZS5SRUFEWSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW0NIQU5ORUxfU1lNQk9MXS53YXRjaENvbm5lY3Rpdml0eVN0YXRlKG5ld1N0YXRlLCBkZWFkbGluZSwgY2hlY2tTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignVGhlIGNoYW5uZWwgaGFzIGJlZW4gY2xvc2VkJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc2V0SW1tZWRpYXRlKGNoZWNrU3RhdGUpO1xuICAgIH1cbiAgICBjaGVja09wdGlvbmFsVW5hcnlSZXNwb25zZUFyZ3VtZW50cyhhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGFyZzEpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXRhZGF0YTogbmV3IG1ldGFkYXRhXzEuTWV0YWRhdGEoKSwgb3B0aW9uczoge30sIGNhbGxiYWNrOiBhcmcxIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbihhcmcyKSkge1xuICAgICAgICAgICAgaWYgKGFyZzEgaW5zdGFuY2VvZiBtZXRhZGF0YV8xLk1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbWV0YWRhdGE6IGFyZzEsIG9wdGlvbnM6IHt9LCBjYWxsYmFjazogYXJnMiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbWV0YWRhdGE6IG5ldyBtZXRhZGF0YV8xLk1ldGFkYXRhKCksIG9wdGlvbnM6IGFyZzEsIGNhbGxiYWNrOiBhcmcyIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIShhcmcxIGluc3RhbmNlb2YgbWV0YWRhdGFfMS5NZXRhZGF0YSAmJlxuICAgICAgICAgICAgICAgIGFyZzIgaW5zdGFuY2VvZiBPYmplY3QgJiZcbiAgICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGFyZzMpKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IGFyZ3VtZW50cyBwYXNzZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IG1ldGFkYXRhOiBhcmcxLCBvcHRpb25zOiBhcmcyLCBjYWxsYmFjazogYXJnMyB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIG1ha2VVbmFyeVJlcXVlc3QobWV0aG9kLCBzZXJpYWxpemUsIGRlc2VyaWFsaXplLCBhcmd1bWVudCwgbWV0YWRhdGEsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IGNoZWNrZWRBcmd1bWVudHMgPSB0aGlzLmNoZWNrT3B0aW9uYWxVbmFyeVJlc3BvbnNlQXJndW1lbnRzKG1ldGFkYXRhLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICAgIGNvbnN0IG1ldGhvZERlZmluaXRpb24gPSB7XG4gICAgICAgICAgICBwYXRoOiBtZXRob2QsXG4gICAgICAgICAgICByZXF1ZXN0U3RyZWFtOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3BvbnNlU3RyZWFtOiBmYWxzZSxcbiAgICAgICAgICAgIHJlcXVlc3RTZXJpYWxpemU6IHNlcmlhbGl6ZSxcbiAgICAgICAgICAgIHJlc3BvbnNlRGVzZXJpYWxpemU6IGRlc2VyaWFsaXplLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgY2FsbFByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICBhcmd1bWVudDogYXJndW1lbnQsXG4gICAgICAgICAgICBtZXRhZGF0YTogY2hlY2tlZEFyZ3VtZW50cy5tZXRhZGF0YSxcbiAgICAgICAgICAgIGNhbGw6IG5ldyBjYWxsXzEuQ2xpZW50VW5hcnlDYWxsSW1wbCgpLFxuICAgICAgICAgICAgY2hhbm5lbDogdGhpc1tDSEFOTkVMX1NZTUJPTF0sXG4gICAgICAgICAgICBtZXRob2REZWZpbml0aW9uOiBtZXRob2REZWZpbml0aW9uLFxuICAgICAgICAgICAgY2FsbE9wdGlvbnM6IGNoZWNrZWRBcmd1bWVudHMub3B0aW9ucyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjaGVja2VkQXJndW1lbnRzLmNhbGxiYWNrLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpc1tDQUxMX0lOVk9DQVRJT05fVFJBTlNGT1JNRVJfU1lNQk9MXSkge1xuICAgICAgICAgICAgY2FsbFByb3BlcnRpZXMgPSB0aGlzW0NBTExfSU5WT0NBVElPTl9UUkFOU0ZPUk1FUl9TWU1CT0xdKGNhbGxQcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbWl0dGVyID0gY2FsbFByb3BlcnRpZXMuY2FsbDtcbiAgICAgICAgY29uc3QgaW50ZXJjZXB0b3JBcmdzID0ge1xuICAgICAgICAgICAgY2xpZW50SW50ZXJjZXB0b3JzOiB0aGlzW0lOVEVSQ0VQVE9SX1NZTUJPTF0sXG4gICAgICAgICAgICBjbGllbnRJbnRlcmNlcHRvclByb3ZpZGVyczogdGhpc1tJTlRFUkNFUFRPUl9QUk9WSURFUl9TWU1CT0xdLFxuICAgICAgICAgICAgY2FsbEludGVyY2VwdG9yczogKF9hID0gY2FsbFByb3BlcnRpZXMuY2FsbE9wdGlvbnMuaW50ZXJjZXB0b3JzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSxcbiAgICAgICAgICAgIGNhbGxJbnRlcmNlcHRvclByb3ZpZGVyczogKF9iID0gY2FsbFByb3BlcnRpZXMuY2FsbE9wdGlvbnMuaW50ZXJjZXB0b3JfcHJvdmlkZXJzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2FsbCA9IGNsaWVudF9pbnRlcmNlcHRvcnNfMS5nZXRJbnRlcmNlcHRpbmdDYWxsKGludGVyY2VwdG9yQXJncywgY2FsbFByb3BlcnRpZXMubWV0aG9kRGVmaW5pdGlvbiwgY2FsbFByb3BlcnRpZXMuY2FsbE9wdGlvbnMsIGNhbGxQcm9wZXJ0aWVzLmNoYW5uZWwpO1xuICAgICAgICAvKiBUaGlzIG5lZWRzIHRvIGhhcHBlbiBiZWZvcmUgdGhlIGVtaXR0ZXIgaXMgdXNlZC4gVW5mb3J0dW5hdGVseSB3ZSBjYW4ndFxuICAgICAgICAgKiBlbmZvcmNlIHRoaXMgd2l0aCB0aGUgdHlwZSBzeXN0ZW0uIFdlIG5lZWQgdG8gY29uc3RydWN0IHRoaXMgZW1pdHRlclxuICAgICAgICAgKiBiZWZvcmUgY2FsbGluZyB0aGUgQ2FsbEludm9jYXRpb25UcmFuc2Zvcm1lciwgYW5kIHdlIG5lZWQgdG8gY3JlYXRlIHRoZVxuICAgICAgICAgKiBjYWxsIGFmdGVyIHRoYXQuICovXG4gICAgICAgIGVtaXR0ZXIuY2FsbCA9IGNhbGw7XG4gICAgICAgIGlmIChjYWxsUHJvcGVydGllcy5jYWxsT3B0aW9ucy5jcmVkZW50aWFscykge1xuICAgICAgICAgICAgY2FsbC5zZXRDcmVkZW50aWFscyhjYWxsUHJvcGVydGllcy5jYWxsT3B0aW9ucy5jcmVkZW50aWFscyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlTWVzc2FnZSA9IG51bGw7XG4gICAgICAgIGxldCByZWNlaXZlZFN0YXR1cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjYWxsZXJTdGFja0Vycm9yID0gbmV3IEVycm9yKCk7XG4gICAgICAgIGNhbGwuc3RhcnQoY2FsbFByb3BlcnRpZXMubWV0YWRhdGEsIHtcbiAgICAgICAgICAgIG9uUmVjZWl2ZU1ldGFkYXRhOiAobWV0YWRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQoJ21ldGFkYXRhJywgbWV0YWRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBvblJlY2VpdmVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VNZXNzYWdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGwuY2FuY2VsV2l0aFN0YXR1cyhjb25zdGFudHNfMS5TdGF0dXMuSU5URVJOQUwsICdUb28gbWFueSByZXNwb25zZXMgcmVjZWl2ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblJlY2VpdmVTdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlY2VpdmVkU3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVjZWl2ZWRTdGF0dXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMuY29kZSA9PT0gY29uc3RhbnRzXzEuU3RhdHVzLk9LKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZU1lc3NhZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxlclN0YWNrID0gZ2V0RXJyb3JTdGFja1N0cmluZyhjYWxsZXJTdGFja0Vycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxQcm9wZXJ0aWVzLmNhbGxiYWNrKGNhbGxfMS5jYWxsRXJyb3JGcm9tU3RhdHVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb25zdGFudHNfMS5TdGF0dXMuSU5URVJOQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogJ05vIG1lc3NhZ2UgcmVjZWl2ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBzdGF0dXMubWV0YWRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNhbGxlclN0YWNrKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsUHJvcGVydGllcy5jYWxsYmFjayhudWxsLCByZXNwb25zZU1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWxsZXJTdGFjayA9IGdldEVycm9yU3RhY2tTdHJpbmcoY2FsbGVyU3RhY2tFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxQcm9wZXJ0aWVzLmNhbGxiYWNrKGNhbGxfMS5jYWxsRXJyb3JGcm9tU3RhdHVzKHN0YXR1cywgY2FsbGVyU3RhY2spKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW1pdHRlci5lbWl0KCdzdGF0dXMnLCBzdGF0dXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNhbGwuc2VuZE1lc3NhZ2UoYXJndW1lbnQpO1xuICAgICAgICBjYWxsLmhhbGZDbG9zZSgpO1xuICAgICAgICByZXR1cm4gZW1pdHRlcjtcbiAgICB9XG4gICAgbWFrZUNsaWVudFN0cmVhbVJlcXVlc3QobWV0aG9kLCBzZXJpYWxpemUsIGRlc2VyaWFsaXplLCBtZXRhZGF0YSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgY2hlY2tlZEFyZ3VtZW50cyA9IHRoaXMuY2hlY2tPcHRpb25hbFVuYXJ5UmVzcG9uc2VBcmd1bWVudHMobWV0YWRhdGEsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgY29uc3QgbWV0aG9kRGVmaW5pdGlvbiA9IHtcbiAgICAgICAgICAgIHBhdGg6IG1ldGhvZCxcbiAgICAgICAgICAgIHJlcXVlc3RTdHJlYW06IHRydWUsXG4gICAgICAgICAgICByZXNwb25zZVN0cmVhbTogZmFsc2UsXG4gICAgICAgICAgICByZXF1ZXN0U2VyaWFsaXplOiBzZXJpYWxpemUsXG4gICAgICAgICAgICByZXNwb25zZURlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGNhbGxQcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgbWV0YWRhdGE6IGNoZWNrZWRBcmd1bWVudHMubWV0YWRhdGEsXG4gICAgICAgICAgICBjYWxsOiBuZXcgY2FsbF8xLkNsaWVudFdyaXRhYmxlU3RyZWFtSW1wbChzZXJpYWxpemUpLFxuICAgICAgICAgICAgY2hhbm5lbDogdGhpc1tDSEFOTkVMX1NZTUJPTF0sXG4gICAgICAgICAgICBtZXRob2REZWZpbml0aW9uOiBtZXRob2REZWZpbml0aW9uLFxuICAgICAgICAgICAgY2FsbE9wdGlvbnM6IGNoZWNrZWRBcmd1bWVudHMub3B0aW9ucyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjaGVja2VkQXJndW1lbnRzLmNhbGxiYWNrLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpc1tDQUxMX0lOVk9DQVRJT05fVFJBTlNGT1JNRVJfU1lNQk9MXSkge1xuICAgICAgICAgICAgY2FsbFByb3BlcnRpZXMgPSB0aGlzW0NBTExfSU5WT0NBVElPTl9UUkFOU0ZPUk1FUl9TWU1CT0xdKGNhbGxQcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbWl0dGVyID0gY2FsbFByb3BlcnRpZXMuY2FsbDtcbiAgICAgICAgY29uc3QgaW50ZXJjZXB0b3JBcmdzID0ge1xuICAgICAgICAgICAgY2xpZW50SW50ZXJjZXB0b3JzOiB0aGlzW0lOVEVSQ0VQVE9SX1NZTUJPTF0sXG4gICAgICAgICAgICBjbGllbnRJbnRlcmNlcHRvclByb3ZpZGVyczogdGhpc1tJTlRFUkNFUFRPUl9QUk9WSURFUl9TWU1CT0xdLFxuICAgICAgICAgICAgY2FsbEludGVyY2VwdG9yczogKF9hID0gY2FsbFByb3BlcnRpZXMuY2FsbE9wdGlvbnMuaW50ZXJjZXB0b3JzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSxcbiAgICAgICAgICAgIGNhbGxJbnRlcmNlcHRvclByb3ZpZGVyczogKF9iID0gY2FsbFByb3BlcnRpZXMuY2FsbE9wdGlvbnMuaW50ZXJjZXB0b3JfcHJvdmlkZXJzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2FsbCA9IGNsaWVudF9pbnRlcmNlcHRvcnNfMS5nZXRJbnRlcmNlcHRpbmdDYWxsKGludGVyY2VwdG9yQXJncywgY2FsbFByb3BlcnRpZXMubWV0aG9kRGVmaW5pdGlvbiwgY2FsbFByb3BlcnRpZXMuY2FsbE9wdGlvbnMsIGNhbGxQcm9wZXJ0aWVzLmNoYW5uZWwpO1xuICAgICAgICAvKiBUaGlzIG5lZWRzIHRvIGhhcHBlbiBiZWZvcmUgdGhlIGVtaXR0ZXIgaXMgdXNlZC4gVW5mb3J0dW5hdGVseSB3ZSBjYW4ndFxuICAgICAgICAgKiBlbmZvcmNlIHRoaXMgd2l0aCB0aGUgdHlwZSBzeXN0ZW0uIFdlIG5lZWQgdG8gY29uc3RydWN0IHRoaXMgZW1pdHRlclxuICAgICAgICAgKiBiZWZvcmUgY2FsbGluZyB0aGUgQ2FsbEludm9jYXRpb25UcmFuc2Zvcm1lciwgYW5kIHdlIG5lZWQgdG8gY3JlYXRlIHRoZVxuICAgICAgICAgKiBjYWxsIGFmdGVyIHRoYXQuICovXG4gICAgICAgIGVtaXR0ZXIuY2FsbCA9IGNhbGw7XG4gICAgICAgIGlmIChjYWxsUHJvcGVydGllcy5jYWxsT3B0aW9ucy5jcmVkZW50aWFscykge1xuICAgICAgICAgICAgY2FsbC5zZXRDcmVkZW50aWFscyhjYWxsUHJvcGVydGllcy5jYWxsT3B0aW9ucy5jcmVkZW50aWFscyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlTWVzc2FnZSA9IG51bGw7XG4gICAgICAgIGxldCByZWNlaXZlZFN0YXR1cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjYWxsZXJTdGFja0Vycm9yID0gbmV3IEVycm9yKCk7XG4gICAgICAgIGNhbGwuc3RhcnQoY2FsbFByb3BlcnRpZXMubWV0YWRhdGEsIHtcbiAgICAgICAgICAgIG9uUmVjZWl2ZU1ldGFkYXRhOiAobWV0YWRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQoJ21ldGFkYXRhJywgbWV0YWRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBvblJlY2VpdmVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VNZXNzYWdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGwuY2FuY2VsV2l0aFN0YXR1cyhjb25zdGFudHNfMS5TdGF0dXMuSU5URVJOQUwsICdUb28gbWFueSByZXNwb25zZXMgcmVjZWl2ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblJlY2VpdmVTdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlY2VpdmVkU3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVjZWl2ZWRTdGF0dXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMuY29kZSA9PT0gY29uc3RhbnRzXzEuU3RhdHVzLk9LKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZU1lc3NhZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxlclN0YWNrID0gZ2V0RXJyb3JTdGFja1N0cmluZyhjYWxsZXJTdGFja0Vycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxQcm9wZXJ0aWVzLmNhbGxiYWNrKGNhbGxfMS5jYWxsRXJyb3JGcm9tU3RhdHVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb25zdGFudHNfMS5TdGF0dXMuSU5URVJOQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogJ05vIG1lc3NhZ2UgcmVjZWl2ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBzdGF0dXMubWV0YWRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNhbGxlclN0YWNrKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsUHJvcGVydGllcy5jYWxsYmFjayhudWxsLCByZXNwb25zZU1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWxsZXJTdGFjayA9IGdldEVycm9yU3RhY2tTdHJpbmcoY2FsbGVyU3RhY2tFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxQcm9wZXJ0aWVzLmNhbGxiYWNrKGNhbGxfMS5jYWxsRXJyb3JGcm9tU3RhdHVzKHN0YXR1cywgY2FsbGVyU3RhY2spKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW1pdHRlci5lbWl0KCdzdGF0dXMnLCBzdGF0dXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBlbWl0dGVyO1xuICAgIH1cbiAgICBjaGVja01ldGFkYXRhQW5kT3B0aW9ucyhhcmcxLCBhcmcyKSB7XG4gICAgICAgIGxldCBtZXRhZGF0YTtcbiAgICAgICAgbGV0IG9wdGlvbnM7XG4gICAgICAgIGlmIChhcmcxIGluc3RhbmNlb2YgbWV0YWRhdGFfMS5NZXRhZGF0YSkge1xuICAgICAgICAgICAgbWV0YWRhdGEgPSBhcmcxO1xuICAgICAgICAgICAgaWYgKGFyZzIpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gYXJnMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhcmcxKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGFyZzE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhZGF0YSA9IG5ldyBtZXRhZGF0YV8xLk1ldGFkYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgbWV0YWRhdGEsIG9wdGlvbnMgfTtcbiAgICB9XG4gICAgbWFrZVNlcnZlclN0cmVhbVJlcXVlc3QobWV0aG9kLCBzZXJpYWxpemUsIGRlc2VyaWFsaXplLCBhcmd1bWVudCwgbWV0YWRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgY2hlY2tlZEFyZ3VtZW50cyA9IHRoaXMuY2hlY2tNZXRhZGF0YUFuZE9wdGlvbnMobWV0YWRhdGEsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBtZXRob2REZWZpbml0aW9uID0ge1xuICAgICAgICAgICAgcGF0aDogbWV0aG9kLFxuICAgICAgICAgICAgcmVxdWVzdFN0cmVhbTogZmFsc2UsXG4gICAgICAgICAgICByZXNwb25zZVN0cmVhbTogdHJ1ZSxcbiAgICAgICAgICAgIHJlcXVlc3RTZXJpYWxpemU6IHNlcmlhbGl6ZSxcbiAgICAgICAgICAgIHJlc3BvbnNlRGVzZXJpYWxpemU6IGRlc2VyaWFsaXplLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgY2FsbFByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICBhcmd1bWVudDogYXJndW1lbnQsXG4gICAgICAgICAgICBtZXRhZGF0YTogY2hlY2tlZEFyZ3VtZW50cy5tZXRhZGF0YSxcbiAgICAgICAgICAgIGNhbGw6IG5ldyBjYWxsXzEuQ2xpZW50UmVhZGFibGVTdHJlYW1JbXBsKGRlc2VyaWFsaXplKSxcbiAgICAgICAgICAgIGNoYW5uZWw6IHRoaXNbQ0hBTk5FTF9TWU1CT0xdLFxuICAgICAgICAgICAgbWV0aG9kRGVmaW5pdGlvbjogbWV0aG9kRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGNhbGxPcHRpb25zOiBjaGVja2VkQXJndW1lbnRzLm9wdGlvbnMsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzW0NBTExfSU5WT0NBVElPTl9UUkFOU0ZPUk1FUl9TWU1CT0xdKSB7XG4gICAgICAgICAgICBjYWxsUHJvcGVydGllcyA9IHRoaXNbQ0FMTF9JTlZPQ0FUSU9OX1RSQU5TRk9STUVSX1NZTUJPTF0oY2FsbFByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0cmVhbSA9IGNhbGxQcm9wZXJ0aWVzLmNhbGw7XG4gICAgICAgIGNvbnN0IGludGVyY2VwdG9yQXJncyA9IHtcbiAgICAgICAgICAgIGNsaWVudEludGVyY2VwdG9yczogdGhpc1tJTlRFUkNFUFRPUl9TWU1CT0xdLFxuICAgICAgICAgICAgY2xpZW50SW50ZXJjZXB0b3JQcm92aWRlcnM6IHRoaXNbSU5URVJDRVBUT1JfUFJPVklERVJfU1lNQk9MXSxcbiAgICAgICAgICAgIGNhbGxJbnRlcmNlcHRvcnM6IChfYSA9IGNhbGxQcm9wZXJ0aWVzLmNhbGxPcHRpb25zLmludGVyY2VwdG9ycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10sXG4gICAgICAgICAgICBjYWxsSW50ZXJjZXB0b3JQcm92aWRlcnM6IChfYiA9IGNhbGxQcm9wZXJ0aWVzLmNhbGxPcHRpb25zLmludGVyY2VwdG9yX3Byb3ZpZGVycykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW10sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNhbGwgPSBjbGllbnRfaW50ZXJjZXB0b3JzXzEuZ2V0SW50ZXJjZXB0aW5nQ2FsbChpbnRlcmNlcHRvckFyZ3MsIGNhbGxQcm9wZXJ0aWVzLm1ldGhvZERlZmluaXRpb24sIGNhbGxQcm9wZXJ0aWVzLmNhbGxPcHRpb25zLCBjYWxsUHJvcGVydGllcy5jaGFubmVsKTtcbiAgICAgICAgLyogVGhpcyBuZWVkcyB0byBoYXBwZW4gYmVmb3JlIHRoZSBlbWl0dGVyIGlzIHVzZWQuIFVuZm9ydHVuYXRlbHkgd2UgY2FuJ3RcbiAgICAgICAgICogZW5mb3JjZSB0aGlzIHdpdGggdGhlIHR5cGUgc3lzdGVtLiBXZSBuZWVkIHRvIGNvbnN0cnVjdCB0aGlzIGVtaXR0ZXJcbiAgICAgICAgICogYmVmb3JlIGNhbGxpbmcgdGhlIENhbGxJbnZvY2F0aW9uVHJhbnNmb3JtZXIsIGFuZCB3ZSBuZWVkIHRvIGNyZWF0ZSB0aGVcbiAgICAgICAgICogY2FsbCBhZnRlciB0aGF0LiAqL1xuICAgICAgICBzdHJlYW0uY2FsbCA9IGNhbGw7XG4gICAgICAgIGlmIChjYWxsUHJvcGVydGllcy5jYWxsT3B0aW9ucy5jcmVkZW50aWFscykge1xuICAgICAgICAgICAgY2FsbC5zZXRDcmVkZW50aWFscyhjYWxsUHJvcGVydGllcy5jYWxsT3B0aW9ucy5jcmVkZW50aWFscyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlY2VpdmVkU3RhdHVzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNhbGxlclN0YWNrRXJyb3IgPSBuZXcgRXJyb3IoKTtcbiAgICAgICAgY2FsbC5zdGFydChjYWxsUHJvcGVydGllcy5tZXRhZGF0YSwge1xuICAgICAgICAgICAgb25SZWNlaXZlTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICBzdHJlYW0uZW1pdCgnbWV0YWRhdGEnLCBtZXRhZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIG9uUmVjZWl2ZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHN0cmVhbS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUmVjZWl2ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVjZWl2ZWRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWNlaXZlZFN0YXR1cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RyZWFtLnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy5jb2RlICE9PSBjb25zdGFudHNfMS5TdGF0dXMuT0spIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGVyU3RhY2sgPSBnZXRFcnJvclN0YWNrU3RyaW5nKGNhbGxlclN0YWNrRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBjYWxsXzEuY2FsbEVycm9yRnJvbVN0YXR1cyhzdGF0dXMsIGNhbGxlclN0YWNrKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdzdGF0dXMnLCBzdGF0dXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNhbGwuc2VuZE1lc3NhZ2UoYXJndW1lbnQpO1xuICAgICAgICBjYWxsLmhhbGZDbG9zZSgpO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cbiAgICBtYWtlQmlkaVN0cmVhbVJlcXVlc3QobWV0aG9kLCBzZXJpYWxpemUsIGRlc2VyaWFsaXplLCBtZXRhZGF0YSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBjaGVja2VkQXJndW1lbnRzID0gdGhpcy5jaGVja01ldGFkYXRhQW5kT3B0aW9ucyhtZXRhZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IG1ldGhvZERlZmluaXRpb24gPSB7XG4gICAgICAgICAgICBwYXRoOiBtZXRob2QsXG4gICAgICAgICAgICByZXF1ZXN0U3RyZWFtOiB0cnVlLFxuICAgICAgICAgICAgcmVzcG9uc2VTdHJlYW06IHRydWUsXG4gICAgICAgICAgICByZXF1ZXN0U2VyaWFsaXplOiBzZXJpYWxpemUsXG4gICAgICAgICAgICByZXNwb25zZURlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGNhbGxQcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgbWV0YWRhdGE6IGNoZWNrZWRBcmd1bWVudHMubWV0YWRhdGEsXG4gICAgICAgICAgICBjYWxsOiBuZXcgY2FsbF8xLkNsaWVudER1cGxleFN0cmVhbUltcGwoc2VyaWFsaXplLCBkZXNlcmlhbGl6ZSksXG4gICAgICAgICAgICBjaGFubmVsOiB0aGlzW0NIQU5ORUxfU1lNQk9MXSxcbiAgICAgICAgICAgIG1ldGhvZERlZmluaXRpb246IG1ldGhvZERlZmluaXRpb24sXG4gICAgICAgICAgICBjYWxsT3B0aW9uczogY2hlY2tlZEFyZ3VtZW50cy5vcHRpb25zLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpc1tDQUxMX0lOVk9DQVRJT05fVFJBTlNGT1JNRVJfU1lNQk9MXSkge1xuICAgICAgICAgICAgY2FsbFByb3BlcnRpZXMgPSB0aGlzW0NBTExfSU5WT0NBVElPTl9UUkFOU0ZPUk1FUl9TWU1CT0xdKGNhbGxQcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHJlYW0gPSBjYWxsUHJvcGVydGllcy5jYWxsO1xuICAgICAgICBjb25zdCBpbnRlcmNlcHRvckFyZ3MgPSB7XG4gICAgICAgICAgICBjbGllbnRJbnRlcmNlcHRvcnM6IHRoaXNbSU5URVJDRVBUT1JfU1lNQk9MXSxcbiAgICAgICAgICAgIGNsaWVudEludGVyY2VwdG9yUHJvdmlkZXJzOiB0aGlzW0lOVEVSQ0VQVE9SX1BST1ZJREVSX1NZTUJPTF0sXG4gICAgICAgICAgICBjYWxsSW50ZXJjZXB0b3JzOiAoX2EgPSBjYWxsUHJvcGVydGllcy5jYWxsT3B0aW9ucy5pbnRlcmNlcHRvcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdLFxuICAgICAgICAgICAgY2FsbEludGVyY2VwdG9yUHJvdmlkZXJzOiAoX2IgPSBjYWxsUHJvcGVydGllcy5jYWxsT3B0aW9ucy5pbnRlcmNlcHRvcl9wcm92aWRlcnMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjYWxsID0gY2xpZW50X2ludGVyY2VwdG9yc18xLmdldEludGVyY2VwdGluZ0NhbGwoaW50ZXJjZXB0b3JBcmdzLCBjYWxsUHJvcGVydGllcy5tZXRob2REZWZpbml0aW9uLCBjYWxsUHJvcGVydGllcy5jYWxsT3B0aW9ucywgY2FsbFByb3BlcnRpZXMuY2hhbm5lbCk7XG4gICAgICAgIC8qIFRoaXMgbmVlZHMgdG8gaGFwcGVuIGJlZm9yZSB0aGUgZW1pdHRlciBpcyB1c2VkLiBVbmZvcnR1bmF0ZWx5IHdlIGNhbid0XG4gICAgICAgICAqIGVuZm9yY2UgdGhpcyB3aXRoIHRoZSB0eXBlIHN5c3RlbS4gV2UgbmVlZCB0byBjb25zdHJ1Y3QgdGhpcyBlbWl0dGVyXG4gICAgICAgICAqIGJlZm9yZSBjYWxsaW5nIHRoZSBDYWxsSW52b2NhdGlvblRyYW5zZm9ybWVyLCBhbmQgd2UgbmVlZCB0byBjcmVhdGUgdGhlXG4gICAgICAgICAqIGNhbGwgYWZ0ZXIgdGhhdC4gKi9cbiAgICAgICAgc3RyZWFtLmNhbGwgPSBjYWxsO1xuICAgICAgICBpZiAoY2FsbFByb3BlcnRpZXMuY2FsbE9wdGlvbnMuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIGNhbGwuc2V0Q3JlZGVudGlhbHMoY2FsbFByb3BlcnRpZXMuY2FsbE9wdGlvbnMuY3JlZGVudGlhbHMpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZWNlaXZlZFN0YXR1cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjYWxsZXJTdGFja0Vycm9yID0gbmV3IEVycm9yKCk7XG4gICAgICAgIGNhbGwuc3RhcnQoY2FsbFByb3BlcnRpZXMubWV0YWRhdGEsIHtcbiAgICAgICAgICAgIG9uUmVjZWl2ZU1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ21ldGFkYXRhJywgbWV0YWRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUmVjZWl2ZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHN0cmVhbS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUmVjZWl2ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVjZWl2ZWRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWNlaXZlZFN0YXR1cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RyZWFtLnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy5jb2RlICE9PSBjb25zdGFudHNfMS5TdGF0dXMuT0spIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGVyU3RhY2sgPSBnZXRFcnJvclN0YWNrU3RyaW5nKGNhbGxlclN0YWNrRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBjYWxsXzEuY2FsbEVycm9yRnJvbVN0YXR1cyhzdGF0dXMsIGNhbGxlclN0YWNrKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdzdGF0dXMnLCBzdGF0dXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgfVxufVxuZXhwb3J0cy5DbGllbnQgPSBDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ2xpZW50IiwiY2FsbF8xIiwicmVxdWlyZSIsImNoYW5uZWxfMSIsImNvbm5lY3Rpdml0eV9zdGF0ZV8xIiwiY29uc3RhbnRzXzEiLCJtZXRhZGF0YV8xIiwiY2xpZW50X2ludGVyY2VwdG9yc18xIiwiQ0hBTk5FTF9TWU1CT0wiLCJTeW1ib2wiLCJJTlRFUkNFUFRPUl9TWU1CT0wiLCJJTlRFUkNFUFRPUl9QUk9WSURFUl9TWU1CT0wiLCJDQUxMX0lOVk9DQVRJT05fVFJBTlNGT1JNRVJfU1lNQk9MIiwiaXNGdW5jdGlvbiIsImFyZyIsImdldEVycm9yU3RhY2tTdHJpbmciLCJlcnJvciIsInN0YWNrIiwic3BsaXQiLCJzbGljZSIsImpvaW4iLCJjb25zdHJ1Y3RvciIsImFkZHJlc3MiLCJjcmVkZW50aWFscyIsIm9wdGlvbnMiLCJfYSIsIl9iIiwiYXNzaWduIiwiaW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3JfcHJvdmlkZXJzIiwibGVuZ3RoIiwiRXJyb3IiLCJjYWxsSW52b2NhdGlvblRyYW5zZm9ybWVyIiwiY2hhbm5lbE92ZXJyaWRlIiwiY2hhbm5lbEZhY3RvcnlPdmVycmlkZSIsIkNoYW5uZWxJbXBsZW1lbnRhdGlvbiIsImNsb3NlIiwiZ2V0Q2hhbm5lbCIsIndhaXRGb3JSZWFkeSIsImRlYWRsaW5lIiwiY2FsbGJhY2siLCJjaGVja1N0YXRlIiwiZXJyIiwibmV3U3RhdGUiLCJnZXRDb25uZWN0aXZpdHlTdGF0ZSIsImUiLCJDb25uZWN0aXZpdHlTdGF0ZSIsIlJFQURZIiwid2F0Y2hDb25uZWN0aXZpdHlTdGF0ZSIsInNldEltbWVkaWF0ZSIsImNoZWNrT3B0aW9uYWxVbmFyeVJlc3BvbnNlQXJndW1lbnRzIiwiYXJnMSIsImFyZzIiLCJhcmczIiwibWV0YWRhdGEiLCJNZXRhZGF0YSIsIm1ha2VVbmFyeVJlcXVlc3QiLCJtZXRob2QiLCJzZXJpYWxpemUiLCJkZXNlcmlhbGl6ZSIsImFyZ3VtZW50IiwiY2hlY2tlZEFyZ3VtZW50cyIsIm1ldGhvZERlZmluaXRpb24iLCJwYXRoIiwicmVxdWVzdFN0cmVhbSIsInJlc3BvbnNlU3RyZWFtIiwicmVxdWVzdFNlcmlhbGl6ZSIsInJlc3BvbnNlRGVzZXJpYWxpemUiLCJjYWxsUHJvcGVydGllcyIsImNhbGwiLCJDbGllbnRVbmFyeUNhbGxJbXBsIiwiY2hhbm5lbCIsImNhbGxPcHRpb25zIiwiZW1pdHRlciIsImludGVyY2VwdG9yQXJncyIsImNsaWVudEludGVyY2VwdG9ycyIsImNsaWVudEludGVyY2VwdG9yUHJvdmlkZXJzIiwiY2FsbEludGVyY2VwdG9ycyIsImNhbGxJbnRlcmNlcHRvclByb3ZpZGVycyIsImdldEludGVyY2VwdGluZ0NhbGwiLCJzZXRDcmVkZW50aWFscyIsInJlc3BvbnNlTWVzc2FnZSIsInJlY2VpdmVkU3RhdHVzIiwiY2FsbGVyU3RhY2tFcnJvciIsInN0YXJ0Iiwib25SZWNlaXZlTWV0YWRhdGEiLCJlbWl0Iiwib25SZWNlaXZlTWVzc2FnZSIsIm1lc3NhZ2UiLCJjYW5jZWxXaXRoU3RhdHVzIiwiU3RhdHVzIiwiSU5URVJOQUwiLCJvblJlY2VpdmVTdGF0dXMiLCJzdGF0dXMiLCJjb2RlIiwiT0siLCJjYWxsZXJTdGFjayIsImNhbGxFcnJvckZyb21TdGF0dXMiLCJkZXRhaWxzIiwic2VuZE1lc3NhZ2UiLCJoYWxmQ2xvc2UiLCJtYWtlQ2xpZW50U3RyZWFtUmVxdWVzdCIsIkNsaWVudFdyaXRhYmxlU3RyZWFtSW1wbCIsImNoZWNrTWV0YWRhdGFBbmRPcHRpb25zIiwibWFrZVNlcnZlclN0cmVhbVJlcXVlc3QiLCJDbGllbnRSZWFkYWJsZVN0cmVhbUltcGwiLCJzdHJlYW0iLCJwdXNoIiwibWFrZUJpZGlTdHJlYW1SZXF1ZXN0IiwiQ2xpZW50RHVwbGV4U3RyZWFtSW1wbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js":
/*!************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CompressionAlgorithms = void 0;\nvar CompressionAlgorithms;\n(function(CompressionAlgorithms) {\n    CompressionAlgorithms[CompressionAlgorithms[\"identity\"] = 0] = \"identity\";\n    CompressionAlgorithms[CompressionAlgorithms[\"deflate\"] = 1] = \"deflate\";\n    CompressionAlgorithms[CompressionAlgorithms[\"gzip\"] = 2] = \"gzip\";\n})(CompressionAlgorithms = exports.CompressionAlgorithms || (exports.CompressionAlgorithms = {}));\n //# sourceMappingURL=compression-algorithms.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29tcHJlc3Npb24tYWxnb3JpdGhtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7Ozs7Q0FlQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUcsS0FBSztBQUNyQyxJQUFJRTtBQUNILFVBQVVBLHFCQUFxQjtJQUM1QkEscUJBQXFCLENBQUNBLHFCQUFxQixDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7SUFDL0RBLHFCQUFxQixDQUFDQSxxQkFBcUIsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQzlEQSxxQkFBcUIsQ0FBQ0EscUJBQXFCLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRztBQUMvRCxHQUFHQSx3QkFBd0JGLFFBQVFFLHFCQUFxQixJQUFLRixDQUFBQSw2QkFBNkIsR0FBRyxDQUFDO0NBRTlGLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NvbXByZXNzaW9uLWFsZ29yaXRobXMuanM/MjkyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21wcmVzc2lvbkFsZ29yaXRobXMgPSB2b2lkIDA7XG52YXIgQ29tcHJlc3Npb25BbGdvcml0aG1zO1xuKGZ1bmN0aW9uIChDb21wcmVzc2lvbkFsZ29yaXRobXMpIHtcbiAgICBDb21wcmVzc2lvbkFsZ29yaXRobXNbQ29tcHJlc3Npb25BbGdvcml0aG1zW1wiaWRlbnRpdHlcIl0gPSAwXSA9IFwiaWRlbnRpdHlcIjtcbiAgICBDb21wcmVzc2lvbkFsZ29yaXRobXNbQ29tcHJlc3Npb25BbGdvcml0aG1zW1wiZGVmbGF0ZVwiXSA9IDFdID0gXCJkZWZsYXRlXCI7XG4gICAgQ29tcHJlc3Npb25BbGdvcml0aG1zW0NvbXByZXNzaW9uQWxnb3JpdGhtc1tcImd6aXBcIl0gPSAyXSA9IFwiZ3ppcFwiO1xufSkoQ29tcHJlc3Npb25BbGdvcml0aG1zID0gZXhwb3J0cy5Db21wcmVzc2lvbkFsZ29yaXRobXMgfHwgKGV4cG9ydHMuQ29tcHJlc3Npb25BbGdvcml0aG1zID0ge30pKTtcbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXByZXNzaW9uLWFsZ29yaXRobXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ29tcHJlc3Npb25BbGdvcml0aG1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/compression-filter.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CompressionFilterFactory = exports.CompressionFilter = void 0;\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst compression_algorithms_1 = __webpack_require__(/*! ./compression-algorithms */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst filter_1 = __webpack_require__(/*! ./filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst isCompressionAlgorithmKey = (key)=>{\n    return typeof key === \"number\" && typeof compression_algorithms_1.CompressionAlgorithms[key] === \"string\";\n};\nclass CompressionHandler {\n    /**\n     * @param message Raw uncompressed message bytes\n     * @param compress Indicates whether the message should be compressed\n     * @return Framed message, compressed if applicable\n     */ async writeMessage(message, compress) {\n        let messageBuffer = message;\n        if (compress) {\n            messageBuffer = await this.compressMessage(messageBuffer);\n        }\n        const output = Buffer.allocUnsafe(messageBuffer.length + 5);\n        output.writeUInt8(compress ? 1 : 0, 0);\n        output.writeUInt32BE(messageBuffer.length, 1);\n        messageBuffer.copy(output, 5);\n        return output;\n    }\n    /**\n     * @param data Framed message, possibly compressed\n     * @return Uncompressed message\n     */ async readMessage(data) {\n        const compressed = data.readUInt8(0) === 1;\n        let messageBuffer = data.slice(5);\n        if (compressed) {\n            messageBuffer = await this.decompressMessage(messageBuffer);\n        }\n        return messageBuffer;\n    }\n}\nclass IdentityHandler extends CompressionHandler {\n    async compressMessage(message) {\n        return message;\n    }\n    async writeMessage(message, compress) {\n        const output = Buffer.allocUnsafe(message.length + 5);\n        /* With \"identity\" compression, messages should always be marked as\n         * uncompressed */ output.writeUInt8(0, 0);\n        output.writeUInt32BE(message.length, 1);\n        message.copy(output, 5);\n        return output;\n    }\n    decompressMessage(message) {\n        return Promise.reject(new Error('Received compressed message but \"grpc-encoding\" header was identity'));\n    }\n}\nclass DeflateHandler extends CompressionHandler {\n    compressMessage(message) {\n        return new Promise((resolve, reject)=>{\n            zlib.deflate(message, (err, output)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(output);\n                }\n            });\n        });\n    }\n    decompressMessage(message) {\n        return new Promise((resolve, reject)=>{\n            zlib.inflate(message, (err, output)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(output);\n                }\n            });\n        });\n    }\n}\nclass GzipHandler extends CompressionHandler {\n    compressMessage(message) {\n        return new Promise((resolve, reject)=>{\n            zlib.gzip(message, (err, output)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(output);\n                }\n            });\n        });\n    }\n    decompressMessage(message) {\n        return new Promise((resolve, reject)=>{\n            zlib.unzip(message, (err, output)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(output);\n                }\n            });\n        });\n    }\n}\nclass UnknownHandler extends CompressionHandler {\n    constructor(compressionName){\n        super();\n        this.compressionName = compressionName;\n    }\n    compressMessage(message) {\n        return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));\n    }\n    decompressMessage(message) {\n        // This should be unreachable\n        return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));\n    }\n}\nfunction getCompressionHandler(compressionName) {\n    switch(compressionName){\n        case \"identity\":\n            return new IdentityHandler();\n        case \"deflate\":\n            return new DeflateHandler();\n        case \"gzip\":\n            return new GzipHandler();\n        default:\n            return new UnknownHandler(compressionName);\n    }\n}\nclass CompressionFilter extends filter_1.BaseFilter {\n    constructor(channelOptions, sharedFilterConfig){\n        var _a;\n        super();\n        this.sharedFilterConfig = sharedFilterConfig;\n        this.sendCompression = new IdentityHandler();\n        this.receiveCompression = new IdentityHandler();\n        this.currentCompressionAlgorithm = \"identity\";\n        const compressionAlgorithmKey = channelOptions[\"grpc.default_compression_algorithm\"];\n        if (compressionAlgorithmKey !== undefined) {\n            if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\n                const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];\n                const serverSupportedEncodings = (_a = sharedFilterConfig.serverSupportedEncodingHeader) === null || _a === void 0 ? void 0 : _a.split(\",\");\n                /**\n                 * There are two possible situations here:\n                 * 1) We don't have any info yet from the server about what compression it supports\n                 *    In that case we should just use what the client tells us to use\n                 * 2) We've previously received a response from the server including a grpc-accept-encoding header\n                 *    In that case we only want to use the encoding chosen by the client if the server supports it\n                 */ if (!serverSupportedEncodings || serverSupportedEncodings.includes(clientSelectedEncoding)) {\n                    this.currentCompressionAlgorithm = clientSelectedEncoding;\n                    this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm);\n                }\n            } else {\n                logging.log(constants_1.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\n            }\n        }\n    }\n    async sendMetadata(metadata) {\n        const headers = await metadata;\n        headers.set(\"grpc-accept-encoding\", \"identity,deflate,gzip\");\n        headers.set(\"accept-encoding\", \"identity\");\n        // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\n        if (this.currentCompressionAlgorithm === \"identity\") {\n            headers.remove(\"grpc-encoding\");\n        } else {\n            headers.set(\"grpc-encoding\", this.currentCompressionAlgorithm);\n        }\n        return headers;\n    }\n    receiveMetadata(metadata) {\n        const receiveEncoding = metadata.get(\"grpc-encoding\");\n        if (receiveEncoding.length > 0) {\n            const encoding = receiveEncoding[0];\n            if (typeof encoding === \"string\") {\n                this.receiveCompression = getCompressionHandler(encoding);\n            }\n        }\n        metadata.remove(\"grpc-encoding\");\n        /* Check to see if the compression we're using to send messages is supported by the server\n         * If not, reset the sendCompression filter and have it use the default IdentityHandler */ const serverSupportedEncodingsHeader = metadata.get(\"grpc-accept-encoding\")[0];\n        if (serverSupportedEncodingsHeader) {\n            this.sharedFilterConfig.serverSupportedEncodingHeader = serverSupportedEncodingsHeader;\n            const serverSupportedEncodings = serverSupportedEncodingsHeader.split(\",\");\n            if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\n                this.sendCompression = new IdentityHandler();\n                this.currentCompressionAlgorithm = \"identity\";\n            }\n        }\n        metadata.remove(\"grpc-accept-encoding\");\n        return metadata;\n    }\n    async sendMessage(message) {\n        var _a;\n        /* This filter is special. The input message is the bare message bytes,\n         * and the output is a framed and possibly compressed message. For this\n         * reason, this filter should be at the bottom of the filter stack */ const resolvedMessage = await message;\n        let compress;\n        if (this.sendCompression instanceof IdentityHandler) {\n            compress = false;\n        } else {\n            compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2 /* NoCompress */ ) === 0;\n        }\n        return {\n            message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),\n            flags: resolvedMessage.flags\n        };\n    }\n    async receiveMessage(message) {\n        /* This filter is also special. The input message is framed and possibly\n         * compressed, and the output message is deframed and uncompressed. So\n         * this is another reason that this filter should be at the bottom of the\n         * filter stack. */ return this.receiveCompression.readMessage(await message);\n    }\n}\nexports.CompressionFilter = CompressionFilter;\nclass CompressionFilterFactory {\n    constructor(channel, options){\n        this.channel = channel;\n        this.options = options;\n        this.sharedFilterConfig = {};\n    }\n    createFilter(callStream) {\n        return new CompressionFilter(this.options, this.sharedFilterConfig);\n    }\n}\nexports.CompressionFilterFactory = CompressionFilterFactory; //# sourceMappingURL=compression-filter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/connectivity-state.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ConnectivityState = void 0;\nvar ConnectivityState;\n(function(ConnectivityState) {\n    ConnectivityState[ConnectivityState[\"IDLE\"] = 0] = \"IDLE\";\n    ConnectivityState[ConnectivityState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n    ConnectivityState[ConnectivityState[\"READY\"] = 2] = \"READY\";\n    ConnectivityState[ConnectivityState[\"TRANSIENT_FAILURE\"] = 3] = \"TRANSIENT_FAILURE\";\n    ConnectivityState[ConnectivityState[\"SHUTDOWN\"] = 4] = \"SHUTDOWN\";\n})(ConnectivityState = exports.ConnectivityState || (exports.ConnectivityState = {})); //# sourceMappingURL=connectivity-state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29ubmVjdGl2aXR5LXN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBRyxLQUFLO0FBQ2pDLElBQUlFO0FBQ0gsVUFBVUEsaUJBQWlCO0lBQ3hCQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRztJQUNuREEsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDekRBLGlCQUFpQixDQUFDQSxpQkFBaUIsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQ3BEQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxHQUFHO0lBQ2hFQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsV0FBVyxHQUFHLEVBQUUsR0FBRztBQUMzRCxHQUFHQSxvQkFBb0JGLFFBQVFFLGlCQUFpQixJQUFLRixDQUFBQSx5QkFBeUIsR0FBRyxDQUFDLEtBQ2xGLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2Nvbm5lY3Rpdml0eS1zdGF0ZS5qcz80ZWUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIxIGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbm5lY3Rpdml0eVN0YXRlID0gdm9pZCAwO1xudmFyIENvbm5lY3Rpdml0eVN0YXRlO1xuKGZ1bmN0aW9uIChDb25uZWN0aXZpdHlTdGF0ZSkge1xuICAgIENvbm5lY3Rpdml0eVN0YXRlW0Nvbm5lY3Rpdml0eVN0YXRlW1wiSURMRVwiXSA9IDBdID0gXCJJRExFXCI7XG4gICAgQ29ubmVjdGl2aXR5U3RhdGVbQ29ubmVjdGl2aXR5U3RhdGVbXCJDT05ORUNUSU5HXCJdID0gMV0gPSBcIkNPTk5FQ1RJTkdcIjtcbiAgICBDb25uZWN0aXZpdHlTdGF0ZVtDb25uZWN0aXZpdHlTdGF0ZVtcIlJFQURZXCJdID0gMl0gPSBcIlJFQURZXCI7XG4gICAgQ29ubmVjdGl2aXR5U3RhdGVbQ29ubmVjdGl2aXR5U3RhdGVbXCJUUkFOU0lFTlRfRkFJTFVSRVwiXSA9IDNdID0gXCJUUkFOU0lFTlRfRkFJTFVSRVwiO1xuICAgIENvbm5lY3Rpdml0eVN0YXRlW0Nvbm5lY3Rpdml0eVN0YXRlW1wiU0hVVERPV05cIl0gPSA0XSA9IFwiU0hVVERPV05cIjtcbn0pKENvbm5lY3Rpdml0eVN0YXRlID0gZXhwb3J0cy5Db25uZWN0aXZpdHlTdGF0ZSB8fCAoZXhwb3J0cy5Db25uZWN0aXZpdHlTdGF0ZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0aXZpdHktc3RhdGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ29ubmVjdGl2aXR5U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/constants.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = exports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = exports.Propagate = exports.LogVerbosity = exports.Status = void 0;\nvar Status;\n(function(Status) {\n    Status[Status[\"OK\"] = 0] = \"OK\";\n    Status[Status[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    Status[Status[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    Status[Status[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    Status[Status[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    Status[Status[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    Status[Status[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    Status[Status[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    Status[Status[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    Status[Status[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    Status[Status[\"ABORTED\"] = 10] = \"ABORTED\";\n    Status[Status[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    Status[Status[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    Status[Status[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    Status[Status[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    Status[Status[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    Status[Status[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(Status = exports.Status || (exports.Status = {}));\nvar LogVerbosity;\n(function(LogVerbosity) {\n    LogVerbosity[LogVerbosity[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogVerbosity[LogVerbosity[\"INFO\"] = 1] = \"INFO\";\n    LogVerbosity[LogVerbosity[\"ERROR\"] = 2] = \"ERROR\";\n    LogVerbosity[LogVerbosity[\"NONE\"] = 3] = \"NONE\";\n})(LogVerbosity = exports.LogVerbosity || (exports.LogVerbosity = {}));\n/**\n * NOTE: This enum is not currently used in any implemented API in this\n * library. It is included only for type parity with the other implementation.\n */ var Propagate;\n(function(Propagate) {\n    Propagate[Propagate[\"DEADLINE\"] = 1] = \"DEADLINE\";\n    Propagate[Propagate[\"CENSUS_STATS_CONTEXT\"] = 2] = \"CENSUS_STATS_CONTEXT\";\n    Propagate[Propagate[\"CENSUS_TRACING_CONTEXT\"] = 4] = \"CENSUS_TRACING_CONTEXT\";\n    Propagate[Propagate[\"CANCELLATION\"] = 8] = \"CANCELLATION\";\n    // https://github.com/grpc/grpc/blob/master/include/grpc/impl/codegen/propagation_bits.h#L43\n    Propagate[Propagate[\"DEFAULTS\"] = 65535] = \"DEFAULTS\";\n})(Propagate = exports.Propagate || (exports.Propagate = {}));\n// -1 means unlimited\nexports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;\n// 4 MB default\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQ0FBMEMsR0FBR0EsdUNBQXVDLEdBQUdBLGlCQUFpQixHQUFHQSxvQkFBb0IsR0FBR0EsY0FBYyxHQUFHLEtBQUs7QUFDeEosSUFBSU07QUFDSCxVQUFVQSxNQUFNO0lBQ2JBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUc7SUFDM0JBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUc7SUFDbENBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDaENBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLG1CQUFtQixHQUFHLEVBQUUsR0FBRztJQUN6Q0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxHQUFHO0lBQzFDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0lBQ2xDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsR0FBRztJQUMxQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMscUJBQXFCLEdBQUcsRUFBRSxHQUFHO0lBQzNDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEdBQUc7SUFDNUNBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUc7SUFDakNBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLGVBQWUsR0FBRyxHQUFHLEdBQUc7SUFDdENBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsR0FBRztJQUN2Q0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRztJQUNsQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsY0FBYyxHQUFHLEdBQUcsR0FBRztJQUNyQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRztJQUNuQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxHQUFHO0FBQzdDLEdBQUdBLFNBQVNOLFFBQVFNLE1BQU0sSUFBS04sQ0FBQUEsY0FBYyxHQUFHLENBQUM7QUFDakQsSUFBSUs7QUFDSCxVQUFVQSxZQUFZO0lBQ25CQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQzFDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHO0lBQ3pDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQzFDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHO0FBQzdDLEdBQUdBLGVBQWVMLFFBQVFLLFlBQVksSUFBS0wsQ0FBQUEsb0JBQW9CLEdBQUcsQ0FBQztBQUNuRTs7O0NBR0MsR0FDRCxJQUFJSTtBQUNILFVBQVVBLFNBQVM7SUFDaEJBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHVCQUF1QixHQUFHLEVBQUUsR0FBRztJQUNuREEsU0FBUyxDQUFDQSxTQUFTLENBQUMseUJBQXlCLEdBQUcsRUFBRSxHQUFHO0lBQ3JEQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxlQUFlLEdBQUcsRUFBRSxHQUFHO0lBQzNDLDRGQUE0RjtJQUM1RkEsU0FBUyxDQUFDQSxTQUFTLENBQUMsV0FBVyxHQUFHLE1BQU0sR0FBRztBQUMvQyxHQUFHQSxZQUFZSixRQUFRSSxTQUFTLElBQUtKLENBQUFBLGlCQUFpQixHQUFHLENBQUM7QUFDMUQscUJBQXFCO0FBQ3JCQSx1Q0FBdUMsR0FBRyxDQUFDO0FBQzNDLGVBQWU7QUFDZkEsMENBQTBDLEdBQUcsSUFBSSxPQUFPLE1BQ3hELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NvbnN0YW50cy5qcz8xYzJkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRFRkFVTFRfTUFYX1JFQ0VJVkVfTUVTU0FHRV9MRU5HVEggPSBleHBvcnRzLkRFRkFVTFRfTUFYX1NFTkRfTUVTU0FHRV9MRU5HVEggPSBleHBvcnRzLlByb3BhZ2F0ZSA9IGV4cG9ydHMuTG9nVmVyYm9zaXR5ID0gZXhwb3J0cy5TdGF0dXMgPSB2b2lkIDA7XG52YXIgU3RhdHVzO1xuKGZ1bmN0aW9uIChTdGF0dXMpIHtcbiAgICBTdGF0dXNbU3RhdHVzW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQ0FOQ0VMTEVEXCJdID0gMV0gPSBcIkNBTkNFTExFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTktOT1dOXCJdID0gMl0gPSBcIlVOS05PV05cIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIkRFQURMSU5FX0VYQ0VFREVEXCJdID0gNF0gPSBcIkRFQURMSU5FX0VYQ0VFREVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIk5PVF9GT1VORFwiXSA9IDVdID0gXCJOT1RfRk9VTkRcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiUEVSTUlTU0lPTl9ERU5JRURcIl0gPSA3XSA9IFwiUEVSTUlTU0lPTl9ERU5JRURcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiUkVTT1VSQ0VfRVhIQVVTVEVEXCJdID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJGQUlMRURfUFJFQ09ORElUSU9OXCJdID0gOV0gPSBcIkZBSUxFRF9QUkVDT05ESVRJT05cIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUJPUlRFRFwiXSA9IDEwXSA9IFwiQUJPUlRFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJPVVRfT0ZfUkFOR0VcIl0gPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTklNUExFTUVOVEVEXCJdID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIklOVEVSTkFMXCJdID0gMTNdID0gXCJJTlRFUk5BTFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTkFWQUlMQUJMRVwiXSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiREFUQV9MT1NTXCJdID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5BVVRIRU5USUNBVEVEXCJdID0gMTZdID0gXCJVTkFVVEhFTlRJQ0FURURcIjtcbn0pKFN0YXR1cyA9IGV4cG9ydHMuU3RhdHVzIHx8IChleHBvcnRzLlN0YXR1cyA9IHt9KSk7XG52YXIgTG9nVmVyYm9zaXR5O1xuKGZ1bmN0aW9uIChMb2dWZXJib3NpdHkpIHtcbiAgICBMb2dWZXJib3NpdHlbTG9nVmVyYm9zaXR5W1wiREVCVUdcIl0gPSAwXSA9IFwiREVCVUdcIjtcbiAgICBMb2dWZXJib3NpdHlbTG9nVmVyYm9zaXR5W1wiSU5GT1wiXSA9IDFdID0gXCJJTkZPXCI7XG4gICAgTG9nVmVyYm9zaXR5W0xvZ1ZlcmJvc2l0eVtcIkVSUk9SXCJdID0gMl0gPSBcIkVSUk9SXCI7XG4gICAgTG9nVmVyYm9zaXR5W0xvZ1ZlcmJvc2l0eVtcIk5PTkVcIl0gPSAzXSA9IFwiTk9ORVwiO1xufSkoTG9nVmVyYm9zaXR5ID0gZXhwb3J0cy5Mb2dWZXJib3NpdHkgfHwgKGV4cG9ydHMuTG9nVmVyYm9zaXR5ID0ge30pKTtcbi8qKlxuICogTk9URTogVGhpcyBlbnVtIGlzIG5vdCBjdXJyZW50bHkgdXNlZCBpbiBhbnkgaW1wbGVtZW50ZWQgQVBJIGluIHRoaXNcbiAqIGxpYnJhcnkuIEl0IGlzIGluY2x1ZGVkIG9ubHkgZm9yIHR5cGUgcGFyaXR5IHdpdGggdGhlIG90aGVyIGltcGxlbWVudGF0aW9uLlxuICovXG52YXIgUHJvcGFnYXRlO1xuKGZ1bmN0aW9uIChQcm9wYWdhdGUpIHtcbiAgICBQcm9wYWdhdGVbUHJvcGFnYXRlW1wiREVBRExJTkVcIl0gPSAxXSA9IFwiREVBRExJTkVcIjtcbiAgICBQcm9wYWdhdGVbUHJvcGFnYXRlW1wiQ0VOU1VTX1NUQVRTX0NPTlRFWFRcIl0gPSAyXSA9IFwiQ0VOU1VTX1NUQVRTX0NPTlRFWFRcIjtcbiAgICBQcm9wYWdhdGVbUHJvcGFnYXRlW1wiQ0VOU1VTX1RSQUNJTkdfQ09OVEVYVFwiXSA9IDRdID0gXCJDRU5TVVNfVFJBQ0lOR19DT05URVhUXCI7XG4gICAgUHJvcGFnYXRlW1Byb3BhZ2F0ZVtcIkNBTkNFTExBVElPTlwiXSA9IDhdID0gXCJDQU5DRUxMQVRJT05cIjtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ3JwYy9ncnBjL2Jsb2IvbWFzdGVyL2luY2x1ZGUvZ3JwYy9pbXBsL2NvZGVnZW4vcHJvcGFnYXRpb25fYml0cy5oI0w0M1xuICAgIFByb3BhZ2F0ZVtQcm9wYWdhdGVbXCJERUZBVUxUU1wiXSA9IDY1NTM1XSA9IFwiREVGQVVMVFNcIjtcbn0pKFByb3BhZ2F0ZSA9IGV4cG9ydHMuUHJvcGFnYXRlIHx8IChleHBvcnRzLlByb3BhZ2F0ZSA9IHt9KSk7XG4vLyAtMSBtZWFucyB1bmxpbWl0ZWRcbmV4cG9ydHMuREVGQVVMVF9NQVhfU0VORF9NRVNTQUdFX0xFTkdUSCA9IC0xO1xuLy8gNCBNQiBkZWZhdWx0XG5leHBvcnRzLkRFRkFVTFRfTUFYX1JFQ0VJVkVfTUVTU0FHRV9MRU5HVEggPSA0ICogMTAyNCAqIDEwMjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiREVGQVVMVF9NQVhfUkVDRUlWRV9NRVNTQUdFX0xFTkdUSCIsIkRFRkFVTFRfTUFYX1NFTkRfTUVTU0FHRV9MRU5HVEgiLCJQcm9wYWdhdGUiLCJMb2dWZXJib3NpdHkiLCJTdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/deadline-filter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/deadline-filter.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DeadlineFilterFactory = exports.DeadlineFilter = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst filter_1 = __webpack_require__(/*! ./filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\nconst units = [\n    [\n        \"m\",\n        1\n    ],\n    [\n        \"S\",\n        1000\n    ],\n    [\n        \"M\",\n        60 * 1000\n    ],\n    [\n        \"H\",\n        60 * 60 * 1000\n    ]\n];\nfunction getDeadline(deadline) {\n    const now = new Date().getTime();\n    const timeoutMs = Math.max(deadline - now, 0);\n    for (const [unit, factor] of units){\n        const amount = timeoutMs / factor;\n        if (amount < 1e8) {\n            return String(Math.ceil(amount)) + unit;\n        }\n    }\n    throw new Error(\"Deadline is too far in the future\");\n}\nclass DeadlineFilter extends filter_1.BaseFilter {\n    constructor(channel, callStream){\n        super();\n        this.channel = channel;\n        this.callStream = callStream;\n        this.timer = null;\n        this.deadline = Infinity;\n        this.retreiveDeadline();\n        this.runTimer();\n    }\n    retreiveDeadline() {\n        const callDeadline = this.callStream.getDeadline();\n        if (callDeadline instanceof Date) {\n            this.deadline = callDeadline.getTime();\n        } else {\n            this.deadline = callDeadline;\n        }\n    }\n    runTimer() {\n        var _a, _b;\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        const now = new Date().getTime();\n        const timeout = this.deadline - now;\n        if (timeout <= 0) {\n            process.nextTick(()=>{\n                this.callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, \"Deadline exceeded\");\n            });\n        } else if (this.deadline !== Infinity) {\n            this.timer = setTimeout(()=>{\n                this.callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, \"Deadline exceeded\");\n            }, timeout);\n            (_b = (_a = this.timer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    }\n    refresh() {\n        this.retreiveDeadline();\n        this.runTimer();\n    }\n    async sendMetadata(metadata) {\n        if (this.deadline === Infinity) {\n            return metadata;\n        }\n        /* The input metadata promise depends on the original channel.connect()\n         * promise, so when it is complete that implies that the channel is\n         * connected */ const finalMetadata = await metadata;\n        const timeoutString = getDeadline(this.deadline);\n        finalMetadata.set(\"grpc-timeout\", timeoutString);\n        return finalMetadata;\n    }\n    receiveTrailers(status) {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n        return status;\n    }\n}\nexports.DeadlineFilter = DeadlineFilter;\nclass DeadlineFilterFactory {\n    constructor(channel){\n        this.channel = channel;\n    }\n    createFilter(callStream) {\n        return new DeadlineFilter(this.channel, callStream);\n    }\n}\nexports.DeadlineFilterFactory = DeadlineFilterFactory; //# sourceMappingURL=deadline-filter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/deadline-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/duration.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/duration.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isDuration = exports.durationToMs = exports.msToDuration = void 0;\nfunction msToDuration(millis) {\n    return {\n        seconds: millis / 1000 | 0,\n        nanos: millis % 1000 * 1000000 | 0\n    };\n}\nexports.msToDuration = msToDuration;\nfunction durationToMs(duration) {\n    return duration.seconds * 1000 + duration.nanos / 1000000 | 0;\n}\nexports.durationToMs = durationToMs;\nfunction isDuration(value) {\n    return typeof value.seconds === \"number\" && typeof value.nanos === \"number\";\n}\nexports.isDuration = isDuration; //# sourceMappingURL=duration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZHVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHQSxvQkFBb0IsR0FBR0Esb0JBQW9CLEdBQUcsS0FBSztBQUN4RSxTQUFTSSxhQUFhQyxNQUFNO0lBQ3hCLE9BQU87UUFDSEMsU0FBUyxTQUFVLE9BQVE7UUFDM0JDLE9BQU8sU0FBVSxPQUFRLFVBQVU7SUFDdkM7QUFDSjtBQUNBUCxvQkFBb0IsR0FBR0k7QUFDdkIsU0FBU0QsYUFBYUssUUFBUTtJQUMxQixPQUFPLFNBQVVGLE9BQU8sR0FBRyxPQUFPRSxTQUFTRCxLQUFLLEdBQUcsVUFBVztBQUNsRTtBQUNBUCxvQkFBb0IsR0FBR0c7QUFDdkIsU0FBU0QsV0FBV0QsS0FBSztJQUNyQixPQUFPLE9BQVFBLE1BQU1LLE9BQU8sS0FBSyxZQUFjLE9BQU9MLE1BQU1NLEtBQUssS0FBSztBQUMxRTtBQUNBUCxrQkFBa0IsR0FBR0UsWUFDckIsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZjLW5leHRqcy1zaGFkY24vLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZHVyYXRpb24uanM/ZDExMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMiBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0R1cmF0aW9uID0gZXhwb3J0cy5kdXJhdGlvblRvTXMgPSBleHBvcnRzLm1zVG9EdXJhdGlvbiA9IHZvaWQgMDtcbmZ1bmN0aW9uIG1zVG9EdXJhdGlvbihtaWxsaXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZWNvbmRzOiAobWlsbGlzIC8gMTAwMCkgfCAwLFxuICAgICAgICBuYW5vczogKG1pbGxpcyAlIDEwMDApICogMTAwMDAwMCB8IDBcbiAgICB9O1xufVxuZXhwb3J0cy5tc1RvRHVyYXRpb24gPSBtc1RvRHVyYXRpb247XG5mdW5jdGlvbiBkdXJhdGlvblRvTXMoZHVyYXRpb24pIHtcbiAgICByZXR1cm4gKGR1cmF0aW9uLnNlY29uZHMgKiAxMDAwICsgZHVyYXRpb24ubmFub3MgLyAxMDAwMDAwKSB8IDA7XG59XG5leHBvcnRzLmR1cmF0aW9uVG9NcyA9IGR1cmF0aW9uVG9NcztcbmZ1bmN0aW9uIGlzRHVyYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZS5zZWNvbmRzID09PSAnbnVtYmVyJykgJiYgKHR5cGVvZiB2YWx1ZS5uYW5vcyA9PT0gJ251bWJlcicpO1xufVxuZXhwb3J0cy5pc0R1cmF0aW9uID0gaXNEdXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWR1cmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzRHVyYXRpb24iLCJkdXJhdGlvblRvTXMiLCJtc1RvRHVyYXRpb24iLCJtaWxsaXMiLCJzZWNvbmRzIiwibmFub3MiLCJkdXJhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/duration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/experimental.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/experimental.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar logging_1 = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nObject.defineProperty(exports, \"trace\", ({\n    enumerable: true,\n    get: function() {\n        return logging_1.trace;\n    }\n}));\nObject.defineProperty(exports, \"log\", ({\n    enumerable: true,\n    get: function() {\n        return logging_1.log;\n    }\n}));\nvar resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nObject.defineProperty(exports, \"registerResolver\", ({\n    enumerable: true,\n    get: function() {\n        return resolver_1.registerResolver;\n    }\n}));\nvar uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nObject.defineProperty(exports, \"uriToString\", ({\n    enumerable: true,\n    get: function() {\n        return uri_parser_1.uriToString;\n    }\n}));\nvar duration_1 = __webpack_require__(/*! ./duration */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/duration.js\");\nObject.defineProperty(exports, \"durationToMs\", ({\n    enumerable: true,\n    get: function() {\n        return duration_1.durationToMs;\n    }\n}));\nvar backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nObject.defineProperty(exports, \"BackoffTimeout\", ({\n    enumerable: true,\n    get: function() {\n        return backoff_timeout_1.BackoffTimeout;\n    }\n}));\nvar load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nObject.defineProperty(exports, \"createChildChannelControlHelper\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_1.createChildChannelControlHelper;\n    }\n}));\nObject.defineProperty(exports, \"registerLoadBalancerType\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_1.registerLoadBalancerType;\n    }\n}));\nObject.defineProperty(exports, \"getFirstUsableConfig\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_1.getFirstUsableConfig;\n    }\n}));\nObject.defineProperty(exports, \"validateLoadBalancingConfig\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_1.validateLoadBalancingConfig;\n    }\n}));\nvar subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nObject.defineProperty(exports, \"subchannelAddressToString\", ({\n    enumerable: true,\n    get: function() {\n        return subchannel_address_1.subchannelAddressToString;\n    }\n}));\nvar load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\nObject.defineProperty(exports, \"ChildLoadBalancerHandler\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_child_handler_1.ChildLoadBalancerHandler;\n    }\n}));\nvar picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nObject.defineProperty(exports, \"UnavailablePicker\", ({\n    enumerable: true,\n    get: function() {\n        return picker_1.UnavailablePicker;\n    }\n}));\nObject.defineProperty(exports, \"QueuePicker\", ({\n    enumerable: true,\n    get: function() {\n        return picker_1.QueuePicker;\n    }\n}));\nObject.defineProperty(exports, \"PickResultType\", ({\n    enumerable: true,\n    get: function() {\n        return picker_1.PickResultType;\n    }\n}));\nvar filter_1 = __webpack_require__(/*! ./filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\nObject.defineProperty(exports, \"BaseFilter\", ({\n    enumerable: true,\n    get: function() {\n        return filter_1.BaseFilter;\n    }\n}));\nvar filter_stack_1 = __webpack_require__(/*! ./filter-stack */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\");\nObject.defineProperty(exports, \"FilterStackFactory\", ({\n    enumerable: true,\n    get: function() {\n        return filter_stack_1.FilterStackFactory;\n    }\n}));\nvar admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\nObject.defineProperty(exports, \"registerAdminService\", ({\n    enumerable: true,\n    get: function() {\n        return admin_1.registerAdminService;\n    }\n}));\nvar subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\nObject.defineProperty(exports, \"BaseSubchannelWrapper\", ({\n    enumerable: true,\n    get: function() {\n        return subchannel_interface_1.BaseSubchannelWrapper;\n    }\n}));\nvar load_balancer_outlier_detection_1 = __webpack_require__(/*! ./load-balancer-outlier-detection */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\");\nObject.defineProperty(exports, \"OutlierDetectionLoadBalancingConfig\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_outlier_detection_1.OutlierDetectionLoadBalancingConfig;\n    }\n})); //# sourceMappingURL=experimental.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/experimental.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/filter-stack.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FilterStackFactory = exports.FilterStack = void 0;\nclass FilterStack {\n    constructor(filters){\n        this.filters = filters;\n    }\n    sendMetadata(metadata) {\n        let result = metadata;\n        for(let i = 0; i < this.filters.length; i++){\n            result = this.filters[i].sendMetadata(result);\n        }\n        return result;\n    }\n    receiveMetadata(metadata) {\n        let result = metadata;\n        for(let i = this.filters.length - 1; i >= 0; i--){\n            result = this.filters[i].receiveMetadata(result);\n        }\n        return result;\n    }\n    sendMessage(message) {\n        let result = message;\n        for(let i = 0; i < this.filters.length; i++){\n            result = this.filters[i].sendMessage(result);\n        }\n        return result;\n    }\n    receiveMessage(message) {\n        let result = message;\n        for(let i = this.filters.length - 1; i >= 0; i--){\n            result = this.filters[i].receiveMessage(result);\n        }\n        return result;\n    }\n    receiveTrailers(status) {\n        let result = status;\n        for(let i = this.filters.length - 1; i >= 0; i--){\n            result = this.filters[i].receiveTrailers(result);\n        }\n        return result;\n    }\n    refresh() {\n        for (const filter of this.filters){\n            filter.refresh();\n        }\n    }\n    push(filters) {\n        this.filters.unshift(...filters);\n    }\n    getFilters() {\n        return this.filters;\n    }\n}\nexports.FilterStack = FilterStack;\nclass FilterStackFactory {\n    constructor(factories){\n        this.factories = factories;\n    }\n    push(filterFactories) {\n        this.factories.unshift(...filterFactories);\n    }\n    createFilter(callStream) {\n        return new FilterStack(this.factories.map((factory)=>factory.createFilter(callStream)));\n    }\n}\nexports.FilterStackFactory = FilterStackFactory; //# sourceMappingURL=filter-stack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLXN0YWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUN4RCxNQUFNRztJQUNGQyxZQUFZQyxPQUFPLENBQUU7UUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ25CO0lBQ0FDLGFBQWFDLFFBQVEsRUFBRTtRQUNuQixJQUFJQyxTQUFTRDtRQUNiLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxNQUFNLEVBQUVELElBQUs7WUFDMUNELFNBQVMsSUFBSSxDQUFDSCxPQUFPLENBQUNJLEVBQUUsQ0FBQ0gsWUFBWSxDQUFDRTtRQUMxQztRQUNBLE9BQU9BO0lBQ1g7SUFDQUcsZ0JBQWdCSixRQUFRLEVBQUU7UUFDdEIsSUFBSUMsU0FBU0Q7UUFDYixJQUFLLElBQUlFLElBQUksSUFBSSxDQUFDSixPQUFPLENBQUNLLE1BQU0sR0FBRyxHQUFHRCxLQUFLLEdBQUdBLElBQUs7WUFDL0NELFNBQVMsSUFBSSxDQUFDSCxPQUFPLENBQUNJLEVBQUUsQ0FBQ0UsZUFBZSxDQUFDSDtRQUM3QztRQUNBLE9BQU9BO0lBQ1g7SUFDQUksWUFBWUMsT0FBTyxFQUFFO1FBQ2pCLElBQUlMLFNBQVNLO1FBQ2IsSUFBSyxJQUFJSixJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDSixPQUFPLENBQUNLLE1BQU0sRUFBRUQsSUFBSztZQUMxQ0QsU0FBUyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksRUFBRSxDQUFDRyxXQUFXLENBQUNKO1FBQ3pDO1FBQ0EsT0FBT0E7SUFDWDtJQUNBTSxlQUFlRCxPQUFPLEVBQUU7UUFDcEIsSUFBSUwsU0FBU0s7UUFDYixJQUFLLElBQUlKLElBQUksSUFBSSxDQUFDSixPQUFPLENBQUNLLE1BQU0sR0FBRyxHQUFHRCxLQUFLLEdBQUdBLElBQUs7WUFDL0NELFNBQVMsSUFBSSxDQUFDSCxPQUFPLENBQUNJLEVBQUUsQ0FBQ0ssY0FBYyxDQUFDTjtRQUM1QztRQUNBLE9BQU9BO0lBQ1g7SUFDQU8sZ0JBQWdCQyxNQUFNLEVBQUU7UUFDcEIsSUFBSVIsU0FBU1E7UUFDYixJQUFLLElBQUlQLElBQUksSUFBSSxDQUFDSixPQUFPLENBQUNLLE1BQU0sR0FBRyxHQUFHRCxLQUFLLEdBQUdBLElBQUs7WUFDL0NELFNBQVMsSUFBSSxDQUFDSCxPQUFPLENBQUNJLEVBQUUsQ0FBQ00sZUFBZSxDQUFDUDtRQUM3QztRQUNBLE9BQU9BO0lBQ1g7SUFDQVMsVUFBVTtRQUNOLEtBQUssTUFBTUMsVUFBVSxJQUFJLENBQUNiLE9BQU8sQ0FBRTtZQUMvQmEsT0FBT0QsT0FBTztRQUNsQjtJQUNKO0lBQ0FFLEtBQUtkLE9BQU8sRUFBRTtRQUNWLElBQUksQ0FBQ0EsT0FBTyxDQUFDZSxPQUFPLElBQUlmO0lBQzVCO0lBQ0FnQixhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUNoQixPQUFPO0lBQ3ZCO0FBQ0o7QUFDQUwsbUJBQW1CLEdBQUdHO0FBQ3RCLE1BQU1EO0lBQ0ZFLFlBQVlrQixTQUFTLENBQUU7UUFDbkIsSUFBSSxDQUFDQSxTQUFTLEdBQUdBO0lBQ3JCO0lBQ0FILEtBQUtJLGVBQWUsRUFBRTtRQUNsQixJQUFJLENBQUNELFNBQVMsQ0FBQ0YsT0FBTyxJQUFJRztJQUM5QjtJQUNBQyxhQUFhQyxVQUFVLEVBQUU7UUFDckIsT0FBTyxJQUFJdEIsWUFBWSxJQUFJLENBQUNtQixTQUFTLENBQUNJLEdBQUcsQ0FBQyxDQUFDQyxVQUFZQSxRQUFRSCxZQUFZLENBQUNDO0lBQ2hGO0FBQ0o7QUFDQXpCLDBCQUEwQixHQUFHRSxvQkFDN0Isd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZjLW5leHRqcy1zaGFkY24vLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLXN0YWNrLmpzPzc1MzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmlsdGVyU3RhY2tGYWN0b3J5ID0gZXhwb3J0cy5GaWx0ZXJTdGFjayA9IHZvaWQgMDtcbmNsYXNzIEZpbHRlclN0YWNrIHtcbiAgICBjb25zdHJ1Y3RvcihmaWx0ZXJzKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycyA9IGZpbHRlcnM7XG4gICAgfVxuICAgIHNlbmRNZXRhZGF0YShtZXRhZGF0YSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbWV0YWRhdGE7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlcnNbaV0uc2VuZE1ldGFkYXRhKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmVjZWl2ZU1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBtZXRhZGF0YTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuZmlsdGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXJzW2ldLnJlY2VpdmVNZXRhZGF0YShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG1lc3NhZ2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlcnNbaV0uc2VuZE1lc3NhZ2UocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZWNlaXZlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBtZXNzYWdlO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlcnNbaV0ucmVjZWl2ZU1lc3NhZ2UocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZWNlaXZlVHJhaWxlcnMoc3RhdHVzKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBzdGF0dXM7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZmlsdGVyc1tpXS5yZWNlaXZlVHJhaWxlcnMocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZWZyZXNoKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGZpbHRlciBvZiB0aGlzLmZpbHRlcnMpIHtcbiAgICAgICAgICAgIGZpbHRlci5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVzaChmaWx0ZXJzKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycy51bnNoaWZ0KC4uLmZpbHRlcnMpO1xuICAgIH1cbiAgICBnZXRGaWx0ZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJzO1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsdGVyU3RhY2sgPSBGaWx0ZXJTdGFjaztcbmNsYXNzIEZpbHRlclN0YWNrRmFjdG9yeSB7XG4gICAgY29uc3RydWN0b3IoZmFjdG9yaWVzKSB7XG4gICAgICAgIHRoaXMuZmFjdG9yaWVzID0gZmFjdG9yaWVzO1xuICAgIH1cbiAgICBwdXNoKGZpbHRlckZhY3Rvcmllcykge1xuICAgICAgICB0aGlzLmZhY3Rvcmllcy51bnNoaWZ0KC4uLmZpbHRlckZhY3Rvcmllcyk7XG4gICAgfVxuICAgIGNyZWF0ZUZpbHRlcihjYWxsU3RyZWFtKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsdGVyU3RhY2sodGhpcy5mYWN0b3JpZXMubWFwKChmYWN0b3J5KSA9PiBmYWN0b3J5LmNyZWF0ZUZpbHRlcihjYWxsU3RyZWFtKSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsdGVyU3RhY2tGYWN0b3J5ID0gRmlsdGVyU3RhY2tGYWN0b3J5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLXN0YWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkZpbHRlclN0YWNrRmFjdG9yeSIsIkZpbHRlclN0YWNrIiwiY29uc3RydWN0b3IiLCJmaWx0ZXJzIiwic2VuZE1ldGFkYXRhIiwibWV0YWRhdGEiLCJyZXN1bHQiLCJpIiwibGVuZ3RoIiwicmVjZWl2ZU1ldGFkYXRhIiwic2VuZE1lc3NhZ2UiLCJtZXNzYWdlIiwicmVjZWl2ZU1lc3NhZ2UiLCJyZWNlaXZlVHJhaWxlcnMiLCJzdGF0dXMiLCJyZWZyZXNoIiwiZmlsdGVyIiwicHVzaCIsInVuc2hpZnQiLCJnZXRGaWx0ZXJzIiwiZmFjdG9yaWVzIiwiZmlsdGVyRmFjdG9yaWVzIiwiY3JlYXRlRmlsdGVyIiwiY2FsbFN0cmVhbSIsIm1hcCIsImZhY3RvcnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/filter.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseFilter = void 0;\nclass BaseFilter {\n    async sendMetadata(metadata) {\n        return metadata;\n    }\n    receiveMetadata(metadata) {\n        return metadata;\n    }\n    async sendMessage(message) {\n        return message;\n    }\n    async receiveMessage(message) {\n        return message;\n    }\n    receiveTrailers(status) {\n        return status;\n    }\n    refresh() {}\n}\nexports.BaseFilter = BaseFilter; //# sourceMappingURL=filter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1FO0lBQ0YsTUFBTUMsYUFBYUMsUUFBUSxFQUFFO1FBQ3pCLE9BQU9BO0lBQ1g7SUFDQUMsZ0JBQWdCRCxRQUFRLEVBQUU7UUFDdEIsT0FBT0E7SUFDWDtJQUNBLE1BQU1FLFlBQVlDLE9BQU8sRUFBRTtRQUN2QixPQUFPQTtJQUNYO0lBQ0EsTUFBTUMsZUFBZUQsT0FBTyxFQUFFO1FBQzFCLE9BQU9BO0lBQ1g7SUFDQUUsZ0JBQWdCQyxNQUFNLEVBQUU7UUFDcEIsT0FBT0E7SUFDWDtJQUNBQyxVQUFVLENBQUU7QUFDaEI7QUFDQVgsa0JBQWtCLEdBQUdFLFlBQ3JCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2ZpbHRlci5qcz8wZjMxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJhc2VGaWx0ZXIgPSB2b2lkIDA7XG5jbGFzcyBCYXNlRmlsdGVyIHtcbiAgICBhc3luYyBzZW5kTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xuICAgIH1cbiAgICByZWNlaXZlTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xuICAgIH1cbiAgICBhc3luYyBzZW5kTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBhc3luYyByZWNlaXZlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICByZWNlaXZlVHJhaWxlcnMoc3RhdHVzKSB7XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxuICAgIHJlZnJlc2goKSB7IH1cbn1cbmV4cG9ydHMuQmFzZUZpbHRlciA9IEJhc2VGaWx0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQmFzZUZpbHRlciIsInNlbmRNZXRhZGF0YSIsIm1ldGFkYXRhIiwicmVjZWl2ZU1ldGFkYXRhIiwic2VuZE1lc3NhZ2UiLCJtZXNzYWdlIiwicmVjZWl2ZU1lc3NhZ2UiLCJyZWNlaXZlVHJhaWxlcnMiLCJzdGF0dXMiLCJyZWZyZXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/http_proxy.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getProxiedConnection = exports.mapProxyName = void 0;\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst TRACER_NAME = \"proxy\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nfunction getProxyInfo() {\n    let proxyEnv = \"\";\n    let envVar = \"\";\n    /* Prefer using 'grpc_proxy'. Fallback on 'http_proxy' if it is not set.\n     * Also prefer using 'https_proxy' with fallback on 'http_proxy'. The\n     * fallback behavior can be removed if there's a demand for it.\n     */ if (process.env.grpc_proxy) {\n        envVar = \"grpc_proxy\";\n        proxyEnv = process.env.grpc_proxy;\n    } else if (process.env.https_proxy) {\n        envVar = \"https_proxy\";\n        proxyEnv = process.env.https_proxy;\n    } else if (process.env.http_proxy) {\n        envVar = \"http_proxy\";\n        proxyEnv = process.env.http_proxy;\n    } else {\n        return {};\n    }\n    let proxyUrl;\n    try {\n        proxyUrl = new url_1.URL(proxyEnv);\n    } catch (e) {\n        logging_1.log(constants_1.LogVerbosity.ERROR, `cannot parse value of \"${envVar}\" env var`);\n        return {};\n    }\n    if (proxyUrl.protocol !== \"http:\") {\n        logging_1.log(constants_1.LogVerbosity.ERROR, `\"${proxyUrl.protocol}\" scheme not supported in proxy URI`);\n        return {};\n    }\n    let userCred = null;\n    if (proxyUrl.username) {\n        if (proxyUrl.password) {\n            logging_1.log(constants_1.LogVerbosity.INFO, \"userinfo found in proxy URI\");\n            userCred = `${proxyUrl.username}:${proxyUrl.password}`;\n        } else {\n            userCred = proxyUrl.username;\n        }\n    }\n    const hostname = proxyUrl.hostname;\n    let port = proxyUrl.port;\n    /* The proxy URL uses the scheme \"http:\", which has a default port number of\n     * 80. We need to set that explicitly here if it is omitted because otherwise\n     * it will use gRPC's default port 443. */ if (port === \"\") {\n        port = \"80\";\n    }\n    const result = {\n        address: `${hostname}:${port}`\n    };\n    if (userCred) {\n        result.creds = userCred;\n    }\n    trace(\"Proxy server \" + result.address + \" set by environment variable \" + envVar);\n    return result;\n}\nfunction getNoProxyHostList() {\n    /* Prefer using 'no_grpc_proxy'. Fallback on 'no_proxy' if it is not set. */ let noProxyStr = process.env.no_grpc_proxy;\n    let envVar = \"no_grpc_proxy\";\n    if (!noProxyStr) {\n        noProxyStr = process.env.no_proxy;\n        envVar = \"no_proxy\";\n    }\n    if (noProxyStr) {\n        trace(\"No proxy server list set by environment variable \" + envVar);\n        return noProxyStr.split(\",\");\n    } else {\n        return [];\n    }\n}\nfunction mapProxyName(target, options) {\n    var _a;\n    const noProxyResult = {\n        target: target,\n        extraOptions: {}\n    };\n    if (((_a = options[\"grpc.enable_http_proxy\"]) !== null && _a !== void 0 ? _a : 1) === 0) {\n        return noProxyResult;\n    }\n    if (target.scheme === \"unix\") {\n        return noProxyResult;\n    }\n    const proxyInfo = getProxyInfo();\n    if (!proxyInfo.address) {\n        return noProxyResult;\n    }\n    const hostPort = uri_parser_1.splitHostPort(target.path);\n    if (!hostPort) {\n        return noProxyResult;\n    }\n    const serverHost = hostPort.host;\n    for (const host of getNoProxyHostList()){\n        if (host === serverHost) {\n            trace(\"Not using proxy for target in no_proxy list: \" + uri_parser_1.uriToString(target));\n            return noProxyResult;\n        }\n    }\n    const extraOptions = {\n        \"grpc.http_connect_target\": uri_parser_1.uriToString(target)\n    };\n    if (proxyInfo.creds) {\n        extraOptions[\"grpc.http_connect_creds\"] = proxyInfo.creds;\n    }\n    return {\n        target: {\n            scheme: \"dns\",\n            path: proxyInfo.address\n        },\n        extraOptions: extraOptions\n    };\n}\nexports.mapProxyName = mapProxyName;\nfunction getProxiedConnection(address, channelOptions, connectionOptions) {\n    if (!(\"grpc.http_connect_target\" in channelOptions)) {\n        return Promise.resolve({});\n    }\n    const realTarget = channelOptions[\"grpc.http_connect_target\"];\n    const parsedTarget = uri_parser_1.parseUri(realTarget);\n    if (parsedTarget === null) {\n        return Promise.resolve({});\n    }\n    const options = {\n        method: \"CONNECT\",\n        path: parsedTarget.path\n    };\n    const headers = {\n        Host: parsedTarget.path\n    };\n    // Connect to the subchannel address as a proxy\n    if (subchannel_address_1.isTcpSubchannelAddress(address)) {\n        options.host = address.host;\n        options.port = address.port;\n    } else {\n        options.socketPath = address.path;\n    }\n    if (\"grpc.http_connect_creds\" in channelOptions) {\n        headers[\"Proxy-Authorization\"] = \"Basic \" + Buffer.from(channelOptions[\"grpc.http_connect_creds\"]).toString(\"base64\");\n    }\n    options.headers = headers;\n    const proxyAddressString = subchannel_address_1.subchannelAddressToString(address);\n    trace(\"Using proxy \" + proxyAddressString + \" to connect to \" + options.path);\n    return new Promise((resolve, reject)=>{\n        const request = http.request(options);\n        request.once(\"connect\", (res, socket, head)=>{\n            var _a;\n            request.removeAllListeners();\n            socket.removeAllListeners();\n            if (res.statusCode === 200) {\n                trace(\"Successfully connected to \" + options.path + \" through proxy \" + proxyAddressString);\n                if (\"secureContext\" in connectionOptions) {\n                    /* The proxy is connecting to a TLS server, so upgrade this socket\n                     * connection to a TLS connection.\n                     * This is a workaround for https://github.com/nodejs/node/issues/32922\n                     * See https://github.com/grpc/grpc-node/pull/1369 for more info. */ const targetPath = resolver_1.getDefaultAuthority(parsedTarget);\n                    const hostPort = uri_parser_1.splitHostPort(targetPath);\n                    const remoteHost = (_a = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _a !== void 0 ? _a : targetPath;\n                    const cts = tls.connect(Object.assign({\n                        host: remoteHost,\n                        servername: remoteHost,\n                        socket: socket\n                    }, connectionOptions), ()=>{\n                        trace(\"Successfully established a TLS connection to \" + options.path + \" through proxy \" + proxyAddressString);\n                        resolve({\n                            socket: cts,\n                            realTarget: parsedTarget\n                        });\n                    });\n                    cts.on(\"error\", (error)=>{\n                        trace(\"Failed to establish a TLS connection to \" + options.path + \" through proxy \" + proxyAddressString + \" with error \" + error.message);\n                        reject();\n                    });\n                } else {\n                    trace(\"Successfully established a plaintext connection to \" + options.path + \" through proxy \" + proxyAddressString);\n                    resolve({\n                        socket,\n                        realTarget: parsedTarget\n                    });\n                }\n            } else {\n                logging_1.log(constants_1.LogVerbosity.ERROR, \"Failed to connect to \" + options.path + \" through proxy \" + proxyAddressString + \" with status \" + res.statusCode);\n                reject();\n            }\n        });\n        request.once(\"error\", (err)=>{\n            request.removeAllListeners();\n            logging_1.log(constants_1.LogVerbosity.ERROR, \"Failed to connect to proxy \" + proxyAddressString + \" with error \" + err.message);\n            reject();\n        });\n        request.end();\n    });\n}\nexports.getProxiedConnection = getProxiedConnection; //# sourceMappingURL=http_proxy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.experimental = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.compressionAlgorithms = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\nObject.defineProperty(exports, \"CallCredentials\", ({\n    enumerable: true,\n    get: function() {\n        return call_credentials_1.CallCredentials;\n    }\n}));\nconst channel_1 = __webpack_require__(/*! ./channel */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel.js\");\nObject.defineProperty(exports, \"Channel\", ({\n    enumerable: true,\n    get: function() {\n        return channel_1.ChannelImplementation;\n    }\n}));\nconst compression_algorithms_1 = __webpack_require__(/*! ./compression-algorithms */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\");\nObject.defineProperty(exports, \"compressionAlgorithms\", ({\n    enumerable: true,\n    get: function() {\n        return compression_algorithms_1.CompressionAlgorithms;\n    }\n}));\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nObject.defineProperty(exports, \"connectivityState\", ({\n    enumerable: true,\n    get: function() {\n        return connectivity_state_1.ConnectivityState;\n    }\n}));\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\nObject.defineProperty(exports, \"ChannelCredentials\", ({\n    enumerable: true,\n    get: function() {\n        return channel_credentials_1.ChannelCredentials;\n    }\n}));\nconst client_1 = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/client.js\");\nObject.defineProperty(exports, \"Client\", ({\n    enumerable: true,\n    get: function() {\n        return client_1.Client;\n    }\n}));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nObject.defineProperty(exports, \"logVerbosity\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.LogVerbosity;\n    }\n}));\nObject.defineProperty(exports, \"status\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.Status;\n    }\n}));\nObject.defineProperty(exports, \"propagate\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.Propagate;\n    }\n}));\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst make_client_1 = __webpack_require__(/*! ./make-client */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/make-client.js\");\nObject.defineProperty(exports, \"loadPackageDefinition\", ({\n    enumerable: true,\n    get: function() {\n        return make_client_1.loadPackageDefinition;\n    }\n}));\nObject.defineProperty(exports, \"makeClientConstructor\", ({\n    enumerable: true,\n    get: function() {\n        return make_client_1.makeClientConstructor;\n    }\n}));\nObject.defineProperty(exports, \"makeGenericClientConstructor\", ({\n    enumerable: true,\n    get: function() {\n        return make_client_1.makeClientConstructor;\n    }\n}));\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nObject.defineProperty(exports, \"Metadata\", ({\n    enumerable: true,\n    get: function() {\n        return metadata_1.Metadata;\n    }\n}));\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/server.js\");\nObject.defineProperty(exports, \"Server\", ({\n    enumerable: true,\n    get: function() {\n        return server_1.Server;\n    }\n}));\nconst server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\nObject.defineProperty(exports, \"ServerCredentials\", ({\n    enumerable: true,\n    get: function() {\n        return server_credentials_1.ServerCredentials;\n    }\n}));\nconst status_builder_1 = __webpack_require__(/*! ./status-builder */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/status-builder.js\");\nObject.defineProperty(exports, \"StatusBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return status_builder_1.StatusBuilder;\n    }\n}));\n/**** Client Credentials ****/ // Using assign only copies enumerable properties, which is what we want\nexports.credentials = {\n    /**\n     * Combine a ChannelCredentials with any number of CallCredentials into a\n     * single ChannelCredentials object.\n     * @param channelCredentials The ChannelCredentials object.\n     * @param callCredentials Any number of CallCredentials objects.\n     * @return The resulting ChannelCredentials object.\n     */ combineChannelCredentials: (channelCredentials, ...callCredentials)=>{\n        return callCredentials.reduce((acc, other)=>acc.compose(other), channelCredentials);\n    },\n    /**\n     * Combine any number of CallCredentials into a single CallCredentials\n     * object.\n     * @param first The first CallCredentials object.\n     * @param additional Any number of additional CallCredentials objects.\n     * @return The resulting CallCredentials object.\n     */ combineCallCredentials: (first, ...additional)=>{\n        return additional.reduce((acc, other)=>acc.compose(other), first);\n    },\n    // from channel-credentials.ts\n    createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,\n    createSsl: channel_credentials_1.ChannelCredentials.createSsl,\n    createFromSecureContext: channel_credentials_1.ChannelCredentials.createFromSecureContext,\n    // from call-credentials.ts\n    createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,\n    createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,\n    createEmpty: call_credentials_1.CallCredentials.createEmpty\n};\n/**\n * Close a Client object.\n * @param client The client to close.\n */ exports.closeClient = (client)=>client.close();\nexports.waitForClientReady = (client, deadline, callback)=>client.waitForReady(deadline, callback);\n/* eslint-enable @typescript-eslint/no-explicit-any */ /**** Unimplemented function stubs ****/ /* eslint-disable @typescript-eslint/no-explicit-any */ exports.loadObject = (value, options)=>{\n    throw new Error(\"Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead\");\n};\nexports.load = (filename, format, options)=>{\n    throw new Error(\"Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead\");\n};\nexports.setLogger = (logger)=>{\n    logging.setLogger(logger);\n};\nexports.setLogVerbosity = (verbosity)=>{\n    logging.setLoggerVerbosity(verbosity);\n};\nexports.getClientChannel = (client)=>{\n    return client_1.Client.prototype.getChannel.call(client);\n};\nvar client_interceptors_1 = __webpack_require__(/*! ./client-interceptors */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\");\nObject.defineProperty(exports, \"ListenerBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return client_interceptors_1.ListenerBuilder;\n    }\n}));\nObject.defineProperty(exports, \"RequesterBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return client_interceptors_1.RequesterBuilder;\n    }\n}));\nObject.defineProperty(exports, \"InterceptingCall\", ({\n    enumerable: true,\n    get: function() {\n        return client_interceptors_1.InterceptingCall;\n    }\n}));\nObject.defineProperty(exports, \"InterceptorConfigurationError\", ({\n    enumerable: true,\n    get: function() {\n        return client_interceptors_1.InterceptorConfigurationError;\n    }\n}));\nvar channelz_1 = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\nObject.defineProperty(exports, \"getChannelzServiceDefinition\", ({\n    enumerable: true,\n    get: function() {\n        return channelz_1.getChannelzServiceDefinition;\n    }\n}));\nObject.defineProperty(exports, \"getChannelzHandlers\", ({\n    enumerable: true,\n    get: function() {\n        return channelz_1.getChannelzHandlers;\n    }\n}));\nvar admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\nObject.defineProperty(exports, \"addAdminServicesToServer\", ({\n    enumerable: true,\n    get: function() {\n        return admin_1.addAdminServicesToServer;\n    }\n}));\nconst experimental = __webpack_require__(/*! ./experimental */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/experimental.js\");\nexports.experimental = experimental;\nconst resolver_dns = __webpack_require__(/*! ./resolver-dns */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\");\nconst resolver_uds = __webpack_require__(/*! ./resolver-uds */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js\");\nconst resolver_ip = __webpack_require__(/*! ./resolver-ip */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js\");\nconst load_balancer_pick_first = __webpack_require__(/*! ./load-balancer-pick-first */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\nconst load_balancer_round_robin = __webpack_require__(/*! ./load-balancer-round-robin */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js\");\nconst load_balancer_outlier_detection = __webpack_require__(/*! ./load-balancer-outlier-detection */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\");\nconst channelz = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst clientVersion = (__webpack_require__(/*! ../../package.json */ \"(ssr)/./node_modules/@grpc/grpc-js/package.json\").version);\n(()=>{\n    logging.trace(constants_1.LogVerbosity.DEBUG, \"index\", \"Loading @grpc/grpc-js version \" + clientVersion);\n    resolver_dns.setup();\n    resolver_uds.setup();\n    resolver_ip.setup();\n    load_balancer_pick_first.setup();\n    load_balancer_round_robin.setup();\n    load_balancer_outlier_detection.setup();\n    channelz.setup();\n})(); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChildLoadBalancerHandler = void 0;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst TYPE_NAME = \"child_load_balancer_helper\";\nclass ChildLoadBalancerHandler {\n    constructor(channelControlHelper){\n        this.channelControlHelper = channelControlHelper;\n        this.currentChild = null;\n        this.pendingChild = null;\n        this.ChildPolicyHelper = class {\n            constructor(parent){\n                this.parent = parent;\n                this.child = null;\n            }\n            createSubchannel(subchannelAddress, subchannelArgs) {\n                return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\n            }\n            updateState(connectivityState, picker) {\n                var _a;\n                if (this.calledByPendingChild()) {\n                    if (connectivityState === connectivity_state_1.ConnectivityState.CONNECTING) {\n                        return;\n                    }\n                    (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();\n                    this.parent.currentChild = this.parent.pendingChild;\n                    this.parent.pendingChild = null;\n                } else if (!this.calledByCurrentChild()) {\n                    return;\n                }\n                this.parent.channelControlHelper.updateState(connectivityState, picker);\n            }\n            requestReresolution() {\n                var _a;\n                const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;\n                if (this.child === latestChild) {\n                    this.parent.channelControlHelper.requestReresolution();\n                }\n            }\n            setChild(newChild) {\n                this.child = newChild;\n            }\n            addChannelzChild(child) {\n                this.parent.channelControlHelper.addChannelzChild(child);\n            }\n            removeChannelzChild(child) {\n                this.parent.channelControlHelper.removeChannelzChild(child);\n            }\n            calledByPendingChild() {\n                return this.child === this.parent.pendingChild;\n            }\n            calledByCurrentChild() {\n                return this.child === this.parent.currentChild;\n            }\n        };\n    }\n    /**\n     * Prerequisites: lbConfig !== null and lbConfig.name is registered\n     * @param addressList\n     * @param lbConfig\n     * @param attributes\n     */ updateAddressList(addressList, lbConfig, attributes) {\n        let childToUpdate;\n        if (this.currentChild === null || this.currentChild.getTypeName() !== lbConfig.getLoadBalancerName()) {\n            const newHelper = new this.ChildPolicyHelper(this);\n            const newChild = load_balancer_1.createLoadBalancer(lbConfig, newHelper);\n            newHelper.setChild(newChild);\n            if (this.currentChild === null) {\n                this.currentChild = newChild;\n                childToUpdate = this.currentChild;\n            } else {\n                if (this.pendingChild) {\n                    this.pendingChild.destroy();\n                }\n                this.pendingChild = newChild;\n                childToUpdate = this.pendingChild;\n            }\n        } else {\n            if (this.pendingChild === null) {\n                childToUpdate = this.currentChild;\n            } else {\n                childToUpdate = this.pendingChild;\n            }\n        }\n        childToUpdate.updateAddressList(addressList, lbConfig, attributes);\n    }\n    exitIdle() {\n        if (this.currentChild) {\n            this.currentChild.exitIdle();\n            if (this.pendingChild) {\n                this.pendingChild.exitIdle();\n            }\n        }\n    }\n    resetBackoff() {\n        if (this.currentChild) {\n            this.currentChild.resetBackoff();\n            if (this.pendingChild) {\n                this.pendingChild.resetBackoff();\n            }\n        }\n    }\n    destroy() {\n        if (this.currentChild) {\n            this.currentChild.destroy();\n            this.currentChild = null;\n        }\n        if (this.pendingChild) {\n            this.pendingChild.destroy();\n            this.pendingChild = null;\n        }\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.ChildLoadBalancerHandler = ChildLoadBalancerHandler; //# sourceMappingURL=load-balancer-child-handler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ var _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setup = exports.OutlierDetectionLoadBalancer = exports.OutlierDetectionLoadBalancingConfig = void 0;\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst duration_1 = __webpack_require__(/*! ./duration */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/duration.js\");\nconst experimental_1 = __webpack_require__(/*! ./experimental */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/experimental.js\");\nconst filter_1 = __webpack_require__(/*! ./filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = \"outlier_detection\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = \"outlier_detection\";\nconst OUTLIER_DETECTION_ENABLED = ((_a = process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION) !== null && _a !== void 0 ? _a : \"true\") === \"true\";\nconst defaultSuccessRateEjectionConfig = {\n    stdev_factor: 1900,\n    enforcement_percentage: 100,\n    minimum_hosts: 5,\n    request_volume: 100\n};\nconst defaultFailurePercentageEjectionConfig = {\n    threshold: 85,\n    enforcement_percentage: 100,\n    minimum_hosts: 5,\n    request_volume: 50\n};\nfunction validateFieldType(obj, fieldName, expectedType, objectName) {\n    if (fieldName in obj && typeof obj[fieldName] !== expectedType) {\n        const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n        throw new Error(`outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[fieldName]}`);\n    }\n}\nfunction validatePositiveDuration(obj, fieldName, objectName) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    if (fieldName in obj) {\n        if (!duration_1.isDuration(obj[fieldName])) {\n            throw new Error(`outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[fieldName]}`);\n        }\n        if (!(obj[fieldName].seconds >= 0 && obj[fieldName].seconds <= 315576000000 && obj[fieldName].nanos >= 0 && obj[fieldName].nanos <= 999999999)) {\n            throw new Error(`outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`);\n        }\n    }\n}\nfunction validatePercentage(obj, fieldName, objectName) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    validateFieldType(obj, fieldName, \"number\", objectName);\n    if (fieldName in obj && !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {\n        throw new Error(`outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`);\n    }\n}\nclass OutlierDetectionLoadBalancingConfig {\n    constructor(intervalMs, baseEjectionTimeMs, maxEjectionTimeMs, maxEjectionPercent, successRateEjection, failurePercentageEjection, childPolicy){\n        this.childPolicy = childPolicy;\n        this.intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 10000;\n        this.baseEjectionTimeMs = baseEjectionTimeMs !== null && baseEjectionTimeMs !== void 0 ? baseEjectionTimeMs : 30000;\n        this.maxEjectionTimeMs = maxEjectionTimeMs !== null && maxEjectionTimeMs !== void 0 ? maxEjectionTimeMs : 300000;\n        this.maxEjectionPercent = maxEjectionPercent !== null && maxEjectionPercent !== void 0 ? maxEjectionPercent : 10;\n        this.successRateEjection = successRateEjection ? Object.assign(Object.assign({}, defaultSuccessRateEjectionConfig), successRateEjection) : null;\n        this.failurePercentageEjection = failurePercentageEjection ? Object.assign(Object.assign({}, defaultFailurePercentageEjectionConfig), failurePercentageEjection) : null;\n    }\n    getLoadBalancerName() {\n        return TYPE_NAME;\n    }\n    toJsonObject() {\n        return {\n            interval: duration_1.msToDuration(this.intervalMs),\n            base_ejection_time: duration_1.msToDuration(this.baseEjectionTimeMs),\n            max_ejection_time: duration_1.msToDuration(this.maxEjectionTimeMs),\n            max_ejection_percent: this.maxEjectionPercent,\n            success_rate_ejection: this.successRateEjection,\n            failure_percentage_ejection: this.failurePercentageEjection,\n            child_policy: this.childPolicy.map((policy)=>policy.toJsonObject())\n        };\n    }\n    getIntervalMs() {\n        return this.intervalMs;\n    }\n    getBaseEjectionTimeMs() {\n        return this.baseEjectionTimeMs;\n    }\n    getMaxEjectionTimeMs() {\n        return this.maxEjectionTimeMs;\n    }\n    getMaxEjectionPercent() {\n        return this.maxEjectionPercent;\n    }\n    getSuccessRateEjectionConfig() {\n        return this.successRateEjection;\n    }\n    getFailurePercentageEjectionConfig() {\n        return this.failurePercentageEjection;\n    }\n    getChildPolicy() {\n        return this.childPolicy;\n    }\n    copyWithChildPolicy(childPolicy) {\n        return new OutlierDetectionLoadBalancingConfig(this.intervalMs, this.baseEjectionTimeMs, this.maxEjectionTimeMs, this.maxEjectionPercent, this.successRateEjection, this.failurePercentageEjection, childPolicy);\n    }\n    static createFromJson(obj) {\n        var _a;\n        validatePositiveDuration(obj, \"interval\");\n        validatePositiveDuration(obj, \"base_ejection_time\");\n        validatePositiveDuration(obj, \"max_ejection_time\");\n        validatePercentage(obj, \"max_ejection_percent\");\n        if (\"success_rate_ejection\" in obj) {\n            if (typeof obj.success_rate_ejection !== \"object\") {\n                throw new Error(\"outlier detection config success_rate_ejection must be an object\");\n            }\n            validateFieldType(obj.success_rate_ejection, \"stdev_factor\", \"number\", \"success_rate_ejection\");\n            validatePercentage(obj.success_rate_ejection, \"enforcement_percentage\", \"success_rate_ejection\");\n            validateFieldType(obj.success_rate_ejection, \"minimum_hosts\", \"number\", \"success_rate_ejection\");\n            validateFieldType(obj.success_rate_ejection, \"request_volume\", \"number\", \"success_rate_ejection\");\n        }\n        if (\"failure_percentage_ejection\" in obj) {\n            if (typeof obj.failure_percentage_ejection !== \"object\") {\n                throw new Error(\"outlier detection config failure_percentage_ejection must be an object\");\n            }\n            validatePercentage(obj.failure_percentage_ejection, \"threshold\", \"failure_percentage_ejection\");\n            validatePercentage(obj.failure_percentage_ejection, \"enforcement_percentage\", \"failure_percentage_ejection\");\n            validateFieldType(obj.failure_percentage_ejection, \"minimum_hosts\", \"number\", \"failure_percentage_ejection\");\n            validateFieldType(obj.failure_percentage_ejection, \"request_volume\", \"number\", \"failure_percentage_ejection\");\n        }\n        return new OutlierDetectionLoadBalancingConfig(obj.interval ? duration_1.durationToMs(obj.interval) : null, obj.base_ejection_time ? duration_1.durationToMs(obj.base_ejection_time) : null, obj.max_ejection_time ? duration_1.durationToMs(obj.max_ejection_time) : null, (_a = obj.max_ejection_percent) !== null && _a !== void 0 ? _a : null, obj.success_rate_ejection, obj.failure_percentage_ejection, obj.child_policy.map(load_balancer_1.validateLoadBalancingConfig));\n    }\n}\nexports.OutlierDetectionLoadBalancingConfig = OutlierDetectionLoadBalancingConfig;\nclass OutlierDetectionSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n    constructor(childSubchannel, mapEntry){\n        super(childSubchannel);\n        this.mapEntry = mapEntry;\n        this.stateListeners = [];\n        this.ejected = false;\n        this.refCount = 0;\n        this.childSubchannelState = childSubchannel.getConnectivityState();\n        childSubchannel.addConnectivityStateListener((subchannel, previousState, newState)=>{\n            this.childSubchannelState = newState;\n            if (!this.ejected) {\n                for (const listener of this.stateListeners){\n                    listener(this, previousState, newState);\n                }\n            }\n        });\n    }\n    getConnectivityState() {\n        if (this.ejected) {\n            return connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE;\n        } else {\n            return this.childSubchannelState;\n        }\n    }\n    /**\n     * Add a listener function to be called whenever the wrapper's\n     * connectivity state changes.\n     * @param listener\n     */ addConnectivityStateListener(listener) {\n        this.stateListeners.push(listener);\n    }\n    /**\n     * Remove a listener previously added with `addConnectivityStateListener`\n     * @param listener A reference to a function previously passed to\n     *     `addConnectivityStateListener`\n     */ removeConnectivityStateListener(listener) {\n        const listenerIndex = this.stateListeners.indexOf(listener);\n        if (listenerIndex > -1) {\n            this.stateListeners.splice(listenerIndex, 1);\n        }\n    }\n    ref() {\n        this.child.ref();\n        this.refCount += 1;\n    }\n    unref() {\n        this.child.unref();\n        this.refCount -= 1;\n        if (this.refCount <= 0) {\n            if (this.mapEntry) {\n                const index = this.mapEntry.subchannelWrappers.indexOf(this);\n                if (index >= 0) {\n                    this.mapEntry.subchannelWrappers.splice(index, 1);\n                }\n            }\n        }\n    }\n    eject() {\n        this.ejected = true;\n        for (const listener of this.stateListeners){\n            listener(this, this.childSubchannelState, connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE);\n        }\n    }\n    uneject() {\n        this.ejected = false;\n        for (const listener of this.stateListeners){\n            listener(this, connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, this.childSubchannelState);\n        }\n    }\n    getMapEntry() {\n        return this.mapEntry;\n    }\n    getWrappedSubchannel() {\n        return this.child;\n    }\n}\nfunction createEmptyBucket() {\n    return {\n        success: 0,\n        failure: 0\n    };\n}\nclass CallCounter {\n    constructor(){\n        this.activeBucket = createEmptyBucket();\n        this.inactiveBucket = createEmptyBucket();\n    }\n    addSuccess() {\n        this.activeBucket.success += 1;\n    }\n    addFailure() {\n        this.activeBucket.failure += 1;\n    }\n    switchBuckets() {\n        this.inactiveBucket = this.activeBucket;\n        this.activeBucket = createEmptyBucket();\n    }\n    getLastSuccesses() {\n        return this.inactiveBucket.success;\n    }\n    getLastFailures() {\n        return this.inactiveBucket.failure;\n    }\n}\nclass OutlierDetectionCounterFilter extends filter_1.BaseFilter {\n    constructor(callCounter){\n        super();\n        this.callCounter = callCounter;\n    }\n    receiveTrailers(status) {\n        if (status.code === constants_1.Status.OK) {\n            this.callCounter.addSuccess();\n        } else {\n            this.callCounter.addFailure();\n        }\n        return status;\n    }\n}\nclass OutlierDetectionCounterFilterFactory {\n    constructor(callCounter){\n        this.callCounter = callCounter;\n    }\n    createFilter(callStream) {\n        return new OutlierDetectionCounterFilter(this.callCounter);\n    }\n}\nclass OutlierDetectionPicker {\n    constructor(wrappedPicker, countCalls){\n        this.wrappedPicker = wrappedPicker;\n        this.countCalls = countCalls;\n    }\n    pick(pickArgs) {\n        const wrappedPick = this.wrappedPicker.pick(pickArgs);\n        if (wrappedPick.pickResultType === picker_1.PickResultType.COMPLETE) {\n            const subchannelWrapper = wrappedPick.subchannel;\n            const mapEntry = subchannelWrapper.getMapEntry();\n            if (mapEntry) {\n                const extraFilterFactories = [\n                    ...wrappedPick.extraFilterFactories\n                ];\n                if (this.countCalls) {\n                    extraFilterFactories.push(new OutlierDetectionCounterFilterFactory(mapEntry.counter));\n                }\n                return Object.assign(Object.assign({}, wrappedPick), {\n                    subchannel: subchannelWrapper.getWrappedSubchannel(),\n                    extraFilterFactories: extraFilterFactories\n                });\n            } else {\n                return Object.assign(Object.assign({}, wrappedPick), {\n                    subchannel: subchannelWrapper.getWrappedSubchannel()\n                });\n            }\n        } else {\n            return wrappedPick;\n        }\n    }\n}\nclass OutlierDetectionLoadBalancer {\n    constructor(channelControlHelper){\n        this.addressMap = new Map();\n        this.latestConfig = null;\n        this.timerStartTime = null;\n        this.childBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler(experimental_1.createChildChannelControlHelper(channelControlHelper, {\n            createSubchannel: (subchannelAddress, subchannelArgs)=>{\n                const originalSubchannel = channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\n                const mapEntry = this.addressMap.get(subchannel_address_1.subchannelAddressToString(subchannelAddress));\n                const subchannelWrapper = new OutlierDetectionSubchannelWrapper(originalSubchannel, mapEntry);\n                if ((mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.currentEjectionTimestamp) !== null) {\n                    // If the address is ejected, propagate that to the new subchannel wrapper\n                    subchannelWrapper.eject();\n                }\n                mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.subchannelWrappers.push(subchannelWrapper);\n                return subchannelWrapper;\n            },\n            updateState: (connectivityState, picker)=>{\n                if (connectivityState === connectivity_state_1.ConnectivityState.READY) {\n                    channelControlHelper.updateState(connectivityState, new OutlierDetectionPicker(picker, this.isCountingEnabled()));\n                } else {\n                    channelControlHelper.updateState(connectivityState, picker);\n                }\n            }\n        }));\n        this.ejectionTimer = setInterval(()=>{}, 0);\n        clearInterval(this.ejectionTimer);\n    }\n    isCountingEnabled() {\n        return this.latestConfig !== null && (this.latestConfig.getSuccessRateEjectionConfig() !== null || this.latestConfig.getFailurePercentageEjectionConfig() !== null);\n    }\n    getCurrentEjectionPercent() {\n        let ejectionCount = 0;\n        for (const mapEntry of this.addressMap.values()){\n            if (mapEntry.currentEjectionTimestamp !== null) {\n                ejectionCount += 1;\n            }\n        }\n        return ejectionCount * 100 / this.addressMap.size;\n    }\n    runSuccessRateCheck(ejectionTimestamp) {\n        if (!this.latestConfig) {\n            return;\n        }\n        const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();\n        if (!successRateConfig) {\n            return;\n        }\n        trace(\"Running success rate check\");\n        // Step 1\n        const targetRequestVolume = successRateConfig.request_volume;\n        let addresesWithTargetVolume = 0;\n        const successRates = [];\n        for (const mapEntry of this.addressMap.values()){\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            if (successes + failures >= targetRequestVolume) {\n                addresesWithTargetVolume += 1;\n                successRates.push(successes / (successes + failures));\n            }\n        }\n        trace(\"Found \" + addresesWithTargetVolume + \" success rate candidates; currentEjectionPercent=\" + this.getCurrentEjectionPercent() + \" successRates=[\" + successRates + \"]\");\n        if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {\n            return;\n        }\n        // Step 2\n        const successRateMean = successRates.reduce((a, b)=>a + b) / successRates.length;\n        let successRateDeviationSum = 0;\n        for (const rate of successRates){\n            const deviation = rate - successRateMean;\n            successRateDeviationSum += deviation * deviation;\n        }\n        const successRateVariance = successRateDeviationSum / successRates.length;\n        const successRateStdev = Math.sqrt(successRateVariance);\n        const ejectionThreshold = successRateMean - successRateStdev * (successRateConfig.stdev_factor / 1000);\n        trace(\"stdev=\" + successRateStdev + \" ejectionThreshold=\" + ejectionThreshold);\n        // Step 3\n        for (const [address, mapEntry] of this.addressMap.entries()){\n            // Step 3.i\n            if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {\n                break;\n            }\n            // Step 3.ii\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            if (successes + failures < targetRequestVolume) {\n                continue;\n            }\n            // Step 3.iii\n            const successRate = successes / (successes + failures);\n            trace(\"Checking candidate \" + address + \" successRate=\" + successRate);\n            if (successRate < ejectionThreshold) {\n                const randomNumber = Math.random() * 100;\n                trace(\"Candidate \" + address + \" randomNumber=\" + randomNumber + \" enforcement_percentage=\" + successRateConfig.enforcement_percentage);\n                if (randomNumber < successRateConfig.enforcement_percentage) {\n                    trace(\"Ejecting candidate \" + address);\n                    this.eject(mapEntry, ejectionTimestamp);\n                }\n            }\n        }\n    }\n    runFailurePercentageCheck(ejectionTimestamp) {\n        if (!this.latestConfig) {\n            return;\n        }\n        const failurePercentageConfig = this.latestConfig.getFailurePercentageEjectionConfig();\n        if (!failurePercentageConfig) {\n            return;\n        }\n        trace(\"Running failure percentage check. threshold=\" + failurePercentageConfig.threshold + \" request volume threshold=\" + failurePercentageConfig.request_volume);\n        // Step 1\n        let addressesWithTargetVolume = 0;\n        for (const mapEntry of this.addressMap.values()){\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            if (successes + failures >= failurePercentageConfig.request_volume) {\n                addressesWithTargetVolume += 1;\n            }\n        }\n        if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {\n            return;\n        }\n        // Step 2\n        for (const [address, mapEntry] of this.addressMap.entries()){\n            // Step 2.i\n            if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {\n                break;\n            }\n            // Step 2.ii\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            trace(\"Candidate successes=\" + successes + \" failures=\" + failures);\n            if (successes + failures < failurePercentageConfig.request_volume) {\n                continue;\n            }\n            // Step 2.iii\n            const failurePercentage = failures * 100 / (failures + successes);\n            if (failurePercentage > failurePercentageConfig.threshold) {\n                const randomNumber = Math.random() * 100;\n                trace(\"Candidate \" + address + \" randomNumber=\" + randomNumber + \" enforcement_percentage=\" + failurePercentageConfig.enforcement_percentage);\n                if (randomNumber < failurePercentageConfig.enforcement_percentage) {\n                    trace(\"Ejecting candidate \" + address);\n                    this.eject(mapEntry, ejectionTimestamp);\n                }\n            }\n        }\n    }\n    eject(mapEntry, ejectionTimestamp) {\n        mapEntry.currentEjectionTimestamp = new Date();\n        mapEntry.ejectionTimeMultiplier += 1;\n        for (const subchannelWrapper of mapEntry.subchannelWrappers){\n            subchannelWrapper.eject();\n        }\n    }\n    uneject(mapEntry) {\n        mapEntry.currentEjectionTimestamp = null;\n        for (const subchannelWrapper of mapEntry.subchannelWrappers){\n            subchannelWrapper.uneject();\n        }\n    }\n    switchAllBuckets() {\n        for (const mapEntry of this.addressMap.values()){\n            mapEntry.counter.switchBuckets();\n        }\n    }\n    startTimer(delayMs) {\n        this.ejectionTimer = setTimeout(()=>this.runChecks(), delayMs);\n    }\n    runChecks() {\n        const ejectionTimestamp = new Date();\n        trace(\"Ejection timer running\");\n        this.switchAllBuckets();\n        if (!this.latestConfig) {\n            return;\n        }\n        this.timerStartTime = ejectionTimestamp;\n        this.startTimer(this.latestConfig.getIntervalMs());\n        this.runSuccessRateCheck(ejectionTimestamp);\n        this.runFailurePercentageCheck(ejectionTimestamp);\n        for (const [address, mapEntry] of this.addressMap.entries()){\n            if (mapEntry.currentEjectionTimestamp === null) {\n                if (mapEntry.ejectionTimeMultiplier > 0) {\n                    mapEntry.ejectionTimeMultiplier -= 1;\n                }\n            } else {\n                const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();\n                const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();\n                const returnTime = new Date(mapEntry.currentEjectionTimestamp.getTime());\n                returnTime.setMilliseconds(returnTime.getMilliseconds() + Math.min(baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier, Math.max(baseEjectionTimeMs, maxEjectionTimeMs)));\n                if (returnTime < new Date()) {\n                    trace(\"Unejecting \" + address);\n                    this.uneject(mapEntry);\n                }\n            }\n        }\n    }\n    updateAddressList(addressList, lbConfig, attributes) {\n        if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {\n            return;\n        }\n        const subchannelAddresses = new Set();\n        for (const address of addressList){\n            subchannelAddresses.add(subchannel_address_1.subchannelAddressToString(address));\n        }\n        for (const address of subchannelAddresses){\n            if (!this.addressMap.has(address)) {\n                trace(\"Adding map entry for \" + address);\n                this.addressMap.set(address, {\n                    counter: new CallCounter(),\n                    currentEjectionTimestamp: null,\n                    ejectionTimeMultiplier: 0,\n                    subchannelWrappers: []\n                });\n            }\n        }\n        for (const key of this.addressMap.keys()){\n            if (!subchannelAddresses.has(key)) {\n                trace(\"Removing map entry for \" + key);\n                this.addressMap.delete(key);\n            }\n        }\n        const childPolicy = load_balancer_1.getFirstUsableConfig(lbConfig.getChildPolicy(), true);\n        this.childBalancer.updateAddressList(addressList, childPolicy, attributes);\n        if (lbConfig.getSuccessRateEjectionConfig() || lbConfig.getFailurePercentageEjectionConfig()) {\n            if (this.timerStartTime) {\n                trace(\"Previous timer existed. Replacing timer\");\n                clearTimeout(this.ejectionTimer);\n                const remainingDelay = lbConfig.getIntervalMs() - (new Date().getTime() - this.timerStartTime.getTime());\n                this.startTimer(remainingDelay);\n            } else {\n                trace(\"Starting new timer\");\n                this.timerStartTime = new Date();\n                this.startTimer(lbConfig.getIntervalMs());\n                this.switchAllBuckets();\n            }\n        } else {\n            trace(\"Counting disabled. Cancelling timer.\");\n            this.timerStartTime = null;\n            clearTimeout(this.ejectionTimer);\n            for (const mapEntry of this.addressMap.values()){\n                this.uneject(mapEntry);\n                mapEntry.ejectionTimeMultiplier = 0;\n            }\n        }\n        this.latestConfig = lbConfig;\n    }\n    exitIdle() {\n        this.childBalancer.exitIdle();\n    }\n    resetBackoff() {\n        this.childBalancer.resetBackoff();\n    }\n    destroy() {\n        clearTimeout(this.ejectionTimer);\n        this.childBalancer.destroy();\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.OutlierDetectionLoadBalancer = OutlierDetectionLoadBalancer;\nfunction setup() {\n    if (OUTLIER_DETECTION_ENABLED) {\n        experimental_1.registerLoadBalancerType(TYPE_NAME, OutlierDetectionLoadBalancer, OutlierDetectionLoadBalancingConfig);\n    }\n}\nexports.setup = setup; //# sourceMappingURL=load-balancer-outlier-detection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setup = exports.PickFirstLoadBalancer = exports.PickFirstLoadBalancingConfig = void 0;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst TRACER_NAME = \"pick_first\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = \"pick_first\";\n/**\n * Delay after starting a connection on a subchannel before starting a\n * connection on the next subchannel in the list, for Happy Eyeballs algorithm.\n */ const CONNECTION_DELAY_INTERVAL_MS = 250;\nclass PickFirstLoadBalancingConfig {\n    getLoadBalancerName() {\n        return TYPE_NAME;\n    }\n    constructor(){}\n    toJsonObject() {\n        return {\n            [TYPE_NAME]: {}\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static createFromJson(obj) {\n        return new PickFirstLoadBalancingConfig();\n    }\n}\nexports.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;\n/**\n * Picker for a `PickFirstLoadBalancer` in the READY state. Always returns the\n * picked subchannel.\n */ class PickFirstPicker {\n    constructor(subchannel){\n        this.subchannel = subchannel;\n    }\n    pick(pickArgs) {\n        return {\n            pickResultType: picker_1.PickResultType.COMPLETE,\n            subchannel: this.subchannel,\n            status: null,\n            extraFilterFactories: [],\n            onCallStarted: null\n        };\n    }\n}\nclass PickFirstLoadBalancer {\n    /**\n     * Load balancer that attempts to connect to each backend in the address list\n     * in order, and picks the first one that connects, using it for every\n     * request.\n     * @param channelControlHelper `ChannelControlHelper` instance provided by\n     *     this load balancer's owner.\n     */ constructor(channelControlHelper){\n        this.channelControlHelper = channelControlHelper;\n        /**\n         * The list of backend addresses most recently passed to `updateAddressList`.\n         */ this.latestAddressList = [];\n        /**\n         * The list of subchannels this load balancer is currently attempting to\n         * connect to.\n         */ this.subchannels = [];\n        /**\n         * The current connectivity state of the load balancer.\n         */ this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        /**\n         * The index within the `subchannels` array of the subchannel with the most\n         * recently started connection attempt.\n         */ this.currentSubchannelIndex = 0;\n        /**\n         * The currently picked subchannel used for making calls. Populated if\n         * and only if the load balancer's current state is READY. In that case,\n         * the subchannel's current state is also READY.\n         */ this.currentPick = null;\n        this.triedAllSubchannels = false;\n        this.subchannelStateCounts = {\n            [connectivity_state_1.ConnectivityState.CONNECTING]: 0,\n            [connectivity_state_1.ConnectivityState.IDLE]: 0,\n            [connectivity_state_1.ConnectivityState.READY]: 0,\n            [connectivity_state_1.ConnectivityState.SHUTDOWN]: 0,\n            [connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE]: 0\n        };\n        this.subchannelStateListener = (subchannel, previousState, newState)=>{\n            this.subchannelStateCounts[previousState] -= 1;\n            this.subchannelStateCounts[newState] += 1;\n            /* If the subchannel we most recently attempted to start connecting\n             * to goes into TRANSIENT_FAILURE, immediately try to start\n             * connecting to the next one instead of waiting for the connection\n             * delay timer. */ if (subchannel === this.subchannels[this.currentSubchannelIndex] && newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                this.startNextSubchannelConnecting();\n            }\n            if (newState === connectivity_state_1.ConnectivityState.READY) {\n                this.pickSubchannel(subchannel);\n                return;\n            } else {\n                if (this.triedAllSubchannels && this.subchannelStateCounts[connectivity_state_1.ConnectivityState.IDLE] === this.subchannels.length) {\n                    /* If all of the subchannels are IDLE we should go back to a\n                     * basic IDLE state where there is no subchannel list to avoid\n                     * holding unused resources. We do not reset triedAllSubchannels\n                     * because that is a reminder to request reresolution the next time\n                     * this LB policy needs to connect. */ this.resetSubchannelList(false);\n                    this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n                    return;\n                }\n                if (this.currentPick === null) {\n                    if (this.triedAllSubchannels) {\n                        let newLBState;\n                        if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.CONNECTING] > 0) {\n                            newLBState = connectivity_state_1.ConnectivityState.CONNECTING;\n                        } else if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {\n                            newLBState = connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE;\n                        } else {\n                            newLBState = connectivity_state_1.ConnectivityState.IDLE;\n                        }\n                        if (newLBState !== this.currentState) {\n                            if (newLBState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                                this.updateState(newLBState, new picker_1.UnavailablePicker());\n                            } else {\n                                this.updateState(newLBState, new picker_1.QueuePicker(this));\n                            }\n                        }\n                    } else {\n                        this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n                    }\n                }\n            }\n        };\n        this.pickedSubchannelStateListener = (subchannel, previousState, newState)=>{\n            if (newState !== connectivity_state_1.ConnectivityState.READY) {\n                this.currentPick = null;\n                subchannel.unref();\n                subchannel.removeConnectivityStateListener(this.pickedSubchannelStateListener);\n                this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());\n                if (this.subchannels.length > 0) {\n                    if (this.triedAllSubchannels) {\n                        let newLBState;\n                        if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.CONNECTING] > 0) {\n                            newLBState = connectivity_state_1.ConnectivityState.CONNECTING;\n                        } else if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {\n                            newLBState = connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE;\n                        } else {\n                            newLBState = connectivity_state_1.ConnectivityState.IDLE;\n                        }\n                        if (newLBState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                            this.updateState(newLBState, new picker_1.UnavailablePicker());\n                        } else {\n                            this.updateState(newLBState, new picker_1.QueuePicker(this));\n                        }\n                    } else {\n                        this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n                    }\n                } else {\n                    /* We don't need to backoff here because this only happens if a\n                     * subchannel successfully connects then disconnects, so it will not\n                     * create a loop of attempting to connect to an unreachable backend\n                     */ this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n                }\n            }\n        };\n        this.connectionDelayTimeout = setTimeout(()=>{}, 0);\n        clearTimeout(this.connectionDelayTimeout);\n    }\n    startNextSubchannelConnecting() {\n        if (this.triedAllSubchannels) {\n            return;\n        }\n        for (const [index, subchannel] of this.subchannels.entries()){\n            if (index > this.currentSubchannelIndex) {\n                const subchannelState = subchannel.getConnectivityState();\n                if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {\n                    this.startConnecting(index);\n                    return;\n                }\n            }\n        }\n        this.triedAllSubchannels = true;\n    }\n    /**\n     * Have a single subchannel in the `subchannels` list start connecting.\n     * @param subchannelIndex The index into the `subchannels` list.\n     */ startConnecting(subchannelIndex) {\n        clearTimeout(this.connectionDelayTimeout);\n        this.currentSubchannelIndex = subchannelIndex;\n        if (this.subchannels[subchannelIndex].getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {\n            trace(\"Start connecting to subchannel with address \" + this.subchannels[subchannelIndex].getAddress());\n            process.nextTick(()=>{\n                this.subchannels[subchannelIndex].startConnecting();\n            });\n        }\n        this.connectionDelayTimeout = setTimeout(()=>{\n            this.startNextSubchannelConnecting();\n        }, CONNECTION_DELAY_INTERVAL_MS);\n    }\n    pickSubchannel(subchannel) {\n        trace(\"Pick subchannel with address \" + subchannel.getAddress());\n        if (this.currentPick !== null) {\n            this.currentPick.unref();\n            this.currentPick.removeConnectivityStateListener(this.pickedSubchannelStateListener);\n        }\n        this.currentPick = subchannel;\n        this.updateState(connectivity_state_1.ConnectivityState.READY, new PickFirstPicker(subchannel));\n        subchannel.addConnectivityStateListener(this.pickedSubchannelStateListener);\n        subchannel.ref();\n        this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n        this.resetSubchannelList();\n        clearTimeout(this.connectionDelayTimeout);\n    }\n    updateState(newState, picker) {\n        trace(connectivity_state_1.ConnectivityState[this.currentState] + \" -> \" + connectivity_state_1.ConnectivityState[newState]);\n        this.currentState = newState;\n        this.channelControlHelper.updateState(newState, picker);\n    }\n    resetSubchannelList(resetTriedAllSubchannels = true) {\n        for (const subchannel of this.subchannels){\n            subchannel.removeConnectivityStateListener(this.subchannelStateListener);\n            subchannel.unref();\n            this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());\n        }\n        this.currentSubchannelIndex = 0;\n        this.subchannelStateCounts = {\n            [connectivity_state_1.ConnectivityState.CONNECTING]: 0,\n            [connectivity_state_1.ConnectivityState.IDLE]: 0,\n            [connectivity_state_1.ConnectivityState.READY]: 0,\n            [connectivity_state_1.ConnectivityState.SHUTDOWN]: 0,\n            [connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE]: 0\n        };\n        this.subchannels = [];\n        if (resetTriedAllSubchannels) {\n            this.triedAllSubchannels = false;\n        }\n    }\n    /**\n     * Start connecting to the address list most recently passed to\n     * `updateAddressList`.\n     */ connectToAddressList() {\n        this.resetSubchannelList();\n        trace(\"Connect to address list \" + this.latestAddressList.map((address)=>subchannel_address_1.subchannelAddressToString(address)));\n        this.subchannels = this.latestAddressList.map((address)=>this.channelControlHelper.createSubchannel(address, {}));\n        for (const subchannel of this.subchannels){\n            subchannel.ref();\n            this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n        }\n        for (const subchannel of this.subchannels){\n            subchannel.addConnectivityStateListener(this.subchannelStateListener);\n            this.subchannelStateCounts[subchannel.getConnectivityState()] += 1;\n            if (subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY) {\n                this.pickSubchannel(subchannel);\n                this.resetSubchannelList();\n                return;\n            }\n        }\n        for (const [index, subchannel] of this.subchannels.entries()){\n            const subchannelState = subchannel.getConnectivityState();\n            if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {\n                this.startConnecting(index);\n                if (this.currentPick === null) {\n                    this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n                }\n                return;\n            }\n        }\n        // If the code reaches this point, every subchannel must be in TRANSIENT_FAILURE\n        if (this.currentPick === null) {\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker());\n        }\n    }\n    updateAddressList(addressList, lbConfig) {\n        // lbConfig has no useful information for pick first load balancing\n        /* To avoid unnecessary churn, we only do something with this address list\n         * if we're not currently trying to establish a connection, or if the new\n         * address list is different from the existing one */ if (this.subchannels.length === 0 || !this.latestAddressList.every((value, index)=>addressList[index] === value)) {\n            this.latestAddressList = addressList;\n            this.connectToAddressList();\n        }\n    }\n    exitIdle() {\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE || this.triedAllSubchannels) {\n            this.channelControlHelper.requestReresolution();\n        }\n        for (const subchannel of this.subchannels){\n            subchannel.startConnecting();\n        }\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE) {\n            if (this.latestAddressList.length > 0) {\n                this.connectToAddressList();\n            }\n        }\n    }\n    resetBackoff() {\n    /* The pick first load balancer does not have a connection backoff, so this\n         * does nothing */ }\n    destroy() {\n        this.resetSubchannelList();\n        if (this.currentPick !== null) {\n            /* Unref can cause a state change, which can cause a change in the value\n             * of this.currentPick, so we hold a local reference to make sure that\n             * does not impact this function. */ const currentPick = this.currentPick;\n            currentPick.unref();\n            currentPick.removeConnectivityStateListener(this.pickedSubchannelStateListener);\n            this.channelControlHelper.removeChannelzChild(currentPick.getChannelzRef());\n        }\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.PickFirstLoadBalancer = PickFirstLoadBalancer;\nfunction setup() {\n    load_balancer_1.registerLoadBalancerType(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);\n    load_balancer_1.registerDefaultLoadBalancerType(TYPE_NAME);\n}\nexports.setup = setup; //# sourceMappingURL=load-balancer-pick-first.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setup = exports.RoundRobinLoadBalancer = void 0;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst TRACER_NAME = \"round_robin\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = \"round_robin\";\nclass RoundRobinLoadBalancingConfig {\n    getLoadBalancerName() {\n        return TYPE_NAME;\n    }\n    constructor(){}\n    toJsonObject() {\n        return {\n            [TYPE_NAME]: {}\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static createFromJson(obj) {\n        return new RoundRobinLoadBalancingConfig();\n    }\n}\nclass RoundRobinPicker {\n    constructor(subchannelList, nextIndex = 0){\n        this.subchannelList = subchannelList;\n        this.nextIndex = nextIndex;\n    }\n    pick(pickArgs) {\n        const pickedSubchannel = this.subchannelList[this.nextIndex];\n        this.nextIndex = (this.nextIndex + 1) % this.subchannelList.length;\n        return {\n            pickResultType: picker_1.PickResultType.COMPLETE,\n            subchannel: pickedSubchannel,\n            status: null,\n            extraFilterFactories: [],\n            onCallStarted: null\n        };\n    }\n    /**\n     * Check what the next subchannel returned would be. Used by the load\n     * balancer implementation to preserve this part of the picker state if\n     * possible when a subchannel connects or disconnects.\n     */ peekNextSubchannel() {\n        return this.subchannelList[this.nextIndex];\n    }\n}\nclass RoundRobinLoadBalancer {\n    constructor(channelControlHelper){\n        this.channelControlHelper = channelControlHelper;\n        this.subchannels = [];\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        this.currentReadyPicker = null;\n        this.subchannelStateCounts = {\n            [connectivity_state_1.ConnectivityState.CONNECTING]: 0,\n            [connectivity_state_1.ConnectivityState.IDLE]: 0,\n            [connectivity_state_1.ConnectivityState.READY]: 0,\n            [connectivity_state_1.ConnectivityState.SHUTDOWN]: 0,\n            [connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE]: 0\n        };\n        this.subchannelStateListener = (subchannel, previousState, newState)=>{\n            this.subchannelStateCounts[previousState] -= 1;\n            this.subchannelStateCounts[newState] += 1;\n            this.calculateAndUpdateState();\n            if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE || newState === connectivity_state_1.ConnectivityState.IDLE) {\n                this.channelControlHelper.requestReresolution();\n                subchannel.startConnecting();\n            }\n        };\n    }\n    calculateAndUpdateState() {\n        if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.READY] > 0) {\n            const readySubchannels = this.subchannels.filter((subchannel)=>subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);\n            let index = 0;\n            if (this.currentReadyPicker !== null) {\n                index = readySubchannels.indexOf(this.currentReadyPicker.peekNextSubchannel());\n                if (index < 0) {\n                    index = 0;\n                }\n            }\n            this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readySubchannels, index));\n        } else if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.CONNECTING] > 0) {\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n        } else if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker());\n        } else {\n            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n        }\n    }\n    updateState(newState, picker) {\n        trace(connectivity_state_1.ConnectivityState[this.currentState] + \" -> \" + connectivity_state_1.ConnectivityState[newState]);\n        if (newState === connectivity_state_1.ConnectivityState.READY) {\n            this.currentReadyPicker = picker;\n        } else {\n            this.currentReadyPicker = null;\n        }\n        this.currentState = newState;\n        this.channelControlHelper.updateState(newState, picker);\n    }\n    resetSubchannelList() {\n        for (const subchannel of this.subchannels){\n            subchannel.removeConnectivityStateListener(this.subchannelStateListener);\n            subchannel.unref();\n            this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());\n        }\n        this.subchannelStateCounts = {\n            [connectivity_state_1.ConnectivityState.CONNECTING]: 0,\n            [connectivity_state_1.ConnectivityState.IDLE]: 0,\n            [connectivity_state_1.ConnectivityState.READY]: 0,\n            [connectivity_state_1.ConnectivityState.SHUTDOWN]: 0,\n            [connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE]: 0\n        };\n        this.subchannels = [];\n    }\n    updateAddressList(addressList, lbConfig) {\n        this.resetSubchannelList();\n        trace(\"Connect to address list \" + addressList.map((address)=>subchannel_address_1.subchannelAddressToString(address)));\n        this.subchannels = addressList.map((address)=>this.channelControlHelper.createSubchannel(address, {}));\n        for (const subchannel of this.subchannels){\n            subchannel.ref();\n            subchannel.addConnectivityStateListener(this.subchannelStateListener);\n            this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n            const subchannelState = subchannel.getConnectivityState();\n            this.subchannelStateCounts[subchannelState] += 1;\n            if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                subchannel.startConnecting();\n            }\n        }\n        this.calculateAndUpdateState();\n    }\n    exitIdle() {\n        for (const subchannel of this.subchannels){\n            subchannel.startConnecting();\n        }\n    }\n    resetBackoff() {\n    /* The pick first load balancer does not have a connection backoff, so this\n         * does nothing */ }\n    destroy() {\n        this.resetSubchannelList();\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.RoundRobinLoadBalancer = RoundRobinLoadBalancer;\nfunction setup() {\n    load_balancer_1.registerLoadBalancerType(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);\n}\nexports.setup = setup; //# sourceMappingURL=load-balancer-round-robin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateLoadBalancingConfig = exports.getFirstUsableConfig = exports.isLoadBalancerNameRegistered = exports.createLoadBalancer = exports.registerDefaultLoadBalancerType = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = void 0;\n/**\n * Create a child ChannelControlHelper that overrides some methods of the\n * parent while letting others pass through to the parent unmodified. This\n * allows other code to create these children without needing to know about\n * all of the methods to be passed through.\n * @param parent\n * @param overrides\n */ function createChildChannelControlHelper(parent, overrides) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    return {\n        createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),\n        updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),\n        requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),\n        addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),\n        removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent)\n    };\n}\nexports.createChildChannelControlHelper = createChildChannelControlHelper;\nconst registeredLoadBalancerTypes = {};\nlet defaultLoadBalancerType = null;\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\n    registeredLoadBalancerTypes[typeName] = {\n        LoadBalancer: loadBalancerType,\n        LoadBalancingConfig: loadBalancingConfigType\n    };\n}\nexports.registerLoadBalancerType = registerLoadBalancerType;\nfunction registerDefaultLoadBalancerType(typeName) {\n    defaultLoadBalancerType = typeName;\n}\nexports.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;\nfunction createLoadBalancer(config, channelControlHelper) {\n    const typeName = config.getLoadBalancerName();\n    if (typeName in registeredLoadBalancerTypes) {\n        return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\n    } else {\n        return null;\n    }\n}\nexports.createLoadBalancer = createLoadBalancer;\nfunction isLoadBalancerNameRegistered(typeName) {\n    return typeName in registeredLoadBalancerTypes;\n}\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\nfunction getFirstUsableConfig(configs, fallbackTodefault = false) {\n    for (const config of configs){\n        if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {\n            return config;\n        }\n    }\n    if (fallbackTodefault) {\n        if (defaultLoadBalancerType) {\n            return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\n        } else {\n            return null;\n        }\n    } else {\n        return null;\n    }\n}\nexports.getFirstUsableConfig = getFirstUsableConfig;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction validateLoadBalancingConfig(obj) {\n    if (!(obj !== null && typeof obj === \"object\")) {\n        throw new Error(\"Load balancing config must be an object\");\n    }\n    const keys = Object.keys(obj);\n    if (keys.length !== 1) {\n        throw new Error(\"Provided load balancing config has multiple conflicting entries\");\n    }\n    const typeName = keys[0];\n    if (typeName in registeredLoadBalancerTypes) {\n        return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);\n    } else {\n        throw new Error(`Unrecognized load balancing config name ${typeName}`);\n    }\n}\nexports.validateLoadBalancingConfig = validateLoadBalancingConfig; //# sourceMappingURL=load-balancer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js":
/*!*********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/logging.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ var _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isTracerEnabled = exports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst DEFAULT_LOGGER = {\n    error: (message, ...optionalParams)=>{\n        console.error(\"E \" + message, ...optionalParams);\n    },\n    info: (message, ...optionalParams)=>{\n        console.error(\"I \" + message, ...optionalParams);\n    },\n    debug: (message, ...optionalParams)=>{\n        console.error(\"D \" + message, ...optionalParams);\n    }\n};\nlet _logger = DEFAULT_LOGGER;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : \"\";\nswitch(verbosityString.toUpperCase()){\n    case \"DEBUG\":\n        _logVerbosity = constants_1.LogVerbosity.DEBUG;\n        break;\n    case \"INFO\":\n        _logVerbosity = constants_1.LogVerbosity.INFO;\n        break;\n    case \"ERROR\":\n        _logVerbosity = constants_1.LogVerbosity.ERROR;\n        break;\n    case \"NONE\":\n        _logVerbosity = constants_1.LogVerbosity.NONE;\n        break;\n    default:\n}\nexports.getLogger = ()=>{\n    return _logger;\n};\nexports.setLogger = (logger)=>{\n    _logger = logger;\n};\nexports.setLoggerVerbosity = (verbosity)=>{\n    _logVerbosity = verbosity;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexports.log = (severity, ...args)=>{\n    let logFunction;\n    if (severity >= _logVerbosity) {\n        switch(severity){\n            case constants_1.LogVerbosity.DEBUG:\n                logFunction = _logger.debug;\n                break;\n            case constants_1.LogVerbosity.INFO:\n                logFunction = _logger.info;\n                break;\n            case constants_1.LogVerbosity.ERROR:\n                logFunction = _logger.error;\n                break;\n        }\n        /* Fall back to _logger.error when other methods are not available for\n         * compatiblity with older behavior that always logged to _logger.error */ if (!logFunction) {\n            logFunction = _logger.error;\n        }\n        if (logFunction) {\n            logFunction.bind(_logger)(...args);\n        }\n    }\n};\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : \"\";\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\nfor (const tracerName of tracersString.split(\",\")){\n    if (tracerName.startsWith(\"-\")) {\n        disabledTracers.add(tracerName.substring(1));\n    } else {\n        enabledTracers.add(tracerName);\n    }\n}\nconst allEnabled = enabledTracers.has(\"all\");\nfunction trace(severity, tracer, text) {\n    if (isTracerEnabled(tracer)) {\n        exports.log(severity, new Date().toISOString() + \" | \" + tracer + \" | \" + text);\n    }\n}\nexports.trace = trace;\nfunction isTracerEnabled(tracer) {\n    return !disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer));\n}\nexports.isTracerEnabled = isTracerEnabled; //# sourceMappingURL=logging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/make-client.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/make-client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadPackageDefinition = exports.makeClientConstructor = void 0;\nconst client_1 = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/client.js\");\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */ const requesterFuncs = {\n    unary: client_1.Client.prototype.makeUnaryRequest,\n    server_stream: client_1.Client.prototype.makeServerStreamRequest,\n    client_stream: client_1.Client.prototype.makeClientStreamRequest,\n    bidi: client_1.Client.prototype.makeBidiStreamRequest\n};\n/**\n * Returns true, if given key is included in the blacklisted\n * keys.\n * @param key key for check, string.\n */ function isPrototypePolluted(key) {\n    return [\n        \"__proto__\",\n        \"prototype\",\n        \"constructor\"\n    ].includes(key);\n}\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */ function makeClientConstructor(methods, serviceName, classOptions) {\n    if (!classOptions) {\n        classOptions = {};\n    }\n    class ServiceClientImpl extends client_1.Client {\n    }\n    Object.keys(methods).forEach((name)=>{\n        if (isPrototypePolluted(name)) {\n            return;\n        }\n        const attrs = methods[name];\n        let methodType;\n        // TODO(murgatroid99): Verify that we don't need this anymore\n        if (typeof name === \"string\" && name.charAt(0) === \"$\") {\n            throw new Error(\"Method names cannot start with $\");\n        }\n        if (attrs.requestStream) {\n            if (attrs.responseStream) {\n                methodType = \"bidi\";\n            } else {\n                methodType = \"client_stream\";\n            }\n        } else {\n            if (attrs.responseStream) {\n                methodType = \"server_stream\";\n            } else {\n                methodType = \"unary\";\n            }\n        }\n        const serialize = attrs.requestSerialize;\n        const deserialize = attrs.responseDeserialize;\n        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\n        ServiceClientImpl.prototype[name] = methodFunc;\n        // Associate all provided attributes with the method\n        Object.assign(ServiceClientImpl.prototype[name], attrs);\n        if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\n            ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name];\n        }\n    });\n    ServiceClientImpl.service = methods;\n    ServiceClientImpl.serviceName = serviceName;\n    return ServiceClientImpl;\n}\nexports.makeClientConstructor = makeClientConstructor;\nfunction partial(fn, path, serialize, deserialize) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(...args) {\n        return fn.call(this, path, serialize, deserialize, ...args);\n    };\n}\nfunction isProtobufTypeDefinition(obj) {\n    return \"format\" in obj;\n}\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */ function loadPackageDefinition(packageDef) {\n    const result = {};\n    for(const serviceFqn in packageDef){\n        if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\n            const service = packageDef[serviceFqn];\n            const nameComponents = serviceFqn.split(\".\");\n            if (nameComponents.some((comp)=>isPrototypePolluted(comp))) {\n                continue;\n            }\n            const serviceName = nameComponents[nameComponents.length - 1];\n            let current = result;\n            for (const packageName of nameComponents.slice(0, -1)){\n                if (!current[packageName]) {\n                    current[packageName] = {};\n                }\n                current = current[packageName];\n            }\n            if (isProtobufTypeDefinition(service)) {\n                current[serviceName] = service;\n            } else {\n                current[serviceName] = makeClientConstructor(service, serviceName, {});\n            }\n        }\n    }\n    return result;\n}\nexports.loadPackageDefinition = loadPackageDefinition; //# sourceMappingURL=make-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/make-client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MaxMessageSizeFilterFactory = exports.MaxMessageSizeFilter = void 0;\nconst filter_1 = __webpack_require__(/*! ./filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nclass MaxMessageSizeFilter extends filter_1.BaseFilter {\n    constructor(options, callStream){\n        super();\n        this.options = options;\n        this.callStream = callStream;\n        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n        if (\"grpc.max_send_message_length\" in options) {\n            this.maxSendMessageSize = options[\"grpc.max_send_message_length\"];\n        }\n        if (\"grpc.max_receive_message_length\" in options) {\n            this.maxReceiveMessageSize = options[\"grpc.max_receive_message_length\"];\n        }\n    }\n    async sendMessage(message) {\n        /* A configured size of -1 means that there is no limit, so skip the check\n         * entirely */ if (this.maxSendMessageSize === -1) {\n            return message;\n        } else {\n            const concreteMessage = await message;\n            if (concreteMessage.message.length > this.maxSendMessageSize) {\n                this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Sent message larger than max (${concreteMessage.message.length} vs. ${this.maxSendMessageSize})`);\n                return Promise.reject(\"Message too large\");\n            } else {\n                return concreteMessage;\n            }\n        }\n    }\n    async receiveMessage(message) {\n        /* A configured size of -1 means that there is no limit, so skip the check\n         * entirely */ if (this.maxReceiveMessageSize === -1) {\n            return message;\n        } else {\n            const concreteMessage = await message;\n            if (concreteMessage.length > this.maxReceiveMessageSize) {\n                this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Received message larger than max (${concreteMessage.length} vs. ${this.maxReceiveMessageSize})`);\n                return Promise.reject(\"Message too large\");\n            } else {\n                return concreteMessage;\n            }\n        }\n    }\n}\nexports.MaxMessageSizeFilter = MaxMessageSizeFilter;\nclass MaxMessageSizeFilterFactory {\n    constructor(options){\n        this.options = options;\n    }\n    createFilter(callStream) {\n        return new MaxMessageSizeFilter(this.options, callStream);\n    }\n}\nexports.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory; //# sourceMappingURL=max-message-size-filter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvbWF4LW1lc3NhZ2Utc2l6ZS1maWx0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1DQUFtQyxHQUFHQSw0QkFBNEIsR0FBRyxLQUFLO0FBQzFFLE1BQU1JLFdBQVdDLG1CQUFPQSxDQUFDLHdFQUFVO0FBQ25DLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLDhFQUFhO0FBQ3pDLE1BQU1GLDZCQUE2QkMsU0FBU0csVUFBVTtJQUNsREMsWUFBWUMsT0FBTyxFQUFFQyxVQUFVLENBQUU7UUFDN0IsS0FBSztRQUNMLElBQUksQ0FBQ0QsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNDLGtCQUFrQixHQUFHTCxZQUFZTSwrQkFBK0I7UUFDckUsSUFBSSxDQUFDQyxxQkFBcUIsR0FBR1AsWUFBWVEsa0NBQWtDO1FBQzNFLElBQUksa0NBQWtDTCxTQUFTO1lBQzNDLElBQUksQ0FBQ0Usa0JBQWtCLEdBQUdGLE9BQU8sQ0FBQywrQkFBK0I7UUFDckU7UUFDQSxJQUFJLHFDQUFxQ0EsU0FBUztZQUM5QyxJQUFJLENBQUNJLHFCQUFxQixHQUFHSixPQUFPLENBQUMsa0NBQWtDO1FBQzNFO0lBQ0o7SUFDQSxNQUFNTSxZQUFZQyxPQUFPLEVBQUU7UUFDdkI7b0JBQ1ksR0FDWixJQUFJLElBQUksQ0FBQ0wsa0JBQWtCLEtBQUssQ0FBQyxHQUFHO1lBQ2hDLE9BQU9LO1FBQ1gsT0FDSztZQUNELE1BQU1DLGtCQUFrQixNQUFNRDtZQUM5QixJQUFJQyxnQkFBZ0JELE9BQU8sQ0FBQ0UsTUFBTSxHQUFHLElBQUksQ0FBQ1Asa0JBQWtCLEVBQUU7Z0JBQzFELElBQUksQ0FBQ0QsVUFBVSxDQUFDUyxnQkFBZ0IsQ0FBQ2IsWUFBWWMsTUFBTSxDQUFDQyxrQkFBa0IsRUFBRSxDQUFDLDhCQUE4QixFQUFFSixnQkFBZ0JELE9BQU8sQ0FBQ0UsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUNQLGtCQUFrQixDQUFDLENBQUMsQ0FBQztnQkFDekssT0FBT1csUUFBUUMsTUFBTSxDQUFDO1lBQzFCLE9BQ0s7Z0JBQ0QsT0FBT047WUFDWDtRQUNKO0lBQ0o7SUFDQSxNQUFNTyxlQUFlUixPQUFPLEVBQUU7UUFDMUI7b0JBQ1ksR0FDWixJQUFJLElBQUksQ0FBQ0gscUJBQXFCLEtBQUssQ0FBQyxHQUFHO1lBQ25DLE9BQU9HO1FBQ1gsT0FDSztZQUNELE1BQU1DLGtCQUFrQixNQUFNRDtZQUM5QixJQUFJQyxnQkFBZ0JDLE1BQU0sR0FBRyxJQUFJLENBQUNMLHFCQUFxQixFQUFFO2dCQUNyRCxJQUFJLENBQUNILFVBQVUsQ0FBQ1MsZ0JBQWdCLENBQUNiLFlBQVljLE1BQU0sQ0FBQ0Msa0JBQWtCLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRUosZ0JBQWdCQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQ0wscUJBQXFCLENBQUMsQ0FBQyxDQUFDO2dCQUN4SyxPQUFPUyxRQUFRQyxNQUFNLENBQUM7WUFDMUIsT0FDSztnQkFDRCxPQUFPTjtZQUNYO1FBQ0o7SUFDSjtBQUNKO0FBQ0FqQiw0QkFBNEIsR0FBR0c7QUFDL0IsTUFBTUQ7SUFDRk0sWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtJQUNuQjtJQUNBZ0IsYUFBYWYsVUFBVSxFQUFFO1FBQ3JCLE9BQU8sSUFBSVAscUJBQXFCLElBQUksQ0FBQ00sT0FBTyxFQUFFQztJQUNsRDtBQUNKO0FBQ0FWLG1DQUFtQyxHQUFHRSw2QkFDdEMsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZjLW5leHRqcy1zaGFkY24vLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvbWF4LW1lc3NhZ2Utc2l6ZS1maWx0ZXIuanM/YWM3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYXhNZXNzYWdlU2l6ZUZpbHRlckZhY3RvcnkgPSBleHBvcnRzLk1heE1lc3NhZ2VTaXplRmlsdGVyID0gdm9pZCAwO1xuY29uc3QgZmlsdGVyXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNsYXNzIE1heE1lc3NhZ2VTaXplRmlsdGVyIGV4dGVuZHMgZmlsdGVyXzEuQmFzZUZpbHRlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgY2FsbFN0cmVhbSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNhbGxTdHJlYW0gPSBjYWxsU3RyZWFtO1xuICAgICAgICB0aGlzLm1heFNlbmRNZXNzYWdlU2l6ZSA9IGNvbnN0YW50c18xLkRFRkFVTFRfTUFYX1NFTkRfTUVTU0FHRV9MRU5HVEg7XG4gICAgICAgIHRoaXMubWF4UmVjZWl2ZU1lc3NhZ2VTaXplID0gY29uc3RhbnRzXzEuREVGQVVMVF9NQVhfUkVDRUlWRV9NRVNTQUdFX0xFTkdUSDtcbiAgICAgICAgaWYgKCdncnBjLm1heF9zZW5kX21lc3NhZ2VfbGVuZ3RoJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLm1heFNlbmRNZXNzYWdlU2l6ZSA9IG9wdGlvbnNbJ2dycGMubWF4X3NlbmRfbWVzc2FnZV9sZW5ndGgnXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2dycGMubWF4X3JlY2VpdmVfbWVzc2FnZV9sZW5ndGgnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMubWF4UmVjZWl2ZU1lc3NhZ2VTaXplID0gb3B0aW9uc1snZ3JwYy5tYXhfcmVjZWl2ZV9tZXNzYWdlX2xlbmd0aCddO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgLyogQSBjb25maWd1cmVkIHNpemUgb2YgLTEgbWVhbnMgdGhhdCB0aGVyZSBpcyBubyBsaW1pdCwgc28gc2tpcCB0aGUgY2hlY2tcbiAgICAgICAgICogZW50aXJlbHkgKi9cbiAgICAgICAgaWYgKHRoaXMubWF4U2VuZE1lc3NhZ2VTaXplID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb25jcmV0ZU1lc3NhZ2UgPSBhd2FpdCBtZXNzYWdlO1xuICAgICAgICAgICAgaWYgKGNvbmNyZXRlTWVzc2FnZS5tZXNzYWdlLmxlbmd0aCA+IHRoaXMubWF4U2VuZE1lc3NhZ2VTaXplKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsU3RyZWFtLmNhbmNlbFdpdGhTdGF0dXMoY29uc3RhbnRzXzEuU3RhdHVzLlJFU09VUkNFX0VYSEFVU1RFRCwgYFNlbnQgbWVzc2FnZSBsYXJnZXIgdGhhbiBtYXggKCR7Y29uY3JldGVNZXNzYWdlLm1lc3NhZ2UubGVuZ3RofSB2cy4gJHt0aGlzLm1heFNlbmRNZXNzYWdlU2l6ZX0pYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdNZXNzYWdlIHRvbyBsYXJnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmNyZXRlTWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyByZWNlaXZlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIC8qIEEgY29uZmlndXJlZCBzaXplIG9mIC0xIG1lYW5zIHRoYXQgdGhlcmUgaXMgbm8gbGltaXQsIHNvIHNraXAgdGhlIGNoZWNrXG4gICAgICAgICAqIGVudGlyZWx5ICovXG4gICAgICAgIGlmICh0aGlzLm1heFJlY2VpdmVNZXNzYWdlU2l6ZSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY29uY3JldGVNZXNzYWdlID0gYXdhaXQgbWVzc2FnZTtcbiAgICAgICAgICAgIGlmIChjb25jcmV0ZU1lc3NhZ2UubGVuZ3RoID4gdGhpcy5tYXhSZWNlaXZlTWVzc2FnZVNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxTdHJlYW0uY2FuY2VsV2l0aFN0YXR1cyhjb25zdGFudHNfMS5TdGF0dXMuUkVTT1VSQ0VfRVhIQVVTVEVELCBgUmVjZWl2ZWQgbWVzc2FnZSBsYXJnZXIgdGhhbiBtYXggKCR7Y29uY3JldGVNZXNzYWdlLmxlbmd0aH0gdnMuICR7dGhpcy5tYXhSZWNlaXZlTWVzc2FnZVNpemV9KWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnTWVzc2FnZSB0b28gbGFyZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25jcmV0ZU1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk1heE1lc3NhZ2VTaXplRmlsdGVyID0gTWF4TWVzc2FnZVNpemVGaWx0ZXI7XG5jbGFzcyBNYXhNZXNzYWdlU2l6ZUZpbHRlckZhY3Rvcnkge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgY3JlYXRlRmlsdGVyKGNhbGxTdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXhNZXNzYWdlU2l6ZUZpbHRlcih0aGlzLm9wdGlvbnMsIGNhbGxTdHJlYW0pO1xuICAgIH1cbn1cbmV4cG9ydHMuTWF4TWVzc2FnZVNpemVGaWx0ZXJGYWN0b3J5ID0gTWF4TWVzc2FnZVNpemVGaWx0ZXJGYWN0b3J5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF4LW1lc3NhZ2Utc2l6ZS1maWx0ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTWF4TWVzc2FnZVNpemVGaWx0ZXJGYWN0b3J5IiwiTWF4TWVzc2FnZVNpemVGaWx0ZXIiLCJmaWx0ZXJfMSIsInJlcXVpcmUiLCJjb25zdGFudHNfMSIsIkJhc2VGaWx0ZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJjYWxsU3RyZWFtIiwibWF4U2VuZE1lc3NhZ2VTaXplIiwiREVGQVVMVF9NQVhfU0VORF9NRVNTQUdFX0xFTkdUSCIsIm1heFJlY2VpdmVNZXNzYWdlU2l6ZSIsIkRFRkFVTFRfTUFYX1JFQ0VJVkVfTUVTU0FHRV9MRU5HVEgiLCJzZW5kTWVzc2FnZSIsIm1lc3NhZ2UiLCJjb25jcmV0ZU1lc3NhZ2UiLCJsZW5ndGgiLCJjYW5jZWxXaXRoU3RhdHVzIiwiU3RhdHVzIiwiUkVTT1VSQ0VfRVhIQVVTVEVEIiwiUHJvbWlzZSIsInJlamVjdCIsInJlY2VpdmVNZXNzYWdlIiwiY3JlYXRlRmlsdGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/metadata.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Metadata = void 0;\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;\nconst LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;\nfunction isLegalKey(key) {\n    return LEGAL_KEY_REGEX.test(key);\n}\nfunction isLegalNonBinaryValue(value) {\n    return LEGAL_NON_BINARY_VALUE_REGEX.test(value);\n}\nfunction isBinaryKey(key) {\n    return key.endsWith(\"-bin\");\n}\nfunction isCustomMetadata(key) {\n    return !key.startsWith(\"grpc-\");\n}\nfunction normalizeKey(key) {\n    return key.toLowerCase();\n}\nfunction validate(key, value) {\n    if (!isLegalKey(key)) {\n        throw new Error('Metadata key \"' + key + '\" contains illegal characters');\n    }\n    if (value !== null && value !== undefined) {\n        if (isBinaryKey(key)) {\n            if (!Buffer.isBuffer(value)) {\n                throw new Error(\"keys that end with '-bin' must have Buffer values\");\n            }\n        } else {\n            if (Buffer.isBuffer(value)) {\n                throw new Error(\"keys that don't end with '-bin' must have String values\");\n            }\n            if (!isLegalNonBinaryValue(value)) {\n                throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\n            }\n        }\n    }\n}\n/**\n * A class for storing metadata. Keys are normalized to lowercase ASCII.\n */ class Metadata {\n    constructor(options = {}){\n        this.internalRepr = new Map();\n        this.options = options;\n    }\n    /**\n     * Sets the given value for the given key by replacing any other values\n     * associated with that key. Normalizes the key.\n     * @param key The key to whose value should be set.\n     * @param value The value to set. Must be a buffer if and only\n     *   if the normalized key ends with '-bin'.\n     */ set(key, value) {\n        key = normalizeKey(key);\n        validate(key, value);\n        this.internalRepr.set(key, [\n            value\n        ]);\n    }\n    /**\n     * Adds the given value for the given key by appending to a list of previous\n     * values associated with that key. Normalizes the key.\n     * @param key The key for which a new value should be appended.\n     * @param value The value to add. Must be a buffer if and only\n     *   if the normalized key ends with '-bin'.\n     */ add(key, value) {\n        key = normalizeKey(key);\n        validate(key, value);\n        const existingValue = this.internalRepr.get(key);\n        if (existingValue === undefined) {\n            this.internalRepr.set(key, [\n                value\n            ]);\n        } else {\n            existingValue.push(value);\n        }\n    }\n    /**\n     * Removes the given key and any associated values. Normalizes the key.\n     * @param key The key whose values should be removed.\n     */ remove(key) {\n        key = normalizeKey(key);\n        // validate(key);\n        this.internalRepr.delete(key);\n    }\n    /**\n     * Gets a list of all values associated with the key. Normalizes the key.\n     * @param key The key whose value should be retrieved.\n     * @return A list of values associated with the given key.\n     */ get(key) {\n        key = normalizeKey(key);\n        // validate(key);\n        return this.internalRepr.get(key) || [];\n    }\n    /**\n     * Gets a plain object mapping each key to the first value associated with it.\n     * This reflects the most common way that people will want to see metadata.\n     * @return A key/value mapping of the metadata.\n     */ getMap() {\n        const result = {};\n        for (const [key, values] of this.internalRepr){\n            if (values.length > 0) {\n                const v = values[0];\n                result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;\n            }\n        }\n        return result;\n    }\n    /**\n     * Clones the metadata object.\n     * @return The newly cloned object.\n     */ clone() {\n        const newMetadata = new Metadata(this.options);\n        const newInternalRepr = newMetadata.internalRepr;\n        for (const [key, value] of this.internalRepr){\n            const clonedValue = value.map((v)=>{\n                if (Buffer.isBuffer(v)) {\n                    return Buffer.from(v);\n                } else {\n                    return v;\n                }\n            });\n            newInternalRepr.set(key, clonedValue);\n        }\n        return newMetadata;\n    }\n    /**\n     * Merges all key-value pairs from a given Metadata object into this one.\n     * If both this object and the given object have values in the same key,\n     * values from the other Metadata object will be appended to this object's\n     * values.\n     * @param other A Metadata object.\n     */ merge(other) {\n        for (const [key, values] of other.internalRepr){\n            const mergedValue = (this.internalRepr.get(key) || []).concat(values);\n            this.internalRepr.set(key, mergedValue);\n        }\n    }\n    setOptions(options) {\n        this.options = options;\n    }\n    getOptions() {\n        return this.options;\n    }\n    /**\n     * Creates an OutgoingHttpHeaders object that can be used with the http2 API.\n     */ toHttp2Headers() {\n        // NOTE: Node <8.9 formats http2 headers incorrectly.\n        const result = {};\n        for (const [key, values] of this.internalRepr){\n            // We assume that the user's interaction with this object is limited to\n            // through its public API (i.e. keys and values are already validated).\n            result[key] = values.map(bufToString);\n        }\n        return result;\n    }\n    // For compatibility with the other Metadata implementation\n    _getCoreRepresentation() {\n        return this.internalRepr;\n    }\n    /**\n     * This modifies the behavior of JSON.stringify to show an object\n     * representation of the metadata map.\n     */ toJSON() {\n        const result = {};\n        for (const [key, values] of this.internalRepr){\n            result[key] = values;\n        }\n        return result;\n    }\n    /**\n     * Returns a new Metadata object based fields in a given IncomingHttpHeaders\n     * object.\n     * @param headers An IncomingHttpHeaders object.\n     */ static fromHttp2Headers(headers) {\n        const result = new Metadata();\n        for (const key of Object.keys(headers)){\n            // Reserved headers (beginning with `:`) are not valid keys.\n            if (key.charAt(0) === \":\") {\n                continue;\n            }\n            const values = headers[key];\n            try {\n                if (isBinaryKey(key)) {\n                    if (Array.isArray(values)) {\n                        values.forEach((value)=>{\n                            result.add(key, Buffer.from(value, \"base64\"));\n                        });\n                    } else if (values !== undefined) {\n                        if (isCustomMetadata(key)) {\n                            values.split(\",\").forEach((v)=>{\n                                result.add(key, Buffer.from(v.trim(), \"base64\"));\n                            });\n                        } else {\n                            result.add(key, Buffer.from(values, \"base64\"));\n                        }\n                    }\n                } else {\n                    if (Array.isArray(values)) {\n                        values.forEach((value)=>{\n                            result.add(key, value);\n                        });\n                    } else if (values !== undefined) {\n                        result.add(key, values);\n                    }\n                }\n            } catch (error) {\n                const message = `Failed to add metadata entry ${key}: ${values}. ${error.message}. For more information see https://github.com/grpc/grpc-node/issues/1173`;\n                logging_1.log(constants_1.LogVerbosity.ERROR, message);\n            }\n        }\n        return result;\n    }\n}\nexports.Metadata = Metadata;\nconst bufToString = (val)=>{\n    return Buffer.isBuffer(val) ? val.toString(\"base64\") : val;\n}; //# sourceMappingURL=metadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/picker.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.QueuePicker = exports.UnavailablePicker = exports.PickResultType = void 0;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nvar PickResultType;\n(function(PickResultType) {\n    PickResultType[PickResultType[\"COMPLETE\"] = 0] = \"COMPLETE\";\n    PickResultType[PickResultType[\"QUEUE\"] = 1] = \"QUEUE\";\n    PickResultType[PickResultType[\"TRANSIENT_FAILURE\"] = 2] = \"TRANSIENT_FAILURE\";\n    PickResultType[PickResultType[\"DROP\"] = 3] = \"DROP\";\n})(PickResultType = exports.PickResultType || (exports.PickResultType = {}));\n/**\n * A standard picker representing a load balancer in the TRANSIENT_FAILURE\n * state. Always responds to every pick request with an UNAVAILABLE status.\n */ class UnavailablePicker {\n    constructor(status){\n        if (status !== undefined) {\n            this.status = status;\n        } else {\n            this.status = {\n                code: constants_1.Status.UNAVAILABLE,\n                details: \"No connection established\",\n                metadata: new metadata_1.Metadata()\n            };\n        }\n    }\n    pick(pickArgs) {\n        return {\n            pickResultType: PickResultType.TRANSIENT_FAILURE,\n            subchannel: null,\n            status: this.status,\n            extraFilterFactories: [],\n            onCallStarted: null\n        };\n    }\n}\nexports.UnavailablePicker = UnavailablePicker;\n/**\n * A standard picker representing a load balancer in the IDLE or CONNECTING\n * state. Always responds to every pick request with a QUEUE pick result\n * indicating that the pick should be tried again with the next `Picker`. Also\n * reports back to the load balancer that a connection should be established\n * once any pick is attempted.\n */ class QueuePicker {\n    // Constructed with a load balancer. Calls exitIdle on it the first time pick is called\n    constructor(loadBalancer){\n        this.loadBalancer = loadBalancer;\n        this.calledExitIdle = false;\n    }\n    pick(pickArgs) {\n        if (!this.calledExitIdle) {\n            process.nextTick(()=>{\n                this.loadBalancer.exitIdle();\n            });\n            this.calledExitIdle = true;\n        }\n        return {\n            pickResultType: PickResultType.QUEUE,\n            subchannel: null,\n            status: null,\n            extraFilterFactories: [],\n            onCallStarted: null\n        };\n    }\n}\nexports.QueuePicker = QueuePicker; //# sourceMappingURL=picker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcGlja2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBR0EseUJBQXlCLEdBQUdBLHNCQUFzQixHQUFHLEtBQUs7QUFDaEYsTUFBTUssYUFBYUMsbUJBQU9BLENBQUMsNEVBQVk7QUFDdkMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsOEVBQWE7QUFDekMsSUFBSUY7QUFDSCxVQUFVQSxjQUFjO0lBQ3JCQSxjQUFjLENBQUNBLGNBQWMsQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHO0lBQ2pEQSxjQUFjLENBQUNBLGNBQWMsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQzlDQSxjQUFjLENBQUNBLGNBQWMsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEdBQUc7SUFDMURBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7QUFDakQsR0FBR0EsaUJBQWlCSixRQUFRSSxjQUFjLElBQUtKLENBQUFBLHNCQUFzQixHQUFHLENBQUM7QUFDekU7OztDQUdDLEdBQ0QsTUFBTUc7SUFDRkssWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLElBQUlBLFdBQVdDLFdBQVc7WUFDdEIsSUFBSSxDQUFDRCxNQUFNLEdBQUdBO1FBQ2xCLE9BQ0s7WUFDRCxJQUFJLENBQUNBLE1BQU0sR0FBRztnQkFDVkUsTUFBTUosWUFBWUssTUFBTSxDQUFDQyxXQUFXO2dCQUNwQ0MsU0FBUztnQkFDVEMsVUFBVSxJQUFJVixXQUFXVyxRQUFRO1lBQ3JDO1FBQ0o7SUFDSjtJQUNBQyxLQUFLQyxRQUFRLEVBQUU7UUFDWCxPQUFPO1lBQ0hDLGdCQUFnQmYsZUFBZWdCLGlCQUFpQjtZQUNoREMsWUFBWTtZQUNaWixRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUNuQmEsc0JBQXNCLEVBQUU7WUFDeEJDLGVBQWU7UUFDbkI7SUFDSjtBQUNKO0FBQ0F2Qix5QkFBeUIsR0FBR0c7QUFDNUI7Ozs7OztDQU1DLEdBQ0QsTUFBTUQ7SUFDRix1RkFBdUY7SUFDdkZNLFlBQVlnQixZQUFZLENBQUU7UUFDdEIsSUFBSSxDQUFDQSxZQUFZLEdBQUdBO1FBQ3BCLElBQUksQ0FBQ0MsY0FBYyxHQUFHO0lBQzFCO0lBQ0FSLEtBQUtDLFFBQVEsRUFBRTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUNPLGNBQWMsRUFBRTtZQUN0QkMsUUFBUUMsUUFBUSxDQUFDO2dCQUNiLElBQUksQ0FBQ0gsWUFBWSxDQUFDSSxRQUFRO1lBQzlCO1lBQ0EsSUFBSSxDQUFDSCxjQUFjLEdBQUc7UUFDMUI7UUFDQSxPQUFPO1lBQ0hOLGdCQUFnQmYsZUFBZXlCLEtBQUs7WUFDcENSLFlBQVk7WUFDWlosUUFBUTtZQUNSYSxzQkFBc0IsRUFBRTtZQUN4QkMsZUFBZTtRQUNuQjtJQUNKO0FBQ0o7QUFDQXZCLG1CQUFtQixHQUFHRSxhQUN0QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZmMtbmV4dGpzLXNoYWRjbi8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9waWNrZXIuanM/NTdlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5RdWV1ZVBpY2tlciA9IGV4cG9ydHMuVW5hdmFpbGFibGVQaWNrZXIgPSBleHBvcnRzLlBpY2tSZXN1bHRUeXBlID0gdm9pZCAwO1xuY29uc3QgbWV0YWRhdGFfMSA9IHJlcXVpcmUoXCIuL21ldGFkYXRhXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG52YXIgUGlja1Jlc3VsdFR5cGU7XG4oZnVuY3Rpb24gKFBpY2tSZXN1bHRUeXBlKSB7XG4gICAgUGlja1Jlc3VsdFR5cGVbUGlja1Jlc3VsdFR5cGVbXCJDT01QTEVURVwiXSA9IDBdID0gXCJDT01QTEVURVwiO1xuICAgIFBpY2tSZXN1bHRUeXBlW1BpY2tSZXN1bHRUeXBlW1wiUVVFVUVcIl0gPSAxXSA9IFwiUVVFVUVcIjtcbiAgICBQaWNrUmVzdWx0VHlwZVtQaWNrUmVzdWx0VHlwZVtcIlRSQU5TSUVOVF9GQUlMVVJFXCJdID0gMl0gPSBcIlRSQU5TSUVOVF9GQUlMVVJFXCI7XG4gICAgUGlja1Jlc3VsdFR5cGVbUGlja1Jlc3VsdFR5cGVbXCJEUk9QXCJdID0gM10gPSBcIkRST1BcIjtcbn0pKFBpY2tSZXN1bHRUeXBlID0gZXhwb3J0cy5QaWNrUmVzdWx0VHlwZSB8fCAoZXhwb3J0cy5QaWNrUmVzdWx0VHlwZSA9IHt9KSk7XG4vKipcbiAqIEEgc3RhbmRhcmQgcGlja2VyIHJlcHJlc2VudGluZyBhIGxvYWQgYmFsYW5jZXIgaW4gdGhlIFRSQU5TSUVOVF9GQUlMVVJFXG4gKiBzdGF0ZS4gQWx3YXlzIHJlc3BvbmRzIHRvIGV2ZXJ5IHBpY2sgcmVxdWVzdCB3aXRoIGFuIFVOQVZBSUxBQkxFIHN0YXR1cy5cbiAqL1xuY2xhc3MgVW5hdmFpbGFibGVQaWNrZXIge1xuICAgIGNvbnN0cnVjdG9yKHN0YXR1cykge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgY29kZTogY29uc3RhbnRzXzEuU3RhdHVzLlVOQVZBSUxBQkxFLFxuICAgICAgICAgICAgICAgIGRldGFpbHM6ICdObyBjb25uZWN0aW9uIGVzdGFibGlzaGVkJyxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogbmV3IG1ldGFkYXRhXzEuTWV0YWRhdGEoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGljayhwaWNrQXJncykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGlja1Jlc3VsdFR5cGU6IFBpY2tSZXN1bHRUeXBlLlRSQU5TSUVOVF9GQUlMVVJFLFxuICAgICAgICAgICAgc3ViY2hhbm5lbDogbnVsbCxcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICBleHRyYUZpbHRlckZhY3RvcmllczogW10sXG4gICAgICAgICAgICBvbkNhbGxTdGFydGVkOiBudWxsLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuVW5hdmFpbGFibGVQaWNrZXIgPSBVbmF2YWlsYWJsZVBpY2tlcjtcbi8qKlxuICogQSBzdGFuZGFyZCBwaWNrZXIgcmVwcmVzZW50aW5nIGEgbG9hZCBiYWxhbmNlciBpbiB0aGUgSURMRSBvciBDT05ORUNUSU5HXG4gKiBzdGF0ZS4gQWx3YXlzIHJlc3BvbmRzIHRvIGV2ZXJ5IHBpY2sgcmVxdWVzdCB3aXRoIGEgUVVFVUUgcGljayByZXN1bHRcbiAqIGluZGljYXRpbmcgdGhhdCB0aGUgcGljayBzaG91bGQgYmUgdHJpZWQgYWdhaW4gd2l0aCB0aGUgbmV4dCBgUGlja2VyYC4gQWxzb1xuICogcmVwb3J0cyBiYWNrIHRvIHRoZSBsb2FkIGJhbGFuY2VyIHRoYXQgYSBjb25uZWN0aW9uIHNob3VsZCBiZSBlc3RhYmxpc2hlZFxuICogb25jZSBhbnkgcGljayBpcyBhdHRlbXB0ZWQuXG4gKi9cbmNsYXNzIFF1ZXVlUGlja2VyIHtcbiAgICAvLyBDb25zdHJ1Y3RlZCB3aXRoIGEgbG9hZCBiYWxhbmNlci4gQ2FsbHMgZXhpdElkbGUgb24gaXQgdGhlIGZpcnN0IHRpbWUgcGljayBpcyBjYWxsZWRcbiAgICBjb25zdHJ1Y3Rvcihsb2FkQmFsYW5jZXIpIHtcbiAgICAgICAgdGhpcy5sb2FkQmFsYW5jZXIgPSBsb2FkQmFsYW5jZXI7XG4gICAgICAgIHRoaXMuY2FsbGVkRXhpdElkbGUgPSBmYWxzZTtcbiAgICB9XG4gICAgcGljayhwaWNrQXJncykge1xuICAgICAgICBpZiAoIXRoaXMuY2FsbGVkRXhpdElkbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZEJhbGFuY2VyLmV4aXRJZGxlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuY2FsbGVkRXhpdElkbGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwaWNrUmVzdWx0VHlwZTogUGlja1Jlc3VsdFR5cGUuUVVFVUUsXG4gICAgICAgICAgICBzdWJjaGFubmVsOiBudWxsLFxuICAgICAgICAgICAgc3RhdHVzOiBudWxsLFxuICAgICAgICAgICAgZXh0cmFGaWx0ZXJGYWN0b3JpZXM6IFtdLFxuICAgICAgICAgICAgb25DYWxsU3RhcnRlZDogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlF1ZXVlUGlja2VyID0gUXVldWVQaWNrZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waWNrZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUXVldWVQaWNrZXIiLCJVbmF2YWlsYWJsZVBpY2tlciIsIlBpY2tSZXN1bHRUeXBlIiwibWV0YWRhdGFfMSIsInJlcXVpcmUiLCJjb25zdGFudHNfMSIsImNvbnN0cnVjdG9yIiwic3RhdHVzIiwidW5kZWZpbmVkIiwiY29kZSIsIlN0YXR1cyIsIlVOQVZBSUxBQkxFIiwiZGV0YWlscyIsIm1ldGFkYXRhIiwiTWV0YWRhdGEiLCJwaWNrIiwicGlja0FyZ3MiLCJwaWNrUmVzdWx0VHlwZSIsIlRSQU5TSUVOVF9GQUlMVVJFIiwic3ViY2hhbm5lbCIsImV4dHJhRmlsdGVyRmFjdG9yaWVzIiwib25DYWxsU3RhcnRlZCIsImxvYWRCYWxhbmNlciIsImNhbGxlZEV4aXRJZGxlIiwicHJvY2VzcyIsIm5leHRUaWNrIiwiZXhpdElkbGUiLCJRVUVVRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-dns.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setup = void 0;\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst service_config_1 = __webpack_require__(/*! ./service-config */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/service-config.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nconst TRACER_NAME = \"dns_resolver\";\nfunction trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */ const DEFAULT_PORT = 443;\nconst DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30000;\nconst resolveTxtPromise = util.promisify(dns.resolveTxt);\nconst dnsLookupPromise = util.promisify(dns.lookup);\n/**\n * Merge any number of arrays into a single alternating array\n * @param arrays\n */ function mergeArrays(...arrays) {\n    const result = [];\n    for(let i = 0; i < Math.max.apply(null, arrays.map((array)=>array.length)); i++){\n        for (const array of arrays){\n            if (i < array.length) {\n                result.push(array[i]);\n            }\n        }\n    }\n    return result;\n}\n/**\n * Resolver implementation that handles DNS names and IP addresses.\n */ class DnsResolver {\n    constructor(target, listener, channelOptions){\n        var _a, _b, _c;\n        this.target = target;\n        this.listener = listener;\n        this.pendingLookupPromise = null;\n        this.pendingTxtPromise = null;\n        this.latestLookupResult = null;\n        this.latestServiceConfig = null;\n        this.latestServiceConfigError = null;\n        this.continueResolving = false;\n        this.isNextResolutionTimerRunning = false;\n        trace(\"Resolver constructed for target \" + uri_parser_1.uriToString(target));\n        const hostPort = uri_parser_1.splitHostPort(target.path);\n        if (hostPort === null) {\n            this.ipResult = null;\n            this.dnsHostname = null;\n            this.port = null;\n        } else {\n            if (net_1.isIPv4(hostPort.host) || net_1.isIPv6(hostPort.host)) {\n                this.ipResult = [\n                    {\n                        host: hostPort.host,\n                        port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT\n                    }\n                ];\n                this.dnsHostname = null;\n                this.port = null;\n            } else {\n                this.ipResult = null;\n                this.dnsHostname = hostPort.host;\n                this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : DEFAULT_PORT;\n            }\n        }\n        this.percentage = Math.random() * 100;\n        this.defaultResolutionError = {\n            code: constants_1.Status.UNAVAILABLE,\n            details: `Name resolution failed for target ${uri_parser_1.uriToString(this.target)}`,\n            metadata: new metadata_1.Metadata()\n        };\n        const backoffOptions = {\n            initialDelay: channelOptions[\"grpc.initial_reconnect_backoff_ms\"],\n            maxDelay: channelOptions[\"grpc.max_reconnect_backoff_ms\"]\n        };\n        this.backoff = new backoff_timeout_1.BackoffTimeout(()=>{\n            if (this.continueResolving) {\n                this.startResolutionWithBackoff();\n            }\n        }, backoffOptions);\n        this.backoff.unref();\n        this.minTimeBetweenResolutionsMs = (_c = channelOptions[\"grpc.dns_min_time_between_resolutions_ms\"]) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\n        this.nextResolutionTimer = setTimeout(()=>{}, 0);\n        clearTimeout(this.nextResolutionTimer);\n    }\n    /**\n     * If the target is an IP address, just provide that address as a result.\n     * Otherwise, initiate A, AAAA, and TXT lookups\n     */ startResolution() {\n        if (this.ipResult !== null) {\n            trace(\"Returning IP address for target \" + uri_parser_1.uriToString(this.target));\n            setImmediate(()=>{\n                this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});\n            });\n            this.backoff.stop();\n            this.backoff.reset();\n            return;\n        }\n        if (this.dnsHostname === null) {\n            trace(\"Failed to parse DNS address \" + uri_parser_1.uriToString(this.target));\n            setImmediate(()=>{\n                this.listener.onError({\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse DNS address ${uri_parser_1.uriToString(this.target)}`,\n                    metadata: new metadata_1.Metadata()\n                });\n            });\n            this.stopNextResolutionTimer();\n        } else {\n            if (this.pendingLookupPromise !== null) {\n                return;\n            }\n            trace(\"Looking up DNS hostname \" + this.dnsHostname);\n            /* We clear out latestLookupResult here to ensure that it contains the\n             * latest result since the last time we started resolving. That way, the\n             * TXT resolution handler can use it, but only if it finishes second. We\n             * don't clear out any previous service config results because it's\n             * better to use a service config that's slightly out of date than to\n             * revert to an effectively blank one. */ this.latestLookupResult = null;\n            const hostname = this.dnsHostname;\n            /* We lookup both address families here and then split them up later\n             * because when looking up a single family, dns.lookup outputs an error\n             * if the name exists but there are no records for that family, and that\n             * error is indistinguishable from other kinds of errors */ this.pendingLookupPromise = dnsLookupPromise(hostname, {\n                all: true\n            });\n            this.pendingLookupPromise.then((addressList)=>{\n                this.pendingLookupPromise = null;\n                this.backoff.reset();\n                this.backoff.stop();\n                const ip4Addresses = addressList.filter((addr)=>addr.family === 4);\n                const ip6Addresses = addressList.filter((addr)=>addr.family === 6);\n                this.latestLookupResult = mergeArrays(ip6Addresses, ip4Addresses).map((addr)=>({\n                        host: addr.address,\n                        port: +this.port\n                    }));\n                const allAddressesString = \"[\" + this.latestLookupResult.map((addr)=>addr.host + \":\" + addr.port).join(\",\") + \"]\";\n                trace(\"Resolved addresses for target \" + uri_parser_1.uriToString(this.target) + \": \" + allAddressesString);\n                if (this.latestLookupResult.length === 0) {\n                    this.listener.onError(this.defaultResolutionError);\n                    return;\n                }\n                /* If the TXT lookup has not yet finished, both of the last two\n                 * arguments will be null, which is the equivalent of getting an\n                 * empty TXT response. When the TXT lookup does finish, its handler\n                 * can update the service config by using the same address list */ this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n            }, (err)=>{\n                trace(\"Resolution error for target \" + uri_parser_1.uriToString(this.target) + \": \" + err.message);\n                this.pendingLookupPromise = null;\n                this.stopNextResolutionTimer();\n                this.listener.onError(this.defaultResolutionError);\n            });\n            /* If there already is a still-pending TXT resolution, we can just use\n             * that result when it comes in */ if (this.pendingTxtPromise === null) {\n                /* We handle the TXT query promise differently than the others because\n                 * the name resolution attempt as a whole is a success even if the TXT\n                 * lookup fails */ this.pendingTxtPromise = resolveTxtPromise(hostname);\n                this.pendingTxtPromise.then((txtRecord)=>{\n                    this.pendingTxtPromise = null;\n                    try {\n                        this.latestServiceConfig = service_config_1.extractAndSelectServiceConfig(txtRecord, this.percentage);\n                    } catch (err) {\n                        this.latestServiceConfigError = {\n                            code: constants_1.Status.UNAVAILABLE,\n                            details: \"Parsing service config failed\",\n                            metadata: new metadata_1.Metadata()\n                        };\n                    }\n                    if (this.latestLookupResult !== null) {\n                        /* We rely here on the assumption that calling this function with\n                         * identical parameters will be essentialy idempotent, and calling\n                         * it with the same address list and a different service config\n                         * should result in a fast and seamless switchover. */ this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n                    }\n                }, (err)=>{\n                /* If TXT lookup fails we should do nothing, which means that we\n                     * continue to use the result of the most recent successful lookup,\n                     * or the default null config object if there has never been a\n                     * successful lookup. We do not set the latestServiceConfigError\n                     * here because that is specifically used for response validation\n                     * errors. We still need to handle this error so that it does not\n                     * bubble up as an unhandled promise rejection. */ });\n            }\n        }\n    }\n    startNextResolutionTimer() {\n        var _a, _b;\n        clearTimeout(this.nextResolutionTimer);\n        this.nextResolutionTimer = (_b = (_a = setTimeout(()=>{\n            this.stopNextResolutionTimer();\n            if (this.continueResolving) {\n                this.startResolutionWithBackoff();\n            }\n        }, this.minTimeBetweenResolutionsMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.isNextResolutionTimerRunning = true;\n    }\n    stopNextResolutionTimer() {\n        clearTimeout(this.nextResolutionTimer);\n        this.isNextResolutionTimerRunning = false;\n    }\n    startResolutionWithBackoff() {\n        if (this.pendingLookupPromise === null) {\n            this.continueResolving = false;\n            this.startResolution();\n            this.backoff.runOnce();\n            this.startNextResolutionTimer();\n        }\n    }\n    updateResolution() {\n        /* If there is a pending lookup, just let it finish. Otherwise, if the\n         * nextResolutionTimer or backoff timer is running, set the\n         * continueResolving flag to resolve when whichever of those timers\n         * fires. Otherwise, start resolving immediately. */ if (this.pendingLookupPromise === null) {\n            if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\n                this.continueResolving = true;\n            } else {\n                this.startResolutionWithBackoff();\n            }\n        }\n    }\n    destroy() {\n        this.continueResolving = false;\n        this.backoff.stop();\n        this.stopNextResolutionTimer();\n    }\n    /**\n     * Get the default authority for the given target. For IP targets, that is\n     * the IP address. For DNS targets, it is the hostname.\n     * @param target\n     */ static getDefaultAuthority(target) {\n        return target.path;\n    }\n}\n/**\n * Set up the DNS resolver class by registering it as the handler for the\n * \"dns:\" prefix and as the default resolver.\n */ function setup() {\n    resolver_1.registerResolver(\"dns\", DnsResolver);\n    resolver_1.registerDefaultScheme(\"dns\");\n}\nexports.setup = setup; //# sourceMappingURL=resolver-dns.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-ip.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setup = void 0;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = \"ip_resolver\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst IPV4_SCHEME = \"ipv4\";\nconst IPV6_SCHEME = \"ipv6\";\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */ const DEFAULT_PORT = 443;\nclass IpResolver {\n    constructor(target, listener, channelOptions){\n        var _a;\n        this.target = target;\n        this.listener = listener;\n        this.addresses = [];\n        this.error = null;\n        trace(\"Resolver constructed for target \" + uri_parser_1.uriToString(target));\n        const addresses = [];\n        if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n            this.error = {\n                code: constants_1.Status.UNAVAILABLE,\n                details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n                metadata: new metadata_1.Metadata()\n            };\n            return;\n        }\n        const pathList = target.path.split(\",\");\n        for (const path of pathList){\n            const hostPort = uri_parser_1.splitHostPort(path);\n            if (hostPort === null) {\n                this.error = {\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse ${target.scheme} address ${path}`,\n                    metadata: new metadata_1.Metadata()\n                };\n                return;\n            }\n            if (target.scheme === IPV4_SCHEME && !net_1.isIPv4(hostPort.host) || target.scheme === IPV6_SCHEME && !net_1.isIPv6(hostPort.host)) {\n                this.error = {\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse ${target.scheme} address ${path}`,\n                    metadata: new metadata_1.Metadata()\n                };\n                return;\n            }\n            addresses.push({\n                host: hostPort.host,\n                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT\n            });\n        }\n        this.addresses = addresses;\n        trace(\"Parsed \" + target.scheme + \" address list \" + this.addresses);\n    }\n    updateResolution() {\n        process.nextTick(()=>{\n            if (this.error) {\n                this.listener.onError(this.error);\n            } else {\n                this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});\n            }\n        });\n    }\n    destroy() {\n    // This resolver owns no resources, so we do nothing here.\n    }\n    static getDefaultAuthority(target) {\n        return target.path.split(\",\")[0];\n    }\n}\nfunction setup() {\n    resolver_1.registerResolver(IPV4_SCHEME, IpResolver);\n    resolver_1.registerResolver(IPV6_SCHEME, IpResolver);\n}\nexports.setup = setup; //# sourceMappingURL=resolver-ip.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-uds.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setup = void 0;\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nclass UdsResolver {\n    constructor(target, listener, channelOptions){\n        this.listener = listener;\n        this.addresses = [];\n        let path;\n        if (target.authority === \"\") {\n            path = \"/\" + target.path;\n        } else {\n            path = target.path;\n        }\n        this.addresses = [\n            {\n                path\n            }\n        ];\n    }\n    updateResolution() {\n        process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});\n    }\n    destroy() {\n    // This resolver owns no resources, so we do nothing here.\n    }\n    static getDefaultAuthority(target) {\n        return \"localhost\";\n    }\n}\nfunction setup() {\n    resolver_1.registerResolver(\"unix\", UdsResolver);\n}\nexports.setup = setup; //# sourceMappingURL=resolver-uds.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItdWRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGFBQWEsR0FBRyxLQUFLO0FBQ3JCLE1BQU1HLGFBQWFDLG1CQUFPQSxDQUFDLDRFQUFZO0FBQ3ZDLE1BQU1DO0lBQ0ZDLFlBQVlDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxjQUFjLENBQUU7UUFDMUMsSUFBSSxDQUFDRCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0UsU0FBUyxHQUFHLEVBQUU7UUFDbkIsSUFBSUM7UUFDSixJQUFJSixPQUFPSyxTQUFTLEtBQUssSUFBSTtZQUN6QkQsT0FBTyxNQUFNSixPQUFPSSxJQUFJO1FBQzVCLE9BQ0s7WUFDREEsT0FBT0osT0FBT0ksSUFBSTtRQUN0QjtRQUNBLElBQUksQ0FBQ0QsU0FBUyxHQUFHO1lBQUM7Z0JBQUVDO1lBQUs7U0FBRTtJQUMvQjtJQUNBRSxtQkFBbUI7UUFDZkMsUUFBUUMsUUFBUSxDQUFDLElBQUksQ0FBQ1AsUUFBUSxDQUFDUSxzQkFBc0IsRUFBRSxJQUFJLENBQUNOLFNBQVMsRUFBRSxNQUFNLE1BQU0sTUFBTSxDQUFDO0lBQzlGO0lBQ0FPLFVBQVU7SUFDTiwwREFBMEQ7SUFDOUQ7SUFDQSxPQUFPQyxvQkFBb0JYLE1BQU0sRUFBRTtRQUMvQixPQUFPO0lBQ1g7QUFDSjtBQUNBLFNBQVNMO0lBQ0xDLFdBQVdnQixnQkFBZ0IsQ0FBQyxRQUFRZDtBQUN4QztBQUNBTCxhQUFhLEdBQUdFLE9BQ2hCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3Jlc29sdmVyLXVkcy5qcz82OTU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0dXAgPSB2b2lkIDA7XG5jb25zdCByZXNvbHZlcl8xID0gcmVxdWlyZShcIi4vcmVzb2x2ZXJcIik7XG5jbGFzcyBVZHNSZXNvbHZlciB7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCBsaXN0ZW5lciwgY2hhbm5lbE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgICAgICB0aGlzLmFkZHJlc3NlcyA9IFtdO1xuICAgICAgICBsZXQgcGF0aDtcbiAgICAgICAgaWYgKHRhcmdldC5hdXRob3JpdHkgPT09ICcnKSB7XG4gICAgICAgICAgICBwYXRoID0gJy8nICsgdGFyZ2V0LnBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXRoID0gdGFyZ2V0LnBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGRyZXNzZXMgPSBbeyBwYXRoIH1dO1xuICAgIH1cbiAgICB1cGRhdGVSZXNvbHV0aW9uKCkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKHRoaXMubGlzdGVuZXIub25TdWNjZXNzZnVsUmVzb2x1dGlvbiwgdGhpcy5hZGRyZXNzZXMsIG51bGwsIG51bGwsIG51bGwsIHt9KTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgLy8gVGhpcyByZXNvbHZlciBvd25zIG5vIHJlc291cmNlcywgc28gd2UgZG8gbm90aGluZyBoZXJlLlxuICAgIH1cbiAgICBzdGF0aWMgZ2V0RGVmYXVsdEF1dGhvcml0eSh0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuICdsb2NhbGhvc3QnO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldHVwKCkge1xuICAgIHJlc29sdmVyXzEucmVnaXN0ZXJSZXNvbHZlcigndW5peCcsIFVkc1Jlc29sdmVyKTtcbn1cbmV4cG9ydHMuc2V0dXAgPSBzZXR1cDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVyLXVkcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzZXR1cCIsInJlc29sdmVyXzEiLCJyZXF1aXJlIiwiVWRzUmVzb2x2ZXIiLCJjb25zdHJ1Y3RvciIsInRhcmdldCIsImxpc3RlbmVyIiwiY2hhbm5lbE9wdGlvbnMiLCJhZGRyZXNzZXMiLCJwYXRoIiwiYXV0aG9yaXR5IiwidXBkYXRlUmVzb2x1dGlvbiIsInByb2Nlc3MiLCJuZXh0VGljayIsIm9uU3VjY2Vzc2Z1bFJlc29sdXRpb24iLCJkZXN0cm95IiwiZ2V0RGVmYXVsdEF1dGhvcml0eSIsInJlZ2lzdGVyUmVzb2x2ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.mapUriDefaultScheme = exports.getDefaultAuthority = exports.createResolver = exports.registerDefaultScheme = exports.registerResolver = void 0;\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst registeredResolvers = {};\nlet defaultScheme = null;\n/**\n * Register a resolver class to handle target names prefixed with the `prefix`\n * string. This prefix should correspond to a URI scheme name listed in the\n * [gRPC Name Resolution document](https://github.com/grpc/grpc/blob/master/doc/naming.md)\n * @param prefix\n * @param resolverClass\n */ function registerResolver(scheme, resolverClass) {\n    registeredResolvers[scheme] = resolverClass;\n}\nexports.registerResolver = registerResolver;\n/**\n * Register a default resolver to handle target names that do not start with\n * any registered prefix.\n * @param resolverClass\n */ function registerDefaultScheme(scheme) {\n    defaultScheme = scheme;\n}\nexports.registerDefaultScheme = registerDefaultScheme;\n/**\n * Create a name resolver for the specified target, if possible. Throws an\n * error if no such name resolver can be created.\n * @param target\n * @param listener\n */ function createResolver(target, listener, options) {\n    if (target.scheme !== undefined && target.scheme in registeredResolvers) {\n        return new registeredResolvers[target.scheme](target, listener, options);\n    } else {\n        throw new Error(`No resolver could be created for target ${uri_parser_1.uriToString(target)}`);\n    }\n}\nexports.createResolver = createResolver;\n/**\n * Get the default authority for the specified target, if possible. Throws an\n * error if no registered name resolver can parse that target string.\n * @param target\n */ function getDefaultAuthority(target) {\n    if (target.scheme !== undefined && target.scheme in registeredResolvers) {\n        return registeredResolvers[target.scheme].getDefaultAuthority(target);\n    } else {\n        throw new Error(`Invalid target ${uri_parser_1.uriToString(target)}`);\n    }\n}\nexports.getDefaultAuthority = getDefaultAuthority;\nfunction mapUriDefaultScheme(target) {\n    if (target.scheme === undefined || !(target.scheme in registeredResolvers)) {\n        if (defaultScheme !== null) {\n            return {\n                scheme: defaultScheme,\n                authority: undefined,\n                path: uri_parser_1.uriToString(target)\n            };\n        } else {\n            return null;\n        }\n    }\n    return target;\n}\nexports.mapUriDefaultScheme = mapUriDefaultScheme; //# sourceMappingURL=resolver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSwyQkFBMkIsR0FBR0Esc0JBQXNCLEdBQUdBLDZCQUE2QixHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQ3JKLE1BQU1PLGVBQWVDLG1CQUFPQSxDQUFDLGdGQUFjO0FBQzNDLE1BQU1DLHNCQUFzQixDQUFDO0FBQzdCLElBQUlDLGdCQUFnQjtBQUNwQjs7Ozs7O0NBTUMsR0FDRCxTQUFTSixpQkFBaUJLLE1BQU0sRUFBRUMsYUFBYTtJQUMzQ0gsbUJBQW1CLENBQUNFLE9BQU8sR0FBR0M7QUFDbEM7QUFDQVosd0JBQXdCLEdBQUdNO0FBQzNCOzs7O0NBSUMsR0FDRCxTQUFTRCxzQkFBc0JNLE1BQU07SUFDakNELGdCQUFnQkM7QUFDcEI7QUFDQVgsNkJBQTZCLEdBQUdLO0FBQ2hDOzs7OztDQUtDLEdBQ0QsU0FBU0QsZUFBZVMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLE9BQU87SUFDN0MsSUFBSUYsT0FBT0YsTUFBTSxLQUFLSyxhQUFhSCxPQUFPRixNQUFNLElBQUlGLHFCQUFxQjtRQUNyRSxPQUFPLElBQUlBLG1CQUFtQixDQUFDSSxPQUFPRixNQUFNLENBQUMsQ0FBQ0UsUUFBUUMsVUFBVUM7SUFDcEUsT0FDSztRQUNELE1BQU0sSUFBSUUsTUFBTSxDQUFDLHdDQUF3QyxFQUFFVixhQUFhVyxXQUFXLENBQUNMLFFBQVEsQ0FBQztJQUNqRztBQUNKO0FBQ0FiLHNCQUFzQixHQUFHSTtBQUN6Qjs7OztDQUlDLEdBQ0QsU0FBU0Qsb0JBQW9CVSxNQUFNO0lBQy9CLElBQUlBLE9BQU9GLE1BQU0sS0FBS0ssYUFBYUgsT0FBT0YsTUFBTSxJQUFJRixxQkFBcUI7UUFDckUsT0FBT0EsbUJBQW1CLENBQUNJLE9BQU9GLE1BQU0sQ0FBQyxDQUFDUixtQkFBbUIsQ0FBQ1U7SUFDbEUsT0FDSztRQUNELE1BQU0sSUFBSUksTUFBTSxDQUFDLGVBQWUsRUFBRVYsYUFBYVcsV0FBVyxDQUFDTCxRQUFRLENBQUM7SUFDeEU7QUFDSjtBQUNBYiwyQkFBMkIsR0FBR0c7QUFDOUIsU0FBU0Qsb0JBQW9CVyxNQUFNO0lBQy9CLElBQUlBLE9BQU9GLE1BQU0sS0FBS0ssYUFBYSxDQUFFSCxDQUFBQSxPQUFPRixNQUFNLElBQUlGLG1CQUFrQixHQUFJO1FBQ3hFLElBQUlDLGtCQUFrQixNQUFNO1lBQ3hCLE9BQU87Z0JBQ0hDLFFBQVFEO2dCQUNSUyxXQUFXSDtnQkFDWEksTUFBTWIsYUFBYVcsV0FBVyxDQUFDTDtZQUNuQztRQUNKLE9BQ0s7WUFDRCxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU9BO0FBQ1g7QUFDQWIsMkJBQTJCLEdBQUdFLHFCQUM5QixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZmMtbmV4dGpzLXNoYWRjbi8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9yZXNvbHZlci5qcz8xZDk3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1hcFVyaURlZmF1bHRTY2hlbWUgPSBleHBvcnRzLmdldERlZmF1bHRBdXRob3JpdHkgPSBleHBvcnRzLmNyZWF0ZVJlc29sdmVyID0gZXhwb3J0cy5yZWdpc3RlckRlZmF1bHRTY2hlbWUgPSBleHBvcnRzLnJlZ2lzdGVyUmVzb2x2ZXIgPSB2b2lkIDA7XG5jb25zdCB1cmlfcGFyc2VyXzEgPSByZXF1aXJlKFwiLi91cmktcGFyc2VyXCIpO1xuY29uc3QgcmVnaXN0ZXJlZFJlc29sdmVycyA9IHt9O1xubGV0IGRlZmF1bHRTY2hlbWUgPSBudWxsO1xuLyoqXG4gKiBSZWdpc3RlciBhIHJlc29sdmVyIGNsYXNzIHRvIGhhbmRsZSB0YXJnZXQgbmFtZXMgcHJlZml4ZWQgd2l0aCB0aGUgYHByZWZpeGBcbiAqIHN0cmluZy4gVGhpcyBwcmVmaXggc2hvdWxkIGNvcnJlc3BvbmQgdG8gYSBVUkkgc2NoZW1lIG5hbWUgbGlzdGVkIGluIHRoZVxuICogW2dSUEMgTmFtZSBSZXNvbHV0aW9uIGRvY3VtZW50XShodHRwczovL2dpdGh1Yi5jb20vZ3JwYy9ncnBjL2Jsb2IvbWFzdGVyL2RvYy9uYW1pbmcubWQpXG4gKiBAcGFyYW0gcHJlZml4XG4gKiBAcGFyYW0gcmVzb2x2ZXJDbGFzc1xuICovXG5mdW5jdGlvbiByZWdpc3RlclJlc29sdmVyKHNjaGVtZSwgcmVzb2x2ZXJDbGFzcykge1xuICAgIHJlZ2lzdGVyZWRSZXNvbHZlcnNbc2NoZW1lXSA9IHJlc29sdmVyQ2xhc3M7XG59XG5leHBvcnRzLnJlZ2lzdGVyUmVzb2x2ZXIgPSByZWdpc3RlclJlc29sdmVyO1xuLyoqXG4gKiBSZWdpc3RlciBhIGRlZmF1bHQgcmVzb2x2ZXIgdG8gaGFuZGxlIHRhcmdldCBuYW1lcyB0aGF0IGRvIG5vdCBzdGFydCB3aXRoXG4gKiBhbnkgcmVnaXN0ZXJlZCBwcmVmaXguXG4gKiBAcGFyYW0gcmVzb2x2ZXJDbGFzc1xuICovXG5mdW5jdGlvbiByZWdpc3RlckRlZmF1bHRTY2hlbWUoc2NoZW1lKSB7XG4gICAgZGVmYXVsdFNjaGVtZSA9IHNjaGVtZTtcbn1cbmV4cG9ydHMucmVnaXN0ZXJEZWZhdWx0U2NoZW1lID0gcmVnaXN0ZXJEZWZhdWx0U2NoZW1lO1xuLyoqXG4gKiBDcmVhdGUgYSBuYW1lIHJlc29sdmVyIGZvciB0aGUgc3BlY2lmaWVkIHRhcmdldCwgaWYgcG9zc2libGUuIFRocm93cyBhblxuICogZXJyb3IgaWYgbm8gc3VjaCBuYW1lIHJlc29sdmVyIGNhbiBiZSBjcmVhdGVkLlxuICogQHBhcmFtIHRhcmdldFxuICogQHBhcmFtIGxpc3RlbmVyXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlc29sdmVyKHRhcmdldCwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAodGFyZ2V0LnNjaGVtZSAhPT0gdW5kZWZpbmVkICYmIHRhcmdldC5zY2hlbWUgaW4gcmVnaXN0ZXJlZFJlc29sdmVycykge1xuICAgICAgICByZXR1cm4gbmV3IHJlZ2lzdGVyZWRSZXNvbHZlcnNbdGFyZ2V0LnNjaGVtZV0odGFyZ2V0LCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHJlc29sdmVyIGNvdWxkIGJlIGNyZWF0ZWQgZm9yIHRhcmdldCAke3VyaV9wYXJzZXJfMS51cmlUb1N0cmluZyh0YXJnZXQpfWApO1xuICAgIH1cbn1cbmV4cG9ydHMuY3JlYXRlUmVzb2x2ZXIgPSBjcmVhdGVSZXNvbHZlcjtcbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IGF1dGhvcml0eSBmb3IgdGhlIHNwZWNpZmllZCB0YXJnZXQsIGlmIHBvc3NpYmxlLiBUaHJvd3MgYW5cbiAqIGVycm9yIGlmIG5vIHJlZ2lzdGVyZWQgbmFtZSByZXNvbHZlciBjYW4gcGFyc2UgdGhhdCB0YXJnZXQgc3RyaW5nLlxuICogQHBhcmFtIHRhcmdldFxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0QXV0aG9yaXR5KHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQuc2NoZW1lICE9PSB1bmRlZmluZWQgJiYgdGFyZ2V0LnNjaGVtZSBpbiByZWdpc3RlcmVkUmVzb2x2ZXJzKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlcmVkUmVzb2x2ZXJzW3RhcmdldC5zY2hlbWVdLmdldERlZmF1bHRBdXRob3JpdHkodGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB0YXJnZXQgJHt1cmlfcGFyc2VyXzEudXJpVG9TdHJpbmcodGFyZ2V0KX1gKTtcbiAgICB9XG59XG5leHBvcnRzLmdldERlZmF1bHRBdXRob3JpdHkgPSBnZXREZWZhdWx0QXV0aG9yaXR5O1xuZnVuY3Rpb24gbWFwVXJpRGVmYXVsdFNjaGVtZSh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0LnNjaGVtZSA9PT0gdW5kZWZpbmVkIHx8ICEodGFyZ2V0LnNjaGVtZSBpbiByZWdpc3RlcmVkUmVzb2x2ZXJzKSkge1xuICAgICAgICBpZiAoZGVmYXVsdFNjaGVtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzY2hlbWU6IGRlZmF1bHRTY2hlbWUsXG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcGF0aDogdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKHRhcmdldCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmV4cG9ydHMubWFwVXJpRGVmYXVsdFNjaGVtZSA9IG1hcFVyaURlZmF1bHRTY2hlbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtYXBVcmlEZWZhdWx0U2NoZW1lIiwiZ2V0RGVmYXVsdEF1dGhvcml0eSIsImNyZWF0ZVJlc29sdmVyIiwicmVnaXN0ZXJEZWZhdWx0U2NoZW1lIiwicmVnaXN0ZXJSZXNvbHZlciIsInVyaV9wYXJzZXJfMSIsInJlcXVpcmUiLCJyZWdpc3RlcmVkUmVzb2x2ZXJzIiwiZGVmYXVsdFNjaGVtZSIsInNjaGVtZSIsInJlc29sdmVyQ2xhc3MiLCJ0YXJnZXQiLCJsaXN0ZW5lciIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJFcnJvciIsInVyaVRvU3RyaW5nIiwiYXV0aG9yaXR5IiwicGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ResolvingLoadBalancer = void 0;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst service_config_1 = __webpack_require__(/*! ./service-config */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/service-config.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\nconst TRACER_NAME = \"resolving_load_balancer\";\nfunction trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst DEFAULT_LOAD_BALANCER_NAME = \"pick_first\";\nfunction getDefaultConfigSelector(serviceConfig) {\n    return function defaultConfigSelector(methodName, metadata) {\n        var _a, _b;\n        const splitName = methodName.split(\"/\").filter((x)=>x.length > 0);\n        const service = (_a = splitName[0]) !== null && _a !== void 0 ? _a : \"\";\n        const method = (_b = splitName[1]) !== null && _b !== void 0 ? _b : \"\";\n        if (serviceConfig && serviceConfig.methodConfig) {\n            for (const methodConfig of serviceConfig.methodConfig){\n                for (const name of methodConfig.name){\n                    if (name.service === service && (name.method === undefined || name.method === method)) {\n                        return {\n                            methodConfig: methodConfig,\n                            pickInformation: {},\n                            status: constants_1.Status.OK,\n                            dynamicFilterFactories: []\n                        };\n                    }\n                }\n            }\n        }\n        return {\n            methodConfig: {\n                name: []\n            },\n            pickInformation: {},\n            status: constants_1.Status.OK,\n            dynamicFilterFactories: []\n        };\n    };\n}\nclass ResolvingLoadBalancer {\n    /**\n     * Wrapper class that behaves like a `LoadBalancer` and also handles name\n     * resolution internally.\n     * @param target The address of the backend to connect to.\n     * @param channelControlHelper `ChannelControlHelper` instance provided by\n     *     this load balancer's owner.\n     * @param defaultServiceConfig The default service configuration to be used\n     *     if none is provided by the name resolver. A `null` value indicates\n     *     that the default behavior should be the default unconfigured behavior.\n     *     In practice, that means using the \"pick first\" load balancer\n     *     implmentation\n     */ constructor(target, channelControlHelper, channelOptions, onSuccessfulResolution, onFailedResolution){\n        this.target = target;\n        this.channelControlHelper = channelControlHelper;\n        this.channelOptions = channelOptions;\n        this.onSuccessfulResolution = onSuccessfulResolution;\n        this.onFailedResolution = onFailedResolution;\n        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\n        this.latestChildPicker = new picker_1.QueuePicker(this);\n        /**\n         * This resolving load balancer's current connectivity state.\n         */ this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        /**\n         * The service config object from the last successful resolution, if\n         * available. A value of null indicates that we have not yet received a valid\n         * service config from the resolver.\n         */ this.previousServiceConfig = null;\n        /**\n         * Indicates whether we should attempt to resolve again after the backoff\n         * timer runs out.\n         */ this.continueResolving = false;\n        if (channelOptions[\"grpc.service_config\"]) {\n            this.defaultServiceConfig = service_config_1.validateServiceConfig(JSON.parse(channelOptions[\"grpc.service_config\"]));\n        } else {\n            this.defaultServiceConfig = {\n                loadBalancingConfig: [],\n                methodConfig: []\n            };\n        }\n        this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n        this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({\n            createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),\n            requestReresolution: ()=>{\n                /* If the backoffTimeout is running, we're still backing off from\n                 * making resolve requests, so we shouldn't make another one here.\n                 * In that case, the backoff timer callback will call\n                 * updateResolution */ if (this.backoffTimeout.isRunning()) {\n                    this.continueResolving = true;\n                } else {\n                    this.updateResolution();\n                }\n            },\n            updateState: (newState, picker)=>{\n                this.latestChildState = newState;\n                this.latestChildPicker = picker;\n                this.updateState(newState, picker);\n            },\n            addChannelzChild: channelControlHelper.addChannelzChild.bind(channelControlHelper),\n            removeChannelzChild: channelControlHelper.removeChannelzChild.bind(channelControlHelper)\n        });\n        this.innerResolver = resolver_1.createResolver(target, {\n            onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError, configSelector, attributes)=>{\n                var _a;\n                let workingServiceConfig = null;\n                /* This first group of conditionals implements the algorithm described\n                 * in https://github.com/grpc/proposal/blob/master/A21-service-config-error-handling.md\n                 * in the section called \"Behavior on receiving a new gRPC Config\".\n                 */ if (serviceConfig === null) {\n                    // Step 4 and 5\n                    if (serviceConfigError === null) {\n                        // Step 5\n                        this.previousServiceConfig = null;\n                        workingServiceConfig = this.defaultServiceConfig;\n                    } else {\n                        // Step 4\n                        if (this.previousServiceConfig === null) {\n                            // Step 4.ii\n                            this.handleResolutionFailure(serviceConfigError);\n                        } else {\n                            // Step 4.i\n                            workingServiceConfig = this.previousServiceConfig;\n                        }\n                    }\n                } else {\n                    // Step 3\n                    workingServiceConfig = serviceConfig;\n                    this.previousServiceConfig = serviceConfig;\n                }\n                const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];\n                const loadBalancingConfig = load_balancer_1.getFirstUsableConfig(workingConfigList, true);\n                if (loadBalancingConfig === null) {\n                    // There were load balancing configs but none are supported. This counts as a resolution failure\n                    this.handleResolutionFailure({\n                        code: constants_1.Status.UNAVAILABLE,\n                        details: \"All load balancer options in service config are not compatible\",\n                        metadata: new metadata_1.Metadata()\n                    });\n                    return;\n                }\n                this.childLoadBalancer.updateAddressList(addressList, loadBalancingConfig, attributes);\n                const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;\n                this.onSuccessfulResolution(configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));\n            },\n            onError: (error)=>{\n                this.handleResolutionFailure(error);\n            }\n        }, channelOptions);\n        const backoffOptions = {\n            initialDelay: channelOptions[\"grpc.initial_reconnect_backoff_ms\"],\n            maxDelay: channelOptions[\"grpc.max_reconnect_backoff_ms\"]\n        };\n        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(()=>{\n            if (this.continueResolving) {\n                this.updateResolution();\n                this.continueResolving = false;\n            } else {\n                this.updateState(this.latestChildState, this.latestChildPicker);\n            }\n        }, backoffOptions);\n        this.backoffTimeout.unref();\n    }\n    updateResolution() {\n        this.innerResolver.updateResolution();\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE) {\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n        }\n        this.backoffTimeout.runOnce();\n    }\n    updateState(connectivityState, picker) {\n        trace(uri_parser_1.uriToString(this.target) + \" \" + connectivity_state_1.ConnectivityState[this.currentState] + \" -> \" + connectivity_state_1.ConnectivityState[connectivityState]);\n        // Ensure that this.exitIdle() is called by the picker\n        if (connectivityState === connectivity_state_1.ConnectivityState.IDLE) {\n            picker = new picker_1.QueuePicker(this);\n        }\n        this.currentState = connectivityState;\n        this.channelControlHelper.updateState(connectivityState, picker);\n    }\n    handleResolutionFailure(error) {\n        if (this.latestChildState === connectivity_state_1.ConnectivityState.IDLE) {\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker(error));\n            this.onFailedResolution(error);\n        }\n    }\n    exitIdle() {\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE || this.currentState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n            if (this.backoffTimeout.isRunning()) {\n                this.continueResolving = true;\n            } else {\n                this.updateResolution();\n            }\n        }\n        this.childLoadBalancer.exitIdle();\n    }\n    updateAddressList(addressList, lbConfig) {\n        throw new Error(\"updateAddressList not supported on ResolvingLoadBalancer\");\n    }\n    resetBackoff() {\n        this.backoffTimeout.reset();\n        this.childLoadBalancer.resetBackoff();\n    }\n    destroy() {\n        this.childLoadBalancer.destroy();\n        this.innerResolver.destroy();\n        this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN, new picker_1.UnavailablePicker());\n    }\n    getTypeName() {\n        return \"resolving_load_balancer\";\n    }\n}\nexports.ResolvingLoadBalancer = ResolvingLoadBalancer; //# sourceMappingURL=resolving-load-balancer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/server-call.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server-call.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Http2ServerCallStream = exports.ServerDuplexStreamImpl = exports.ServerWritableStreamImpl = exports.ServerReadableStreamImpl = exports.ServerUnaryCallImpl = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst stream_decoder_1 = __webpack_require__(/*! ./stream-decoder */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = \"server_call\";\nconst unzip = util_1.promisify(zlib.unzip);\nconst inflate = util_1.promisify(zlib.inflate);\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst GRPC_ACCEPT_ENCODING_HEADER = \"grpc-accept-encoding\";\nconst GRPC_ENCODING_HEADER = \"grpc-encoding\";\nconst GRPC_MESSAGE_HEADER = \"grpc-message\";\nconst GRPC_STATUS_HEADER = \"grpc-status\";\nconst GRPC_TIMEOUT_HEADER = \"grpc-timeout\";\nconst DEADLINE_REGEX = /(\\d{1,8})\\s*([HMSmun])/;\nconst deadlineUnitsToMs = {\n    H: 3600000,\n    M: 60000,\n    S: 1000,\n    m: 1,\n    u: 0.001,\n    n: 0.000001\n};\nconst defaultResponseHeaders = {\n    // TODO(cjihrig): Remove these encoding headers from the default response\n    // once compression is integrated.\n    [GRPC_ACCEPT_ENCODING_HEADER]: \"identity,deflate,gzip\",\n    [GRPC_ENCODING_HEADER]: \"identity\",\n    [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,\n    [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: \"application/grpc+proto\"\n};\nconst defaultResponseOptions = {\n    waitForTrailers: true\n};\nclass ServerUnaryCallImpl extends events_1.EventEmitter {\n    constructor(call, metadata, request){\n        super();\n        this.call = call;\n        this.metadata = metadata;\n        this.request = request;\n        this.cancelled = false;\n        this.call.setupSurfaceCall(this);\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.call.getPath();\n    }\n}\nexports.ServerUnaryCallImpl = ServerUnaryCallImpl;\nclass ServerReadableStreamImpl extends stream_1.Readable {\n    constructor(call, metadata, deserialize, encoding){\n        super({\n            objectMode: true\n        });\n        this.call = call;\n        this.metadata = metadata;\n        this.deserialize = deserialize;\n        this.cancelled = false;\n        this.call.setupSurfaceCall(this);\n        this.call.setupReadable(this, encoding);\n    }\n    _read(size) {\n        if (!this.call.consumeUnpushedMessages(this)) {\n            return;\n        }\n        this.call.resume();\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.call.getPath();\n    }\n}\nexports.ServerReadableStreamImpl = ServerReadableStreamImpl;\nclass ServerWritableStreamImpl extends stream_1.Writable {\n    constructor(call, metadata, serialize, request){\n        super({\n            objectMode: true\n        });\n        this.call = call;\n        this.metadata = metadata;\n        this.serialize = serialize;\n        this.request = request;\n        this.cancelled = false;\n        this.trailingMetadata = new metadata_1.Metadata();\n        this.call.setupSurfaceCall(this);\n        this.on(\"error\", (err)=>{\n            this.call.sendError(err);\n            this.end();\n        });\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.call.getPath();\n    }\n    _write(chunk, encoding, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback) {\n        try {\n            const response = this.call.serializeMessage(chunk);\n            if (!this.call.write(response)) {\n                this.call.once(\"drain\", callback);\n                return;\n            }\n        } catch (err) {\n            err.code = constants_1.Status.INTERNAL;\n            this.emit(\"error\", err);\n        }\n        callback();\n    }\n    _final(callback) {\n        this.call.sendStatus({\n            code: constants_1.Status.OK,\n            details: \"OK\",\n            metadata: this.trailingMetadata\n        });\n        callback(null);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    end(metadata) {\n        if (metadata) {\n            this.trailingMetadata = metadata;\n        }\n        return super.end();\n    }\n}\nexports.ServerWritableStreamImpl = ServerWritableStreamImpl;\nclass ServerDuplexStreamImpl extends stream_1.Duplex {\n    constructor(call, metadata, serialize, deserialize, encoding){\n        super({\n            objectMode: true\n        });\n        this.call = call;\n        this.metadata = metadata;\n        this.serialize = serialize;\n        this.deserialize = deserialize;\n        this.cancelled = false;\n        this.trailingMetadata = new metadata_1.Metadata();\n        this.call.setupSurfaceCall(this);\n        this.call.setupReadable(this, encoding);\n        this.on(\"error\", (err)=>{\n            this.call.sendError(err);\n            this.end();\n        });\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.call.getPath();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    end(metadata) {\n        if (metadata) {\n            this.trailingMetadata = metadata;\n        }\n        return super.end();\n    }\n}\nexports.ServerDuplexStreamImpl = ServerDuplexStreamImpl;\nServerDuplexStreamImpl.prototype._read = ServerReadableStreamImpl.prototype._read;\nServerDuplexStreamImpl.prototype._write = ServerWritableStreamImpl.prototype._write;\nServerDuplexStreamImpl.prototype._final = ServerWritableStreamImpl.prototype._final;\n// Internal class that wraps the HTTP2 request.\nclass Http2ServerCallStream extends events_1.EventEmitter {\n    constructor(stream, handler, options){\n        super();\n        this.stream = stream;\n        this.handler = handler;\n        this.options = options;\n        this.cancelled = false;\n        this.deadlineTimer = null;\n        this.statusSent = false;\n        this.deadline = Infinity;\n        this.wantTrailers = false;\n        this.metadataSent = false;\n        this.canPush = false;\n        this.isPushPending = false;\n        this.bufferedMessages = [];\n        this.messagesToPush = [];\n        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n        this.stream.once(\"error\", (err)=>{\n        /* We need an error handler to avoid uncaught error event exceptions, but\n             * there is nothing we can reasonably do here. Any error event should\n             * have a corresponding close event, which handles emitting the cancelled\n             * event. And the stream is now in a bad state, so we can't reasonably\n             * expect to be able to send an error over it. */ });\n        this.stream.once(\"close\", ()=>{\n            var _a;\n            trace(\"Request to method \" + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + \" stream closed with rstCode \" + this.stream.rstCode);\n            if (!this.statusSent) {\n                this.cancelled = true;\n                this.emit(\"cancelled\", \"cancelled\");\n                this.emit(\"streamEnd\", false);\n                this.sendStatus({\n                    code: constants_1.Status.CANCELLED,\n                    details: \"Cancelled by client\",\n                    metadata: null\n                });\n            }\n        });\n        this.stream.on(\"drain\", ()=>{\n            this.emit(\"drain\");\n        });\n        if (\"grpc.max_send_message_length\" in options) {\n            this.maxSendMessageSize = options[\"grpc.max_send_message_length\"];\n        }\n        if (\"grpc.max_receive_message_length\" in options) {\n            this.maxReceiveMessageSize = options[\"grpc.max_receive_message_length\"];\n        }\n    }\n    checkCancelled() {\n        /* In some cases the stream can become destroyed before the close event\n         * fires. That creates a race condition that this check works around */ if (this.stream.destroyed || this.stream.closed) {\n            this.cancelled = true;\n        }\n        return this.cancelled;\n    }\n    getDecompressedMessage(message, encoding) {\n        if (encoding === \"deflate\") {\n            return inflate(message.subarray(5));\n        } else if (encoding === \"gzip\") {\n            return unzip(message.subarray(5));\n        } else if (encoding === \"identity\") {\n            return message.subarray(5);\n        }\n        return Promise.reject({\n            code: constants_1.Status.UNIMPLEMENTED,\n            details: `Received message compressed with unsupported encoding \"${encoding}\"`\n        });\n    }\n    sendMetadata(customMetadata) {\n        if (this.checkCancelled()) {\n            return;\n        }\n        if (this.metadataSent) {\n            return;\n        }\n        this.metadataSent = true;\n        const custom = customMetadata ? customMetadata.toHttp2Headers() : null;\n        // TODO(cjihrig): Include compression headers.\n        const headers = Object.assign(Object.assign({}, defaultResponseHeaders), custom);\n        this.stream.respond(headers, defaultResponseOptions);\n    }\n    receiveMetadata(headers) {\n        const metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n        if (logging.isTracerEnabled(TRACER_NAME)) {\n            trace(\"Request to \" + this.handler.path + \" received headers \" + JSON.stringify(metadata.toJSON()));\n        }\n        // TODO(cjihrig): Receive compression metadata.\n        const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);\n        if (timeoutHeader.length > 0) {\n            const match = timeoutHeader[0].toString().match(DEADLINE_REGEX);\n            if (match === null) {\n                const err = new Error(\"Invalid deadline\");\n                err.code = constants_1.Status.OUT_OF_RANGE;\n                this.sendError(err);\n                return metadata;\n            }\n            const timeout = +match[1] * deadlineUnitsToMs[match[2]] | 0;\n            const now = new Date();\n            this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);\n            this.deadlineTimer = setTimeout(handleExpiredDeadline, timeout, this);\n            metadata.remove(GRPC_TIMEOUT_HEADER);\n        }\n        // Remove several headers that should not be propagated to the application\n        metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);\n        metadata.remove(http2.constants.HTTP2_HEADER_TE);\n        metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);\n        metadata.remove(\"grpc-accept-encoding\");\n        return metadata;\n    }\n    receiveUnaryMessage(encoding, next) {\n        const { stream } = this;\n        let receivedLength = 0;\n        const call = this;\n        const body = [];\n        const limit = this.maxReceiveMessageSize;\n        stream.on(\"data\", onData);\n        stream.on(\"end\", onEnd);\n        stream.on(\"error\", onEnd);\n        function onData(chunk) {\n            receivedLength += chunk.byteLength;\n            if (limit !== -1 && receivedLength > limit) {\n                stream.removeListener(\"data\", onData);\n                stream.removeListener(\"end\", onEnd);\n                stream.removeListener(\"error\", onEnd);\n                next({\n                    code: constants_1.Status.RESOURCE_EXHAUSTED,\n                    details: `Received message larger than max (${receivedLength} vs. ${limit})`\n                });\n                return;\n            }\n            body.push(chunk);\n        }\n        function onEnd(err) {\n            stream.removeListener(\"data\", onData);\n            stream.removeListener(\"end\", onEnd);\n            stream.removeListener(\"error\", onEnd);\n            if (err !== undefined) {\n                next({\n                    code: constants_1.Status.INTERNAL,\n                    details: err.message\n                });\n                return;\n            }\n            if (receivedLength === 0) {\n                next({\n                    code: constants_1.Status.INTERNAL,\n                    details: \"received empty unary message\"\n                });\n                return;\n            }\n            call.emit(\"receiveMessage\");\n            const requestBytes = Buffer.concat(body, receivedLength);\n            const compressed = requestBytes.readUInt8(0) === 1;\n            const compressedMessageEncoding = compressed ? encoding : \"identity\";\n            const decompressedMessage = call.getDecompressedMessage(requestBytes, compressedMessageEncoding);\n            if (Buffer.isBuffer(decompressedMessage)) {\n                call.safeDeserializeMessage(decompressedMessage, next);\n                return;\n            }\n            decompressedMessage.then((decompressed)=>call.safeDeserializeMessage(decompressed, next), (err)=>next(err.code ? err : {\n                    code: constants_1.Status.INTERNAL,\n                    details: `Received \"grpc-encoding\" header \"${encoding}\" but ${encoding} decompression failed`\n                }));\n        }\n    }\n    safeDeserializeMessage(buffer, next) {\n        try {\n            next(null, this.deserializeMessage(buffer));\n        } catch (err) {\n            err.code = constants_1.Status.INTERNAL;\n            next(err);\n        }\n    }\n    serializeMessage(value) {\n        const messageBuffer = this.handler.serialize(value);\n        // TODO(cjihrig): Call compression aware serializeMessage().\n        const byteLength = messageBuffer.byteLength;\n        const output = Buffer.allocUnsafe(byteLength + 5);\n        output.writeUInt8(0, 0);\n        output.writeUInt32BE(byteLength, 1);\n        messageBuffer.copy(output, 5);\n        return output;\n    }\n    deserializeMessage(bytes) {\n        return this.handler.deserialize(bytes);\n    }\n    async sendUnaryMessage(err, value, metadata, flags) {\n        if (this.checkCancelled()) {\n            return;\n        }\n        if (metadata === undefined) {\n            metadata = null;\n        }\n        if (err) {\n            if (!Object.prototype.hasOwnProperty.call(err, \"metadata\") && metadata) {\n                err.metadata = metadata;\n            }\n            this.sendError(err);\n            return;\n        }\n        try {\n            const response = this.serializeMessage(value);\n            this.write(response);\n            this.sendStatus({\n                code: constants_1.Status.OK,\n                details: \"OK\",\n                metadata\n            });\n        } catch (err) {\n            err.code = constants_1.Status.INTERNAL;\n            this.sendError(err);\n        }\n    }\n    sendStatus(statusObj) {\n        var _a;\n        this.emit(\"callEnd\", statusObj.code);\n        this.emit(\"streamEnd\", statusObj.code === constants_1.Status.OK);\n        if (this.checkCancelled()) {\n            return;\n        }\n        trace(\"Request to method \" + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + \" ended with status code: \" + constants_1.Status[statusObj.code] + \" details: \" + statusObj.details);\n        if (this.deadlineTimer) clearTimeout(this.deadlineTimer);\n        if (!this.wantTrailers) {\n            this.wantTrailers = true;\n            this.stream.once(\"wantTrailers\", ()=>{\n                var _a;\n                const trailersToSend = Object.assign({\n                    [GRPC_STATUS_HEADER]: statusObj.code,\n                    [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details)\n                }, (_a = statusObj.metadata) === null || _a === void 0 ? void 0 : _a.toHttp2Headers());\n                this.stream.sendTrailers(trailersToSend);\n                this.statusSent = true;\n            });\n            this.sendMetadata();\n            this.stream.end();\n        }\n    }\n    sendError(error) {\n        const status = {\n            code: constants_1.Status.UNKNOWN,\n            details: \"message\" in error ? error.message : \"Unknown Error\",\n            metadata: \"metadata\" in error && error.metadata !== undefined ? error.metadata : null\n        };\n        if (\"code\" in error && typeof error.code === \"number\" && Number.isInteger(error.code)) {\n            status.code = error.code;\n            if (\"details\" in error && typeof error.details === \"string\") {\n                status.details = error.details;\n            }\n        }\n        this.sendStatus(status);\n    }\n    write(chunk) {\n        if (this.checkCancelled()) {\n            return;\n        }\n        if (this.maxSendMessageSize !== -1 && chunk.length > this.maxSendMessageSize) {\n            this.sendError({\n                code: constants_1.Status.RESOURCE_EXHAUSTED,\n                details: `Sent message larger than max (${chunk.length} vs. ${this.maxSendMessageSize})`\n            });\n            return;\n        }\n        this.sendMetadata();\n        this.emit(\"sendMessage\");\n        return this.stream.write(chunk);\n    }\n    resume() {\n        this.stream.resume();\n    }\n    setupSurfaceCall(call) {\n        this.once(\"cancelled\", (reason)=>{\n            call.cancelled = true;\n            call.emit(\"cancelled\", reason);\n        });\n        this.once(\"callEnd\", (status)=>call.emit(\"callEnd\", status));\n    }\n    setupReadable(readable, encoding) {\n        const decoder = new stream_decoder_1.StreamDecoder();\n        let readsDone = false;\n        let pendingMessageProcessing = false;\n        let pushedEnd = false;\n        const maybePushEnd = ()=>{\n            if (!pushedEnd && readsDone && !pendingMessageProcessing) {\n                pushedEnd = true;\n                this.pushOrBufferMessage(readable, null);\n            }\n        };\n        this.stream.on(\"data\", async (data)=>{\n            const messages = decoder.write(data);\n            pendingMessageProcessing = true;\n            this.stream.pause();\n            for (const message of messages){\n                if (this.maxReceiveMessageSize !== -1 && message.length > this.maxReceiveMessageSize) {\n                    this.sendError({\n                        code: constants_1.Status.RESOURCE_EXHAUSTED,\n                        details: `Received message larger than max (${message.length} vs. ${this.maxReceiveMessageSize})`\n                    });\n                    return;\n                }\n                this.emit(\"receiveMessage\");\n                const compressed = message.readUInt8(0) === 1;\n                const compressedMessageEncoding = compressed ? encoding : \"identity\";\n                const decompressedMessage = await this.getDecompressedMessage(message, compressedMessageEncoding);\n                // Encountered an error with decompression; it'll already have been propogated back\n                // Just return early\n                if (!decompressedMessage) return;\n                this.pushOrBufferMessage(readable, decompressedMessage);\n            }\n            pendingMessageProcessing = false;\n            this.stream.resume();\n            maybePushEnd();\n        });\n        this.stream.once(\"end\", ()=>{\n            readsDone = true;\n            maybePushEnd();\n        });\n    }\n    consumeUnpushedMessages(readable) {\n        this.canPush = true;\n        while(this.messagesToPush.length > 0){\n            const nextMessage = this.messagesToPush.shift();\n            const canPush = readable.push(nextMessage);\n            if (nextMessage === null || canPush === false) {\n                this.canPush = false;\n                break;\n            }\n        }\n        return this.canPush;\n    }\n    pushOrBufferMessage(readable, messageBytes) {\n        if (this.isPushPending) {\n            this.bufferedMessages.push(messageBytes);\n        } else {\n            this.pushMessage(readable, messageBytes);\n        }\n    }\n    async pushMessage(readable, messageBytes) {\n        if (messageBytes === null) {\n            trace(\"Received end of stream\");\n            if (this.canPush) {\n                readable.push(null);\n            } else {\n                this.messagesToPush.push(null);\n            }\n            return;\n        }\n        trace(\"Received message of length \" + messageBytes.length);\n        this.isPushPending = true;\n        try {\n            const deserialized = await this.deserializeMessage(messageBytes);\n            if (this.canPush) {\n                if (!readable.push(deserialized)) {\n                    this.canPush = false;\n                    this.stream.pause();\n                }\n            } else {\n                this.messagesToPush.push(deserialized);\n            }\n        } catch (error) {\n            // Ignore any remaining messages when errors occur.\n            this.bufferedMessages.length = 0;\n            if (!(\"code\" in error && typeof error.code === \"number\" && Number.isInteger(error.code) && error.code >= constants_1.Status.OK && error.code <= constants_1.Status.UNAUTHENTICATED)) {\n                // The error code is not a valid gRPC code so its being overwritten.\n                error.code = constants_1.Status.INTERNAL;\n            }\n            readable.emit(\"error\", error);\n        }\n        this.isPushPending = false;\n        if (this.bufferedMessages.length > 0) {\n            this.pushMessage(readable, this.bufferedMessages.shift());\n        }\n    }\n    getPeer() {\n        const socket = this.stream.session.socket;\n        if (socket.remoteAddress) {\n            if (socket.remotePort) {\n                return `${socket.remoteAddress}:${socket.remotePort}`;\n            } else {\n                return socket.remoteAddress;\n            }\n        } else {\n            return \"unknown\";\n        }\n    }\n    getDeadline() {\n        return this.deadline;\n    }\n    getPath() {\n        return this.handler.path;\n    }\n}\nexports.Http2ServerCallStream = Http2ServerCallStream;\nfunction handleExpiredDeadline(call) {\n    const err = new Error(\"Deadline exceeded\");\n    err.code = constants_1.Status.DEADLINE_EXCEEDED;\n    call.sendError(err);\n    call.cancelled = true;\n    call.emit(\"cancelled\", \"deadline\");\n} //# sourceMappingURL=server-call.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/server-call.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server-credentials.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ServerCredentials = void 0;\nconst tls_helpers_1 = __webpack_require__(/*! ./tls-helpers */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\");\nclass ServerCredentials {\n    static createInsecure() {\n        return new InsecureServerCredentials();\n    }\n    static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {\n        if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\n            throw new TypeError(\"rootCerts must be null or a Buffer\");\n        }\n        if (!Array.isArray(keyCertPairs)) {\n            throw new TypeError(\"keyCertPairs must be an array\");\n        }\n        if (typeof checkClientCertificate !== \"boolean\") {\n            throw new TypeError(\"checkClientCertificate must be a boolean\");\n        }\n        const cert = [];\n        const key = [];\n        for(let i = 0; i < keyCertPairs.length; i++){\n            const pair = keyCertPairs[i];\n            if (pair === null || typeof pair !== \"object\") {\n                throw new TypeError(`keyCertPair[${i}] must be an object`);\n            }\n            if (!Buffer.isBuffer(pair.private_key)) {\n                throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);\n            }\n            if (!Buffer.isBuffer(pair.cert_chain)) {\n                throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);\n            }\n            cert.push(pair.cert_chain);\n            key.push(pair.private_key);\n        }\n        return new SecureServerCredentials({\n            ca: rootCerts || tls_helpers_1.getDefaultRootsData() || undefined,\n            cert,\n            key,\n            requestCert: checkClientCertificate,\n            ciphers: tls_helpers_1.CIPHER_SUITES\n        });\n    }\n}\nexports.ServerCredentials = ServerCredentials;\nclass InsecureServerCredentials extends ServerCredentials {\n    _isSecure() {\n        return false;\n    }\n    _getSettings() {\n        return null;\n    }\n}\nclass SecureServerCredentials extends ServerCredentials {\n    constructor(options){\n        super();\n        this.options = options;\n    }\n    _isSecure() {\n        return true;\n    }\n    _getSettings() {\n        return this.options;\n    }\n} //# sourceMappingURL=server-credentials.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc2VydmVyLWNyZWRlbnRpYWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBRyxLQUFLO0FBQ2pDLE1BQU1HLGdCQUFnQkMsbUJBQU9BLENBQUMsa0ZBQWU7QUFDN0MsTUFBTUY7SUFDRixPQUFPRyxpQkFBaUI7UUFDcEIsT0FBTyxJQUFJQztJQUNmO0lBQ0EsT0FBT0MsVUFBVUMsU0FBUyxFQUFFQyxZQUFZLEVBQUVDLHlCQUF5QixLQUFLLEVBQUU7UUFDdEUsSUFBSUYsY0FBYyxRQUFRLENBQUNHLE9BQU9DLFFBQVEsQ0FBQ0osWUFBWTtZQUNuRCxNQUFNLElBQUlLLFVBQVU7UUFDeEI7UUFDQSxJQUFJLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ04sZUFBZTtZQUM5QixNQUFNLElBQUlJLFVBQVU7UUFDeEI7UUFDQSxJQUFJLE9BQU9ILDJCQUEyQixXQUFXO1lBQzdDLE1BQU0sSUFBSUcsVUFBVTtRQUN4QjtRQUNBLE1BQU1HLE9BQU8sRUFBRTtRQUNmLE1BQU1DLE1BQU0sRUFBRTtRQUNkLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJVCxhQUFhVSxNQUFNLEVBQUVELElBQUs7WUFDMUMsTUFBTUUsT0FBT1gsWUFBWSxDQUFDUyxFQUFFO1lBQzVCLElBQUlFLFNBQVMsUUFBUSxPQUFPQSxTQUFTLFVBQVU7Z0JBQzNDLE1BQU0sSUFBSVAsVUFBVSxDQUFDLFlBQVksRUFBRUssRUFBRSxtQkFBbUIsQ0FBQztZQUM3RDtZQUNBLElBQUksQ0FBQ1AsT0FBT0MsUUFBUSxDQUFDUSxLQUFLQyxXQUFXLEdBQUc7Z0JBQ3BDLE1BQU0sSUFBSVIsVUFBVSxDQUFDLFlBQVksRUFBRUssRUFBRSw4QkFBOEIsQ0FBQztZQUN4RTtZQUNBLElBQUksQ0FBQ1AsT0FBT0MsUUFBUSxDQUFDUSxLQUFLRSxVQUFVLEdBQUc7Z0JBQ25DLE1BQU0sSUFBSVQsVUFBVSxDQUFDLFlBQVksRUFBRUssRUFBRSw2QkFBNkIsQ0FBQztZQUN2RTtZQUNBRixLQUFLTyxJQUFJLENBQUNILEtBQUtFLFVBQVU7WUFDekJMLElBQUlNLElBQUksQ0FBQ0gsS0FBS0MsV0FBVztRQUM3QjtRQUNBLE9BQU8sSUFBSUcsd0JBQXdCO1lBQy9CQyxJQUFJakIsYUFBYUwsY0FBY3VCLG1CQUFtQixNQUFNQztZQUN4RFg7WUFDQUM7WUFDQVcsYUFBYWxCO1lBQ2JtQixTQUFTMUIsY0FBYzJCLGFBQWE7UUFDeEM7SUFDSjtBQUNKO0FBQ0E5Qix5QkFBeUIsR0FBR0U7QUFDNUIsTUFBTUksa0NBQWtDSjtJQUNwQzZCLFlBQVk7UUFDUixPQUFPO0lBQ1g7SUFDQUMsZUFBZTtRQUNYLE9BQU87SUFDWDtBQUNKO0FBQ0EsTUFBTVIsZ0NBQWdDdEI7SUFDbEMrQixZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSztRQUNMLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtJQUNuQjtJQUNBSCxZQUFZO1FBQ1IsT0FBTztJQUNYO0lBQ0FDLGVBQWU7UUFDWCxPQUFPLElBQUksQ0FBQ0UsT0FBTztJQUN2QjtBQUNKLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZjLW5leHRqcy1zaGFkY24vLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc2VydmVyLWNyZWRlbnRpYWxzLmpzP2RjNzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VydmVyQ3JlZGVudGlhbHMgPSB2b2lkIDA7XG5jb25zdCB0bHNfaGVscGVyc18xID0gcmVxdWlyZShcIi4vdGxzLWhlbHBlcnNcIik7XG5jbGFzcyBTZXJ2ZXJDcmVkZW50aWFscyB7XG4gICAgc3RhdGljIGNyZWF0ZUluc2VjdXJlKCkge1xuICAgICAgICByZXR1cm4gbmV3IEluc2VjdXJlU2VydmVyQ3JlZGVudGlhbHMoKTtcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZVNzbChyb290Q2VydHMsIGtleUNlcnRQYWlycywgY2hlY2tDbGllbnRDZXJ0aWZpY2F0ZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChyb290Q2VydHMgIT09IG51bGwgJiYgIUJ1ZmZlci5pc0J1ZmZlcihyb290Q2VydHMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyb290Q2VydHMgbXVzdCBiZSBudWxsIG9yIGEgQnVmZmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGtleUNlcnRQYWlycykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2tleUNlcnRQYWlycyBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjaGVja0NsaWVudENlcnRpZmljYXRlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NoZWNrQ2xpZW50Q2VydGlmaWNhdGUgbXVzdCBiZSBhIGJvb2xlYW4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZXJ0ID0gW107XG4gICAgICAgIGNvbnN0IGtleSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleUNlcnRQYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcGFpciA9IGtleUNlcnRQYWlyc1tpXTtcbiAgICAgICAgICAgIGlmIChwYWlyID09PSBudWxsIHx8IHR5cGVvZiBwYWlyICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGtleUNlcnRQYWlyWyR7aX1dIG11c3QgYmUgYW4gb2JqZWN0YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYWlyLnByaXZhdGVfa2V5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGtleUNlcnRQYWlyWyR7aX1dLnByaXZhdGVfa2V5IG11c3QgYmUgYSBCdWZmZXJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhaXIuY2VydF9jaGFpbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBrZXlDZXJ0UGFpclske2l9XS5jZXJ0X2NoYWluIG11c3QgYmUgYSBCdWZmZXJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNlcnQucHVzaChwYWlyLmNlcnRfY2hhaW4pO1xuICAgICAgICAgICAga2V5LnB1c2gocGFpci5wcml2YXRlX2tleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTZWN1cmVTZXJ2ZXJDcmVkZW50aWFscyh7XG4gICAgICAgICAgICBjYTogcm9vdENlcnRzIHx8IHRsc19oZWxwZXJzXzEuZ2V0RGVmYXVsdFJvb3RzRGF0YSgpIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNlcnQsXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICByZXF1ZXN0Q2VydDogY2hlY2tDbGllbnRDZXJ0aWZpY2F0ZSxcbiAgICAgICAgICAgIGNpcGhlcnM6IHRsc19oZWxwZXJzXzEuQ0lQSEVSX1NVSVRFUyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJDcmVkZW50aWFscyA9IFNlcnZlckNyZWRlbnRpYWxzO1xuY2xhc3MgSW5zZWN1cmVTZXJ2ZXJDcmVkZW50aWFscyBleHRlbmRzIFNlcnZlckNyZWRlbnRpYWxzIHtcbiAgICBfaXNTZWN1cmUoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2dldFNldHRpbmdzKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5jbGFzcyBTZWN1cmVTZXJ2ZXJDcmVkZW50aWFscyBleHRlbmRzIFNlcnZlckNyZWRlbnRpYWxzIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIF9pc1NlY3VyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9nZXRTZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJ2ZXItY3JlZGVudGlhbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2VydmVyQ3JlZGVudGlhbHMiLCJ0bHNfaGVscGVyc18xIiwicmVxdWlyZSIsImNyZWF0ZUluc2VjdXJlIiwiSW5zZWN1cmVTZXJ2ZXJDcmVkZW50aWFscyIsImNyZWF0ZVNzbCIsInJvb3RDZXJ0cyIsImtleUNlcnRQYWlycyIsImNoZWNrQ2xpZW50Q2VydGlmaWNhdGUiLCJCdWZmZXIiLCJpc0J1ZmZlciIsIlR5cGVFcnJvciIsIkFycmF5IiwiaXNBcnJheSIsImNlcnQiLCJrZXkiLCJpIiwibGVuZ3RoIiwicGFpciIsInByaXZhdGVfa2V5IiwiY2VydF9jaGFpbiIsInB1c2giLCJTZWN1cmVTZXJ2ZXJDcmVkZW50aWFscyIsImNhIiwiZ2V0RGVmYXVsdFJvb3RzRGF0YSIsInVuZGVmaW5lZCIsInJlcXVlc3RDZXJ0IiwiY2lwaGVycyIsIkNJUEhFUl9TVUlURVMiLCJfaXNTZWN1cmUiLCJfZ2V0U2V0dGluZ3MiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/server.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Server = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst server_call_1 = __webpack_require__(/*! ./server-call */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/server-call.js\");\nconst server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst { HTTP2_HEADER_PATH } = http2.constants;\nconst TRACER_NAME = \"server\";\nfunction noop() {}\nfunction getUnimplementedStatusResponse(methodName) {\n    return {\n        code: constants_1.Status.UNIMPLEMENTED,\n        details: `The server does not implement the method ${methodName}`\n    };\n}\nfunction getDefaultHandler(handlerType, methodName) {\n    const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);\n    switch(handlerType){\n        case \"unary\":\n            return (call, callback)=>{\n                callback(unimplementedStatusResponse, null);\n            };\n        case \"clientStream\":\n            return (call, callback)=>{\n                callback(unimplementedStatusResponse, null);\n            };\n        case \"serverStream\":\n            return (call)=>{\n                call.emit(\"error\", unimplementedStatusResponse);\n            };\n        case \"bidi\":\n            return (call)=>{\n                call.emit(\"error\", unimplementedStatusResponse);\n            };\n        default:\n            throw new Error(`Invalid handlerType ${handlerType}`);\n    }\n}\nclass Server {\n    constructor(options){\n        this.http2ServerList = [];\n        this.handlers = new Map();\n        this.sessions = new Map();\n        this.started = false;\n        this.serverAddressString = \"null\";\n        // Channelz Info\n        this.channelzEnabled = true;\n        this.channelzTrace = new channelz_1.ChannelzTrace();\n        this.callTracker = new channelz_1.ChannelzCallTracker();\n        this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n        this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n        this.options = options !== null && options !== void 0 ? options : {};\n        if (this.options[\"grpc.enable_channelz\"] === 0) {\n            this.channelzEnabled = false;\n        }\n        this.channelzRef = channelz_1.registerChannelzServer(()=>this.getChannelzInfo(), this.channelzEnabled);\n        if (this.channelzEnabled) {\n            this.channelzTrace.addTrace(\"CT_INFO\", \"Server created\");\n        }\n        this.trace(\"Server constructed\");\n    }\n    getChannelzInfo() {\n        return {\n            trace: this.channelzTrace,\n            callTracker: this.callTracker,\n            listenerChildren: this.listenerChildrenTracker.getChildLists(),\n            sessionChildren: this.sessionChildrenTracker.getChildLists()\n        };\n    }\n    getChannelzSessionInfoGetter(session) {\n        return ()=>{\n            var _a, _b, _c;\n            const sessionInfo = this.sessions.get(session);\n            const sessionSocket = session.socket;\n            const remoteAddress = sessionSocket.remoteAddress ? subchannel_address_1.stringToSubchannelAddress(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n            const localAddress = sessionSocket.localAddress ? subchannel_address_1.stringToSubchannelAddress(sessionSocket.localAddress, sessionSocket.localPort) : null;\n            let tlsInfo;\n            if (session.encrypted) {\n                const tlsSocket = sessionSocket;\n                const cipherInfo = tlsSocket.getCipher();\n                const certificate = tlsSocket.getCertificate();\n                const peerCertificate = tlsSocket.getPeerCertificate();\n                tlsInfo = {\n                    cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\n                    cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n                    localCertificate: certificate && \"raw\" in certificate ? certificate.raw : null,\n                    remoteCertificate: peerCertificate && \"raw\" in peerCertificate ? peerCertificate.raw : null\n                };\n            } else {\n                tlsInfo = null;\n            }\n            const socketInfo = {\n                remoteAddress: remoteAddress,\n                localAddress: localAddress,\n                security: tlsInfo,\n                remoteName: null,\n                streamsStarted: sessionInfo.streamTracker.callsStarted,\n                streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,\n                streamsFailed: sessionInfo.streamTracker.callsFailed,\n                messagesSent: sessionInfo.messagesSent,\n                messagesReceived: sessionInfo.messagesReceived,\n                keepAlivesSent: 0,\n                lastLocalStreamCreatedTimestamp: null,\n                lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,\n                lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,\n                lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,\n                localFlowControlWindow: (_b = session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\n                remoteFlowControlWindow: (_c = session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null\n            };\n            return socketInfo;\n        };\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, \"(\" + this.channelzRef.id + \") \" + text);\n    }\n    addProtoService() {\n        throw new Error(\"Not implemented. Use addService() instead\");\n    }\n    addService(service, implementation) {\n        if (service === null || typeof service !== \"object\" || implementation === null || typeof implementation !== \"object\") {\n            throw new Error(\"addService() requires two objects as arguments\");\n        }\n        const serviceKeys = Object.keys(service);\n        if (serviceKeys.length === 0) {\n            throw new Error(\"Cannot add an empty service to a server\");\n        }\n        serviceKeys.forEach((name)=>{\n            const attrs = service[name];\n            let methodType;\n            if (attrs.requestStream) {\n                if (attrs.responseStream) {\n                    methodType = \"bidi\";\n                } else {\n                    methodType = \"clientStream\";\n                }\n            } else {\n                if (attrs.responseStream) {\n                    methodType = \"serverStream\";\n                } else {\n                    methodType = \"unary\";\n                }\n            }\n            let implFn = implementation[name];\n            let impl;\n            if (implFn === undefined && typeof attrs.originalName === \"string\") {\n                implFn = implementation[attrs.originalName];\n            }\n            if (implFn !== undefined) {\n                impl = implFn.bind(implementation);\n            } else {\n                impl = getDefaultHandler(methodType, name);\n            }\n            const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);\n            if (success === false) {\n                throw new Error(`Method handler for ${attrs.path} already provided.`);\n            }\n        });\n    }\n    removeService(service) {\n        if (service === null || typeof service !== \"object\") {\n            throw new Error(\"removeService() requires object as argument\");\n        }\n        const serviceKeys = Object.keys(service);\n        serviceKeys.forEach((name)=>{\n            const attrs = service[name];\n            this.unregister(attrs.path);\n        });\n    }\n    bind(port, creds) {\n        throw new Error(\"Not implemented. Use bindAsync() instead\");\n    }\n    bindAsync(port, creds, callback) {\n        if (this.started === true) {\n            throw new Error(\"server is already started\");\n        }\n        if (typeof port !== \"string\") {\n            throw new TypeError(\"port must be a string\");\n        }\n        if (creds === null || !(creds instanceof server_credentials_1.ServerCredentials)) {\n            throw new TypeError(\"creds must be a ServerCredentials object\");\n        }\n        if (typeof callback !== \"function\") {\n            throw new TypeError(\"callback must be a function\");\n        }\n        const initialPortUri = uri_parser_1.parseUri(port);\n        if (initialPortUri === null) {\n            throw new Error(`Could not parse port \"${port}\"`);\n        }\n        const portUri = resolver_1.mapUriDefaultScheme(initialPortUri);\n        if (portUri === null) {\n            throw new Error(`Could not get a default scheme for port \"${port}\"`);\n        }\n        const serverOptions = {\n            maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER\n        };\n        if (\"grpc-node.max_session_memory\" in this.options) {\n            serverOptions.maxSessionMemory = this.options[\"grpc-node.max_session_memory\"];\n        } else {\n            /* By default, set a very large max session memory limit, to effectively\n             * disable enforcement of the limit. Some testing indicates that Node's\n             * behavior degrades badly when this limit is reached, so we solve that\n             * by disabling the check entirely. */ serverOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\n        }\n        if (\"grpc.max_concurrent_streams\" in this.options) {\n            serverOptions.settings = {\n                maxConcurrentStreams: this.options[\"grpc.max_concurrent_streams\"]\n            };\n        }\n        const deferredCallback = (error, port)=>{\n            process.nextTick(()=>callback(error, port));\n        };\n        const setupServer = ()=>{\n            let http2Server;\n            if (creds._isSecure()) {\n                const secureServerOptions = Object.assign(serverOptions, creds._getSettings());\n                http2Server = http2.createSecureServer(secureServerOptions);\n                http2Server.on(\"secureConnection\", (socket)=>{\n                    /* These errors need to be handled by the user of Http2SecureServer,\n                     * according to https://github.com/nodejs/node/issues/35824 */ socket.on(\"error\", (e)=>{\n                        this.trace(\"An incoming TLS connection closed with error: \" + e.message);\n                    });\n                });\n            } else {\n                http2Server = http2.createServer(serverOptions);\n            }\n            http2Server.setTimeout(0, noop);\n            this._setupHandlers(http2Server);\n            return http2Server;\n        };\n        const bindSpecificPort = (addressList, portNum, previousCount)=>{\n            if (addressList.length === 0) {\n                return Promise.resolve({\n                    port: portNum,\n                    count: previousCount\n                });\n            }\n            return Promise.all(addressList.map((address)=>{\n                this.trace(\"Attempting to bind \" + subchannel_address_1.subchannelAddressToString(address));\n                let addr;\n                if (subchannel_address_1.isTcpSubchannelAddress(address)) {\n                    addr = {\n                        host: address.host,\n                        port: portNum\n                    };\n                } else {\n                    addr = address;\n                }\n                const http2Server = setupServer();\n                return new Promise((resolve, reject)=>{\n                    const onError = (err)=>{\n                        this.trace(\"Failed to bind \" + subchannel_address_1.subchannelAddressToString(address) + \" with error \" + err.message);\n                        resolve(err);\n                    };\n                    http2Server.once(\"error\", onError);\n                    http2Server.listen(addr, ()=>{\n                        const boundAddress = http2Server.address();\n                        let boundSubchannelAddress;\n                        if (typeof boundAddress === \"string\") {\n                            boundSubchannelAddress = {\n                                path: boundAddress\n                            };\n                        } else {\n                            boundSubchannelAddress = {\n                                host: boundAddress.address,\n                                port: boundAddress.port\n                            };\n                        }\n                        let channelzRef;\n                        channelzRef = channelz_1.registerChannelzSocket(subchannel_address_1.subchannelAddressToString(boundSubchannelAddress), ()=>{\n                            return {\n                                localAddress: boundSubchannelAddress,\n                                remoteAddress: null,\n                                security: null,\n                                remoteName: null,\n                                streamsStarted: 0,\n                                streamsSucceeded: 0,\n                                streamsFailed: 0,\n                                messagesSent: 0,\n                                messagesReceived: 0,\n                                keepAlivesSent: 0,\n                                lastLocalStreamCreatedTimestamp: null,\n                                lastRemoteStreamCreatedTimestamp: null,\n                                lastMessageSentTimestamp: null,\n                                lastMessageReceivedTimestamp: null,\n                                localFlowControlWindow: null,\n                                remoteFlowControlWindow: null\n                            };\n                        }, this.channelzEnabled);\n                        if (this.channelzEnabled) {\n                            this.listenerChildrenTracker.refChild(channelzRef);\n                        }\n                        this.http2ServerList.push({\n                            server: http2Server,\n                            channelzRef: channelzRef\n                        });\n                        this.trace(\"Successfully bound \" + subchannel_address_1.subchannelAddressToString(boundSubchannelAddress));\n                        resolve(\"port\" in boundSubchannelAddress ? boundSubchannelAddress.port : portNum);\n                        http2Server.removeListener(\"error\", onError);\n                    });\n                });\n            })).then((results)=>{\n                let count = 0;\n                for (const result of results){\n                    if (typeof result === \"number\") {\n                        count += 1;\n                        if (result !== portNum) {\n                            throw new Error(\"Invalid state: multiple port numbers added from single address\");\n                        }\n                    }\n                }\n                return {\n                    port: portNum,\n                    count: count + previousCount\n                };\n            });\n        };\n        const bindWildcardPort = (addressList)=>{\n            if (addressList.length === 0) {\n                return Promise.resolve({\n                    port: 0,\n                    count: 0\n                });\n            }\n            const address = addressList[0];\n            const http2Server = setupServer();\n            return new Promise((resolve, reject)=>{\n                const onError = (err)=>{\n                    this.trace(\"Failed to bind \" + subchannel_address_1.subchannelAddressToString(address) + \" with error \" + err.message);\n                    resolve(bindWildcardPort(addressList.slice(1)));\n                };\n                http2Server.once(\"error\", onError);\n                http2Server.listen(address, ()=>{\n                    const boundAddress = http2Server.address();\n                    const boundSubchannelAddress = {\n                        host: boundAddress.address,\n                        port: boundAddress.port\n                    };\n                    let channelzRef;\n                    channelzRef = channelz_1.registerChannelzSocket(subchannel_address_1.subchannelAddressToString(boundSubchannelAddress), ()=>{\n                        return {\n                            localAddress: boundSubchannelAddress,\n                            remoteAddress: null,\n                            security: null,\n                            remoteName: null,\n                            streamsStarted: 0,\n                            streamsSucceeded: 0,\n                            streamsFailed: 0,\n                            messagesSent: 0,\n                            messagesReceived: 0,\n                            keepAlivesSent: 0,\n                            lastLocalStreamCreatedTimestamp: null,\n                            lastRemoteStreamCreatedTimestamp: null,\n                            lastMessageSentTimestamp: null,\n                            lastMessageReceivedTimestamp: null,\n                            localFlowControlWindow: null,\n                            remoteFlowControlWindow: null\n                        };\n                    }, this.channelzEnabled);\n                    if (this.channelzEnabled) {\n                        this.listenerChildrenTracker.refChild(channelzRef);\n                    }\n                    this.http2ServerList.push({\n                        server: http2Server,\n                        channelzRef: channelzRef\n                    });\n                    this.trace(\"Successfully bound \" + subchannel_address_1.subchannelAddressToString(boundSubchannelAddress));\n                    resolve(bindSpecificPort(addressList.slice(1), boundAddress.port, 1));\n                    http2Server.removeListener(\"error\", onError);\n                });\n            });\n        };\n        const resolverListener = {\n            onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError)=>{\n                // We only want one resolution result. Discard all future results\n                resolverListener.onSuccessfulResolution = ()=>{};\n                if (addressList.length === 0) {\n                    deferredCallback(new Error(`No addresses resolved for port ${port}`), 0);\n                    return;\n                }\n                let bindResultPromise;\n                if (subchannel_address_1.isTcpSubchannelAddress(addressList[0])) {\n                    if (addressList[0].port === 0) {\n                        bindResultPromise = bindWildcardPort(addressList);\n                    } else {\n                        bindResultPromise = bindSpecificPort(addressList, addressList[0].port, 0);\n                    }\n                } else {\n                    // Use an arbitrary non-zero port for non-TCP addresses\n                    bindResultPromise = bindSpecificPort(addressList, 1, 0);\n                }\n                bindResultPromise.then((bindResult)=>{\n                    if (bindResult.count === 0) {\n                        const errorString = `No address added out of total ${addressList.length} resolved`;\n                        logging.log(constants_1.LogVerbosity.ERROR, errorString);\n                        deferredCallback(new Error(errorString), 0);\n                    } else {\n                        if (bindResult.count < addressList.length) {\n                            logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);\n                        }\n                        deferredCallback(null, bindResult.port);\n                    }\n                }, (error)=>{\n                    const errorString = `No address added out of total ${addressList.length} resolved`;\n                    logging.log(constants_1.LogVerbosity.ERROR, errorString);\n                    deferredCallback(new Error(errorString), 0);\n                });\n            },\n            onError: (error)=>{\n                deferredCallback(new Error(error.details), 0);\n            }\n        };\n        const resolver = resolver_1.createResolver(portUri, resolverListener, this.options);\n        resolver.updateResolution();\n    }\n    forceShutdown() {\n        // Close the server if it is still running.\n        for (const { server: http2Server, channelzRef: ref } of this.http2ServerList){\n            if (http2Server.listening) {\n                http2Server.close(()=>{\n                    if (this.channelzEnabled) {\n                        this.listenerChildrenTracker.unrefChild(ref);\n                        channelz_1.unregisterChannelzRef(ref);\n                    }\n                });\n            }\n        }\n        this.started = false;\n        // Always destroy any available sessions. It's possible that one or more\n        // tryShutdown() calls are in progress. Don't wait on them to finish.\n        this.sessions.forEach((channelzInfo, session)=>{\n            // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to\n            // recognize destroy(code) as a valid signature.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            session.destroy(http2.constants.NGHTTP2_CANCEL);\n        });\n        this.sessions.clear();\n        if (this.channelzEnabled) {\n            channelz_1.unregisterChannelzRef(this.channelzRef);\n        }\n    }\n    register(name, handler, serialize, deserialize, type) {\n        if (this.handlers.has(name)) {\n            return false;\n        }\n        this.handlers.set(name, {\n            func: handler,\n            serialize,\n            deserialize,\n            type,\n            path: name\n        });\n        return true;\n    }\n    unregister(name) {\n        return this.handlers.delete(name);\n    }\n    start() {\n        if (this.http2ServerList.length === 0 || this.http2ServerList.every(({ server: http2Server })=>http2Server.listening !== true)) {\n            throw new Error(\"server must be bound in order to start\");\n        }\n        if (this.started === true) {\n            throw new Error(\"server is already started\");\n        }\n        if (this.channelzEnabled) {\n            this.channelzTrace.addTrace(\"CT_INFO\", \"Starting\");\n        }\n        this.started = true;\n    }\n    tryShutdown(callback) {\n        const wrappedCallback = (error)=>{\n            if (this.channelzEnabled) {\n                channelz_1.unregisterChannelzRef(this.channelzRef);\n            }\n            callback(error);\n        };\n        let pendingChecks = 0;\n        function maybeCallback() {\n            pendingChecks--;\n            if (pendingChecks === 0) {\n                wrappedCallback();\n            }\n        }\n        // Close the server if necessary.\n        this.started = false;\n        for (const { server: http2Server, channelzRef: ref } of this.http2ServerList){\n            if (http2Server.listening) {\n                pendingChecks++;\n                http2Server.close(()=>{\n                    if (this.channelzEnabled) {\n                        this.listenerChildrenTracker.unrefChild(ref);\n                        channelz_1.unregisterChannelzRef(ref);\n                    }\n                    maybeCallback();\n                });\n            }\n        }\n        this.sessions.forEach((channelzInfo, session)=>{\n            if (!session.closed) {\n                pendingChecks += 1;\n                session.close(maybeCallback);\n            }\n        });\n        if (pendingChecks === 0) {\n            wrappedCallback();\n        }\n    }\n    addHttp2Port() {\n        throw new Error(\"Not yet implemented\");\n    }\n    /**\n     * Get the channelz reference object for this server. The returned value is\n     * garbage if channelz is disabled for this server.\n     * @returns\n     */ getChannelzRef() {\n        return this.channelzRef;\n    }\n    _verifyContentType(stream, headers) {\n        const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];\n        if (typeof contentType !== \"string\" || !contentType.startsWith(\"application/grpc\")) {\n            stream.respond({\n                [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE\n            }, {\n                endStream: true\n            });\n            return false;\n        }\n        return true;\n    }\n    _retrieveHandler(headers) {\n        const path = headers[HTTP2_HEADER_PATH];\n        this.trace(\"Received call to method \" + path + \" at address \" + this.serverAddressString);\n        const handler = this.handlers.get(path);\n        if (handler === undefined) {\n            this.trace(\"No handler registered for method \" + path + \". Sending UNIMPLEMENTED status.\");\n            throw getUnimplementedStatusResponse(path);\n        }\n        return handler;\n    }\n    _respondWithError(err, stream, channelzSessionInfo = null) {\n        const call = new server_call_1.Http2ServerCallStream(stream, null, this.options);\n        if (err.code === undefined) {\n            err.code = constants_1.Status.INTERNAL;\n        }\n        if (this.channelzEnabled) {\n            this.callTracker.addCallFailed();\n            channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n        }\n        call.sendError(err);\n    }\n    _channelzHandler(stream, headers) {\n        const channelzSessionInfo = this.sessions.get(stream.session);\n        this.callTracker.addCallStarted();\n        channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallStarted();\n        if (!this._verifyContentType(stream, headers)) {\n            this.callTracker.addCallFailed();\n            channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n            return;\n        }\n        let handler;\n        try {\n            handler = this._retrieveHandler(headers);\n        } catch (err) {\n            this._respondWithError(err, stream, channelzSessionInfo);\n            return;\n        }\n        const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);\n        call.once(\"callEnd\", (code)=>{\n            if (code === constants_1.Status.OK) {\n                this.callTracker.addCallSucceeded();\n            } else {\n                this.callTracker.addCallFailed();\n            }\n        });\n        if (channelzSessionInfo) {\n            call.once(\"streamEnd\", (success)=>{\n                if (success) {\n                    channelzSessionInfo.streamTracker.addCallSucceeded();\n                } else {\n                    channelzSessionInfo.streamTracker.addCallFailed();\n                }\n            });\n            call.on(\"sendMessage\", ()=>{\n                channelzSessionInfo.messagesSent += 1;\n                channelzSessionInfo.lastMessageSentTimestamp = new Date();\n            });\n            call.on(\"receiveMessage\", ()=>{\n                channelzSessionInfo.messagesReceived += 1;\n                channelzSessionInfo.lastMessageReceivedTimestamp = new Date();\n            });\n        }\n        if (!this._runHandlerForCall(call, handler, headers)) {\n            this.callTracker.addCallFailed();\n            channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n            call.sendError({\n                code: constants_1.Status.INTERNAL,\n                details: `Unknown handler type: ${handler.type}`\n            });\n        }\n    }\n    _streamHandler(stream, headers) {\n        if (this._verifyContentType(stream, headers) !== true) {\n            return;\n        }\n        let handler;\n        try {\n            handler = this._retrieveHandler(headers);\n        } catch (err) {\n            this._respondWithError(err, stream, null);\n            return;\n        }\n        const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);\n        if (!this._runHandlerForCall(call, handler, headers)) {\n            call.sendError({\n                code: constants_1.Status.INTERNAL,\n                details: `Unknown handler type: ${handler.type}`\n            });\n        }\n    }\n    _runHandlerForCall(call, handler, headers) {\n        var _a;\n        const metadata = call.receiveMetadata(headers);\n        const encoding = (_a = metadata.get(\"grpc-encoding\")[0]) !== null && _a !== void 0 ? _a : \"identity\";\n        metadata.remove(\"grpc-encoding\");\n        const { type } = handler;\n        if (type === \"unary\") {\n            handleUnary(call, handler, metadata, encoding);\n        } else if (type === \"clientStream\") {\n            handleClientStreaming(call, handler, metadata, encoding);\n        } else if (type === \"serverStream\") {\n            handleServerStreaming(call, handler, metadata, encoding);\n        } else if (type === \"bidi\") {\n            handleBidiStreaming(call, handler, metadata, encoding);\n        } else {\n            return false;\n        }\n        return true;\n    }\n    _setupHandlers(http2Server) {\n        if (http2Server === null) {\n            return;\n        }\n        const serverAddress = http2Server.address();\n        let serverAddressString = \"null\";\n        if (serverAddress) {\n            if (typeof serverAddress === \"string\") {\n                serverAddressString = serverAddress;\n            } else {\n                serverAddressString = serverAddress.address + \":\" + serverAddress.port;\n            }\n        }\n        this.serverAddressString = serverAddressString;\n        const handler = this.channelzEnabled ? this._channelzHandler : this._streamHandler;\n        http2Server.on(\"stream\", handler.bind(this));\n        http2Server.on(\"session\", (session)=>{\n            var _a;\n            if (!this.started) {\n                session.destroy();\n                return;\n            }\n            let channelzRef;\n            channelzRef = channelz_1.registerChannelzSocket((_a = session.socket.remoteAddress) !== null && _a !== void 0 ? _a : \"unknown\", this.getChannelzSessionInfoGetter(session), this.channelzEnabled);\n            const channelzSessionInfo = {\n                ref: channelzRef,\n                streamTracker: new channelz_1.ChannelzCallTracker(),\n                messagesSent: 0,\n                messagesReceived: 0,\n                lastMessageSentTimestamp: null,\n                lastMessageReceivedTimestamp: null\n            };\n            this.sessions.set(session, channelzSessionInfo);\n            const clientAddress = session.socket.remoteAddress;\n            if (this.channelzEnabled) {\n                this.channelzTrace.addTrace(\"CT_INFO\", \"Connection established by client \" + clientAddress);\n                this.sessionChildrenTracker.refChild(channelzRef);\n            }\n            session.on(\"close\", ()=>{\n                if (this.channelzEnabled) {\n                    this.channelzTrace.addTrace(\"CT_INFO\", \"Connection dropped by client \" + clientAddress);\n                    this.sessionChildrenTracker.unrefChild(channelzRef);\n                    channelz_1.unregisterChannelzRef(channelzRef);\n                }\n                this.sessions.delete(session);\n            });\n        });\n    }\n}\nexports.Server = Server;\nfunction handleUnary(call, handler, metadata, encoding) {\n    call.receiveUnaryMessage(encoding, (err, request)=>{\n        if (err) {\n            call.sendError(err);\n            return;\n        }\n        if (request === undefined || call.cancelled) {\n            return;\n        }\n        const emitter = new server_call_1.ServerUnaryCallImpl(call, metadata, request);\n        handler.func(emitter, (err, value, trailer, flags)=>{\n            call.sendUnaryMessage(err, value, trailer, flags);\n        });\n    });\n}\nfunction handleClientStreaming(call, handler, metadata, encoding) {\n    const stream = new server_call_1.ServerReadableStreamImpl(call, metadata, handler.deserialize, encoding);\n    function respond(err, value, trailer, flags) {\n        stream.destroy();\n        call.sendUnaryMessage(err, value, trailer, flags);\n    }\n    if (call.cancelled) {\n        return;\n    }\n    stream.on(\"error\", respond);\n    handler.func(stream, respond);\n}\nfunction handleServerStreaming(call, handler, metadata, encoding) {\n    call.receiveUnaryMessage(encoding, (err, request)=>{\n        if (err) {\n            call.sendError(err);\n            return;\n        }\n        if (request === undefined || call.cancelled) {\n            return;\n        }\n        const stream = new server_call_1.ServerWritableStreamImpl(call, metadata, handler.serialize, request);\n        handler.func(stream);\n    });\n}\nfunction handleBidiStreaming(call, handler, metadata, encoding) {\n    const stream = new server_call_1.ServerDuplexStreamImpl(call, metadata, handler.serialize, handler.deserialize, encoding);\n    if (call.cancelled) {\n        return;\n    }\n    handler.func(stream);\n} //# sourceMappingURL=server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/service-config.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/service-config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.extractAndSelectServiceConfig = exports.validateServiceConfig = void 0;\n/* This file implements gRFC A2 and the service config spec:\n * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md\n * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each\n * function here takes an object with unknown structure and returns its\n * specific object type if the input has the right structure, and throws an\n * error otherwise. */ /* The any type is purposely used here. All functions validate their input at\n * runtime */ /* eslint-disable @typescript-eslint/no-explicit-any */ const os = __webpack_require__(/*! os */ \"os\");\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\n/**\n * Recognizes a number with up to 9 digits after the decimal point, followed by\n * an \"s\", representing a number of seconds.\n */ const TIMEOUT_REGEX = /^\\d+(\\.\\d{1,9})?s$/;\n/**\n * Client language name used for determining whether this client matches a\n * `ServiceConfigCanaryConfig`'s `clientLanguage` list.\n */ const CLIENT_LANGUAGE_STRING = \"node\";\nfunction validateName(obj) {\n    if (!(\"service\" in obj) || typeof obj.service !== \"string\") {\n        throw new Error(\"Invalid method config name: invalid service\");\n    }\n    const result = {\n        service: obj.service\n    };\n    if (\"method\" in obj) {\n        if (typeof obj.method === \"string\") {\n            result.method = obj.method;\n        } else {\n            throw new Error(\"Invalid method config name: invalid method\");\n        }\n    }\n    return result;\n}\nfunction validateMethodConfig(obj) {\n    var _a;\n    const result = {\n        name: []\n    };\n    if (!(\"name\" in obj) || !Array.isArray(obj.name)) {\n        throw new Error(\"Invalid method config: invalid name array\");\n    }\n    for (const name of obj.name){\n        result.name.push(validateName(name));\n    }\n    if (\"waitForReady\" in obj) {\n        if (typeof obj.waitForReady !== \"boolean\") {\n            throw new Error(\"Invalid method config: invalid waitForReady\");\n        }\n        result.waitForReady = obj.waitForReady;\n    }\n    if (\"timeout\" in obj) {\n        if (typeof obj.timeout === \"object\") {\n            if (!(\"seconds\" in obj.timeout) || !(typeof obj.timeout.seconds === \"number\")) {\n                throw new Error(\"Invalid method config: invalid timeout.seconds\");\n            }\n            if (!(\"nanos\" in obj.timeout) || !(typeof obj.timeout.nanos === \"number\")) {\n                throw new Error(\"Invalid method config: invalid timeout.nanos\");\n            }\n            result.timeout = obj.timeout;\n        } else if (typeof obj.timeout === \"string\" && TIMEOUT_REGEX.test(obj.timeout)) {\n            const timeoutParts = obj.timeout.substring(0, obj.timeout.length - 1).split(\".\");\n            result.timeout = {\n                seconds: timeoutParts[0] | 0,\n                nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0\n            };\n        } else {\n            throw new Error(\"Invalid method config: invalid timeout\");\n        }\n    }\n    if (\"maxRequestBytes\" in obj) {\n        if (typeof obj.maxRequestBytes !== \"number\") {\n            throw new Error(\"Invalid method config: invalid maxRequestBytes\");\n        }\n        result.maxRequestBytes = obj.maxRequestBytes;\n    }\n    if (\"maxResponseBytes\" in obj) {\n        if (typeof obj.maxResponseBytes !== \"number\") {\n            throw new Error(\"Invalid method config: invalid maxRequestBytes\");\n        }\n        result.maxResponseBytes = obj.maxResponseBytes;\n    }\n    return result;\n}\nfunction validateServiceConfig(obj) {\n    const result = {\n        loadBalancingConfig: [],\n        methodConfig: []\n    };\n    if (\"loadBalancingPolicy\" in obj) {\n        if (typeof obj.loadBalancingPolicy === \"string\") {\n            result.loadBalancingPolicy = obj.loadBalancingPolicy;\n        } else {\n            throw new Error(\"Invalid service config: invalid loadBalancingPolicy\");\n        }\n    }\n    if (\"loadBalancingConfig\" in obj) {\n        if (Array.isArray(obj.loadBalancingConfig)) {\n            for (const config of obj.loadBalancingConfig){\n                result.loadBalancingConfig.push(load_balancer_1.validateLoadBalancingConfig(config));\n            }\n        } else {\n            throw new Error(\"Invalid service config: invalid loadBalancingConfig\");\n        }\n    }\n    if (\"methodConfig\" in obj) {\n        if (Array.isArray(obj.methodConfig)) {\n            for (const methodConfig of obj.methodConfig){\n                result.methodConfig.push(validateMethodConfig(methodConfig));\n            }\n        }\n    }\n    // Validate method name uniqueness\n    const seenMethodNames = [];\n    for (const methodConfig of result.methodConfig){\n        for (const name of methodConfig.name){\n            for (const seenName of seenMethodNames){\n                if (name.service === seenName.service && name.method === seenName.method) {\n                    throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);\n                }\n            }\n            seenMethodNames.push(name);\n        }\n    }\n    return result;\n}\nexports.validateServiceConfig = validateServiceConfig;\nfunction validateCanaryConfig(obj) {\n    if (!(\"serviceConfig\" in obj)) {\n        throw new Error(\"Invalid service config choice: missing service config\");\n    }\n    const result = {\n        serviceConfig: validateServiceConfig(obj.serviceConfig)\n    };\n    if (\"clientLanguage\" in obj) {\n        if (Array.isArray(obj.clientLanguage)) {\n            result.clientLanguage = [];\n            for (const lang of obj.clientLanguage){\n                if (typeof lang === \"string\") {\n                    result.clientLanguage.push(lang);\n                } else {\n                    throw new Error(\"Invalid service config choice: invalid clientLanguage\");\n                }\n            }\n        } else {\n            throw new Error(\"Invalid service config choice: invalid clientLanguage\");\n        }\n    }\n    if (\"clientHostname\" in obj) {\n        if (Array.isArray(obj.clientHostname)) {\n            result.clientHostname = [];\n            for (const lang of obj.clientHostname){\n                if (typeof lang === \"string\") {\n                    result.clientHostname.push(lang);\n                } else {\n                    throw new Error(\"Invalid service config choice: invalid clientHostname\");\n                }\n            }\n        } else {\n            throw new Error(\"Invalid service config choice: invalid clientHostname\");\n        }\n    }\n    if (\"percentage\" in obj) {\n        if (typeof obj.percentage === \"number\" && 0 <= obj.percentage && obj.percentage <= 100) {\n            result.percentage = obj.percentage;\n        } else {\n            throw new Error(\"Invalid service config choice: invalid percentage\");\n        }\n    }\n    // Validate that no unexpected fields are present\n    const allowedFields = [\n        \"clientLanguage\",\n        \"percentage\",\n        \"clientHostname\",\n        \"serviceConfig\"\n    ];\n    for(const field in obj){\n        if (!allowedFields.includes(field)) {\n            throw new Error(`Invalid service config choice: unexpected field ${field}`);\n        }\n    }\n    return result;\n}\nfunction validateAndSelectCanaryConfig(obj, percentage) {\n    if (!Array.isArray(obj)) {\n        throw new Error(\"Invalid service config list\");\n    }\n    for (const config of obj){\n        const validatedConfig = validateCanaryConfig(config);\n        /* For each field, we check if it is present, then only discard the\n         * config if the field value does not match the current client */ if (typeof validatedConfig.percentage === \"number\" && percentage > validatedConfig.percentage) {\n            continue;\n        }\n        if (Array.isArray(validatedConfig.clientHostname)) {\n            let hostnameMatched = false;\n            for (const hostname of validatedConfig.clientHostname){\n                if (hostname === os.hostname()) {\n                    hostnameMatched = true;\n                }\n            }\n            if (!hostnameMatched) {\n                continue;\n            }\n        }\n        if (Array.isArray(validatedConfig.clientLanguage)) {\n            let languageMatched = false;\n            for (const language of validatedConfig.clientLanguage){\n                if (language === CLIENT_LANGUAGE_STRING) {\n                    languageMatched = true;\n                }\n            }\n            if (!languageMatched) {\n                continue;\n            }\n        }\n        return validatedConfig.serviceConfig;\n    }\n    throw new Error(\"No matching service config found\");\n}\n/**\n * Find the \"grpc_config\" record among the TXT records, parse its value as JSON, validate its contents,\n * and select a service config with selection fields that all match this client. Most of these steps\n * can fail with an error; the caller must handle any errors thrown this way.\n * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt\n * @param percentage A number chosen from the range [0, 100) that is used to select which config to use\n * @return The service configuration to use, given the percentage value, or null if the service config\n *     data has a valid format but none of the options match the current client.\n */ function extractAndSelectServiceConfig(txtRecord, percentage) {\n    for (const record of txtRecord){\n        if (record.length > 0 && record[0].startsWith(\"grpc_config=\")) {\n            /* Treat the list of strings in this record as a single string and remove\n             * \"grpc_config=\" from the beginning. The rest should be a JSON string */ const recordString = record.join(\"\").substring(\"grpc_config=\".length);\n            const recordJson = JSON.parse(recordString);\n            return validateAndSelectCanaryConfig(recordJson, percentage);\n        }\n    }\n    return null;\n}\nexports.extractAndSelectServiceConfig = extractAndSelectServiceConfig; //# sourceMappingURL=service-config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/service-config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/status-builder.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/status-builder.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StatusBuilder = void 0;\n/**\n * A builder for gRPC status objects.\n */ class StatusBuilder {\n    constructor(){\n        this.code = null;\n        this.details = null;\n        this.metadata = null;\n    }\n    /**\n     * Adds a status code to the builder.\n     */ withCode(code) {\n        this.code = code;\n        return this;\n    }\n    /**\n     * Adds details to the builder.\n     */ withDetails(details) {\n        this.details = details;\n        return this;\n    }\n    /**\n     * Adds metadata to the builder.\n     */ withMetadata(metadata) {\n        this.metadata = metadata;\n        return this;\n    }\n    /**\n     * Builds the status object.\n     */ build() {\n        const status = {};\n        if (this.code !== null) {\n            status.code = this.code;\n        }\n        if (this.details !== null) {\n            status.details = this.details;\n        }\n        if (this.metadata !== null) {\n            status.metadata = this.metadata;\n        }\n        return status;\n    }\n}\nexports.StatusBuilder = StatusBuilder; //# sourceMappingURL=status-builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3RhdHVzLWJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHLEtBQUs7QUFDN0I7O0NBRUMsR0FDRCxNQUFNRTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ3BCO0lBQ0E7O0tBRUMsR0FDREMsU0FBU0gsSUFBSSxFQUFFO1FBQ1gsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO1FBQ1osT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7S0FFQyxHQUNESSxZQUFZSCxPQUFPLEVBQUU7UUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7S0FFQyxHQUNESSxhQUFhSCxRQUFRLEVBQUU7UUFDbkIsSUFBSSxDQUFDQSxRQUFRLEdBQUdBO1FBQ2hCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7O0tBRUMsR0FDREksUUFBUTtRQUNKLE1BQU1DLFNBQVMsQ0FBQztRQUNoQixJQUFJLElBQUksQ0FBQ1AsSUFBSSxLQUFLLE1BQU07WUFDcEJPLE9BQU9QLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUk7UUFDM0I7UUFDQSxJQUFJLElBQUksQ0FBQ0MsT0FBTyxLQUFLLE1BQU07WUFDdkJNLE9BQU9OLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU87UUFDakM7UUFDQSxJQUFJLElBQUksQ0FBQ0MsUUFBUSxLQUFLLE1BQU07WUFDeEJLLE9BQU9MLFFBQVEsR0FBRyxJQUFJLENBQUNBLFFBQVE7UUFDbkM7UUFDQSxPQUFPSztJQUNYO0FBQ0o7QUFDQVgscUJBQXFCLEdBQUdFLGVBQ3hCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3N0YXR1cy1idWlsZGVyLmpzP2QyOTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RhdHVzQnVpbGRlciA9IHZvaWQgMDtcbi8qKlxuICogQSBidWlsZGVyIGZvciBnUlBDIHN0YXR1cyBvYmplY3RzLlxuICovXG5jbGFzcyBTdGF0dXNCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gbnVsbDtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBzdGF0dXMgY29kZSB0byB0aGUgYnVpbGRlci5cbiAgICAgKi9cbiAgICB3aXRoQ29kZShjb2RlKSB7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGRldGFpbHMgdG8gdGhlIGJ1aWxkZXIuXG4gICAgICovXG4gICAgd2l0aERldGFpbHMoZGV0YWlscykge1xuICAgICAgICB0aGlzLmRldGFpbHMgPSBkZXRhaWxzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBtZXRhZGF0YSB0byB0aGUgYnVpbGRlci5cbiAgICAgKi9cbiAgICB3aXRoTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQnVpbGRzIHRoZSBzdGF0dXMgb2JqZWN0LlxuICAgICAqL1xuICAgIGJ1aWxkKCkge1xuICAgICAgICBjb25zdCBzdGF0dXMgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMuY29kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhdHVzLmNvZGUgPSB0aGlzLmNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGV0YWlscyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhdHVzLmRldGFpbHMgPSB0aGlzLmRldGFpbHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWV0YWRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXR1cy5tZXRhZGF0YSA9IHRoaXMubWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9XG59XG5leHBvcnRzLlN0YXR1c0J1aWxkZXIgPSBTdGF0dXNCdWlsZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHVzLWJ1aWxkZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU3RhdHVzQnVpbGRlciIsImNvbnN0cnVjdG9yIiwiY29kZSIsImRldGFpbHMiLCJtZXRhZGF0YSIsIndpdGhDb2RlIiwid2l0aERldGFpbHMiLCJ3aXRoTWV0YWRhdGEiLCJidWlsZCIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/status-builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/stream-decoder.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StreamDecoder = void 0;\nvar ReadState;\n(function(ReadState) {\n    ReadState[ReadState[\"NO_DATA\"] = 0] = \"NO_DATA\";\n    ReadState[ReadState[\"READING_SIZE\"] = 1] = \"READING_SIZE\";\n    ReadState[ReadState[\"READING_MESSAGE\"] = 2] = \"READING_MESSAGE\";\n})(ReadState || (ReadState = {}));\nclass StreamDecoder {\n    constructor(){\n        this.readState = ReadState.NO_DATA;\n        this.readCompressFlag = Buffer.alloc(1);\n        this.readPartialSize = Buffer.alloc(4);\n        this.readSizeRemaining = 4;\n        this.readMessageSize = 0;\n        this.readPartialMessage = [];\n        this.readMessageRemaining = 0;\n    }\n    write(data) {\n        let readHead = 0;\n        let toRead;\n        const result = [];\n        while(readHead < data.length){\n            switch(this.readState){\n                case ReadState.NO_DATA:\n                    this.readCompressFlag = data.slice(readHead, readHead + 1);\n                    readHead += 1;\n                    this.readState = ReadState.READING_SIZE;\n                    this.readPartialSize.fill(0);\n                    this.readSizeRemaining = 4;\n                    this.readMessageSize = 0;\n                    this.readMessageRemaining = 0;\n                    this.readPartialMessage = [];\n                    break;\n                case ReadState.READING_SIZE:\n                    toRead = Math.min(data.length - readHead, this.readSizeRemaining);\n                    data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);\n                    this.readSizeRemaining -= toRead;\n                    readHead += toRead;\n                    // readSizeRemaining >=0 here\n                    if (this.readSizeRemaining === 0) {\n                        this.readMessageSize = this.readPartialSize.readUInt32BE(0);\n                        this.readMessageRemaining = this.readMessageSize;\n                        if (this.readMessageRemaining > 0) {\n                            this.readState = ReadState.READING_MESSAGE;\n                        } else {\n                            const message = Buffer.concat([\n                                this.readCompressFlag,\n                                this.readPartialSize\n                            ], 5);\n                            this.readState = ReadState.NO_DATA;\n                            result.push(message);\n                        }\n                    }\n                    break;\n                case ReadState.READING_MESSAGE:\n                    toRead = Math.min(data.length - readHead, this.readMessageRemaining);\n                    this.readPartialMessage.push(data.slice(readHead, readHead + toRead));\n                    this.readMessageRemaining -= toRead;\n                    readHead += toRead;\n                    // readMessageRemaining >=0 here\n                    if (this.readMessageRemaining === 0) {\n                        // At this point, we have read a full message\n                        const framedMessageBuffers = [\n                            this.readCompressFlag,\n                            this.readPartialSize\n                        ].concat(this.readPartialMessage);\n                        const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);\n                        this.readState = ReadState.NO_DATA;\n                        result.push(framedMessage);\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unexpected read state\");\n            }\n        }\n        return result;\n    }\n}\nexports.StreamDecoder = StreamDecoder; //# sourceMappingURL=stream-decoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-address.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.stringToSubchannelAddress = exports.subchannelAddressToString = exports.subchannelAddressEqual = exports.isTcpSubchannelAddress = void 0;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nfunction isTcpSubchannelAddress(address) {\n    return \"port\" in address;\n}\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\nfunction subchannelAddressEqual(address1, address2) {\n    if (isTcpSubchannelAddress(address1)) {\n        return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;\n    } else {\n        return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n    }\n}\nexports.subchannelAddressEqual = subchannelAddressEqual;\nfunction subchannelAddressToString(address) {\n    if (isTcpSubchannelAddress(address)) {\n        return address.host + \":\" + address.port;\n    } else {\n        return address.path;\n    }\n}\nexports.subchannelAddressToString = subchannelAddressToString;\nconst DEFAULT_PORT = 443;\nfunction stringToSubchannelAddress(addressString, port) {\n    if (net_1.isIP(addressString)) {\n        return {\n            host: addressString,\n            port: port !== null && port !== void 0 ? port : DEFAULT_PORT\n        };\n    } else {\n        return {\n            path: addressString\n        };\n    }\n}\nexports.stringToSubchannelAddress = stringToSubchannelAddress; //# sourceMappingURL=subchannel-address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3ViY2hhbm5lbC1hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQ0FBaUMsR0FBR0EsaUNBQWlDLEdBQUdBLDhCQUE4QixHQUFHQSw4QkFBOEIsR0FBRyxLQUFLO0FBQy9JLE1BQU1NLFFBQVFDLG1CQUFPQSxDQUFDLGdCQUFLO0FBQzNCLFNBQVNGLHVCQUF1QkcsT0FBTztJQUNuQyxPQUFPLFVBQVVBO0FBQ3JCO0FBQ0FSLDhCQUE4QixHQUFHSztBQUNqQyxTQUFTRCx1QkFBdUJLLFFBQVEsRUFBRUMsUUFBUTtJQUM5QyxJQUFJTCx1QkFBdUJJLFdBQVc7UUFDbEMsT0FBUUosdUJBQXVCSyxhQUMzQkQsU0FBU0UsSUFBSSxLQUFLRCxTQUFTQyxJQUFJLElBQy9CRixTQUFTRyxJQUFJLEtBQUtGLFNBQVNFLElBQUk7SUFDdkMsT0FDSztRQUNELE9BQU8sQ0FBQ1AsdUJBQXVCSyxhQUFhRCxTQUFTSSxJQUFJLEtBQUtILFNBQVNHLElBQUk7SUFDL0U7QUFDSjtBQUNBYiw4QkFBOEIsR0FBR0k7QUFDakMsU0FBU0QsMEJBQTBCSyxPQUFPO0lBQ3RDLElBQUlILHVCQUF1QkcsVUFBVTtRQUNqQyxPQUFPQSxRQUFRRyxJQUFJLEdBQUcsTUFBTUgsUUFBUUksSUFBSTtJQUM1QyxPQUNLO1FBQ0QsT0FBT0osUUFBUUssSUFBSTtJQUN2QjtBQUNKO0FBQ0FiLGlDQUFpQyxHQUFHRztBQUNwQyxNQUFNVyxlQUFlO0FBQ3JCLFNBQVNaLDBCQUEwQmEsYUFBYSxFQUFFSCxJQUFJO0lBQ2xELElBQUlOLE1BQU1VLElBQUksQ0FBQ0QsZ0JBQWdCO1FBQzNCLE9BQU87WUFDSEosTUFBTUk7WUFDTkgsTUFBTUEsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSUEsT0FBT0U7UUFDcEQ7SUFDSixPQUNLO1FBQ0QsT0FBTztZQUNIRCxNQUFNRTtRQUNWO0lBQ0o7QUFDSjtBQUNBZixpQ0FBaUMsR0FBR0UsMkJBQ3BDLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3N1YmNoYW5uZWwtYWRkcmVzcy5qcz9iYTMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIxIGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0cmluZ1RvU3ViY2hhbm5lbEFkZHJlc3MgPSBleHBvcnRzLnN1YmNoYW5uZWxBZGRyZXNzVG9TdHJpbmcgPSBleHBvcnRzLnN1YmNoYW5uZWxBZGRyZXNzRXF1YWwgPSBleHBvcnRzLmlzVGNwU3ViY2hhbm5lbEFkZHJlc3MgPSB2b2lkIDA7XG5jb25zdCBuZXRfMSA9IHJlcXVpcmUoXCJuZXRcIik7XG5mdW5jdGlvbiBpc1RjcFN1YmNoYW5uZWxBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICByZXR1cm4gJ3BvcnQnIGluIGFkZHJlc3M7XG59XG5leHBvcnRzLmlzVGNwU3ViY2hhbm5lbEFkZHJlc3MgPSBpc1RjcFN1YmNoYW5uZWxBZGRyZXNzO1xuZnVuY3Rpb24gc3ViY2hhbm5lbEFkZHJlc3NFcXVhbChhZGRyZXNzMSwgYWRkcmVzczIpIHtcbiAgICBpZiAoaXNUY3BTdWJjaGFubmVsQWRkcmVzcyhhZGRyZXNzMSkpIHtcbiAgICAgICAgcmV0dXJuIChpc1RjcFN1YmNoYW5uZWxBZGRyZXNzKGFkZHJlc3MyKSAmJlxuICAgICAgICAgICAgYWRkcmVzczEuaG9zdCA9PT0gYWRkcmVzczIuaG9zdCAmJlxuICAgICAgICAgICAgYWRkcmVzczEucG9ydCA9PT0gYWRkcmVzczIucG9ydCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gIWlzVGNwU3ViY2hhbm5lbEFkZHJlc3MoYWRkcmVzczIpICYmIGFkZHJlc3MxLnBhdGggPT09IGFkZHJlc3MyLnBhdGg7XG4gICAgfVxufVxuZXhwb3J0cy5zdWJjaGFubmVsQWRkcmVzc0VxdWFsID0gc3ViY2hhbm5lbEFkZHJlc3NFcXVhbDtcbmZ1bmN0aW9uIHN1YmNoYW5uZWxBZGRyZXNzVG9TdHJpbmcoYWRkcmVzcykge1xuICAgIGlmIChpc1RjcFN1YmNoYW5uZWxBZGRyZXNzKGFkZHJlc3MpKSB7XG4gICAgICAgIHJldHVybiBhZGRyZXNzLmhvc3QgKyAnOicgKyBhZGRyZXNzLnBvcnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gYWRkcmVzcy5wYXRoO1xuICAgIH1cbn1cbmV4cG9ydHMuc3ViY2hhbm5lbEFkZHJlc3NUb1N0cmluZyA9IHN1YmNoYW5uZWxBZGRyZXNzVG9TdHJpbmc7XG5jb25zdCBERUZBVUxUX1BPUlQgPSA0NDM7XG5mdW5jdGlvbiBzdHJpbmdUb1N1YmNoYW5uZWxBZGRyZXNzKGFkZHJlc3NTdHJpbmcsIHBvcnQpIHtcbiAgICBpZiAobmV0XzEuaXNJUChhZGRyZXNzU3RyaW5nKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaG9zdDogYWRkcmVzc1N0cmluZyxcbiAgICAgICAgICAgIHBvcnQ6IHBvcnQgIT09IG51bGwgJiYgcG9ydCAhPT0gdm9pZCAwID8gcG9ydCA6IERFRkFVTFRfUE9SVFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGg6IGFkZHJlc3NTdHJpbmdcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLnN0cmluZ1RvU3ViY2hhbm5lbEFkZHJlc3MgPSBzdHJpbmdUb1N1YmNoYW5uZWxBZGRyZXNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3ViY2hhbm5lbC1hZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0cmluZ1RvU3ViY2hhbm5lbEFkZHJlc3MiLCJzdWJjaGFubmVsQWRkcmVzc1RvU3RyaW5nIiwic3ViY2hhbm5lbEFkZHJlc3NFcXVhbCIsImlzVGNwU3ViY2hhbm5lbEFkZHJlc3MiLCJuZXRfMSIsInJlcXVpcmUiLCJhZGRyZXNzIiwiYWRkcmVzczEiLCJhZGRyZXNzMiIsImhvc3QiLCJwb3J0IiwicGF0aCIsIkRFRkFVTFRfUE9SVCIsImFkZHJlc3NTdHJpbmciLCJpc0lQIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseSubchannelWrapper = void 0;\nclass BaseSubchannelWrapper {\n    constructor(child){\n        this.child = child;\n    }\n    getConnectivityState() {\n        return this.child.getConnectivityState();\n    }\n    addConnectivityStateListener(listener) {\n        this.child.addConnectivityStateListener(listener);\n    }\n    removeConnectivityStateListener(listener) {\n        this.child.removeConnectivityStateListener(listener);\n    }\n    startConnecting() {\n        this.child.startConnecting();\n    }\n    getAddress() {\n        return this.child.getAddress();\n    }\n    ref() {\n        this.child.ref();\n    }\n    unref() {\n        this.child.unref();\n    }\n    getChannelzRef() {\n        return this.child.getChannelzRef();\n    }\n    getRealSubchannel() {\n        return this.child.getRealSubchannel();\n    }\n}\nexports.BaseSubchannelWrapper = BaseSubchannelWrapper; //# sourceMappingURL=subchannel-interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3ViY2hhbm5lbC1pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHLEtBQUs7QUFDckMsTUFBTUU7SUFDRkMsWUFBWUMsS0FBSyxDQUFFO1FBQ2YsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO0lBQ2pCO0lBQ0FDLHVCQUF1QjtRQUNuQixPQUFPLElBQUksQ0FBQ0QsS0FBSyxDQUFDQyxvQkFBb0I7SUFDMUM7SUFDQUMsNkJBQTZCQyxRQUFRLEVBQUU7UUFDbkMsSUFBSSxDQUFDSCxLQUFLLENBQUNFLDRCQUE0QixDQUFDQztJQUM1QztJQUNBQyxnQ0FBZ0NELFFBQVEsRUFBRTtRQUN0QyxJQUFJLENBQUNILEtBQUssQ0FBQ0ksK0JBQStCLENBQUNEO0lBQy9DO0lBQ0FFLGtCQUFrQjtRQUNkLElBQUksQ0FBQ0wsS0FBSyxDQUFDSyxlQUFlO0lBQzlCO0lBQ0FDLGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQ04sS0FBSyxDQUFDTSxVQUFVO0lBQ2hDO0lBQ0FDLE1BQU07UUFDRixJQUFJLENBQUNQLEtBQUssQ0FBQ08sR0FBRztJQUNsQjtJQUNBQyxRQUFRO1FBQ0osSUFBSSxDQUFDUixLQUFLLENBQUNRLEtBQUs7SUFDcEI7SUFDQUMsaUJBQWlCO1FBQ2IsT0FBTyxJQUFJLENBQUNULEtBQUssQ0FBQ1MsY0FBYztJQUNwQztJQUNBQyxvQkFBb0I7UUFDaEIsT0FBTyxJQUFJLENBQUNWLEtBQUssQ0FBQ1UsaUJBQWlCO0lBQ3ZDO0FBQ0o7QUFDQWQsNkJBQTZCLEdBQUdFLHVCQUNoQyxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZmMtbmV4dGpzLXNoYWRjbi8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9zdWJjaGFubmVsLWludGVyZmFjZS5qcz8yOGNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIyIGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJhc2VTdWJjaGFubmVsV3JhcHBlciA9IHZvaWQgMDtcbmNsYXNzIEJhc2VTdWJjaGFubmVsV3JhcHBlciB7XG4gICAgY29uc3RydWN0b3IoY2hpbGQpIHtcbiAgICAgICAgdGhpcy5jaGlsZCA9IGNoaWxkO1xuICAgIH1cbiAgICBnZXRDb25uZWN0aXZpdHlTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGQuZ2V0Q29ubmVjdGl2aXR5U3RhdGUoKTtcbiAgICB9XG4gICAgYWRkQ29ubmVjdGl2aXR5U3RhdGVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmNoaWxkLmFkZENvbm5lY3Rpdml0eVN0YXRlTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIH1cbiAgICByZW1vdmVDb25uZWN0aXZpdHlTdGF0ZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuY2hpbGQucmVtb3ZlQ29ubmVjdGl2aXR5U3RhdGVMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgfVxuICAgIHN0YXJ0Q29ubmVjdGluZygpIHtcbiAgICAgICAgdGhpcy5jaGlsZC5zdGFydENvbm5lY3RpbmcoKTtcbiAgICB9XG4gICAgZ2V0QWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGQuZ2V0QWRkcmVzcygpO1xuICAgIH1cbiAgICByZWYoKSB7XG4gICAgICAgIHRoaXMuY2hpbGQucmVmKCk7XG4gICAgfVxuICAgIHVucmVmKCkge1xuICAgICAgICB0aGlzLmNoaWxkLnVucmVmKCk7XG4gICAgfVxuICAgIGdldENoYW5uZWx6UmVmKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZC5nZXRDaGFubmVselJlZigpO1xuICAgIH1cbiAgICBnZXRSZWFsU3ViY2hhbm5lbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGQuZ2V0UmVhbFN1YmNoYW5uZWwoKTtcbiAgICB9XG59XG5leHBvcnRzLkJhc2VTdWJjaGFubmVsV3JhcHBlciA9IEJhc2VTdWJjaGFubmVsV3JhcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YmNoYW5uZWwtaW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJhc2VTdWJjaGFubmVsV3JhcHBlciIsImNvbnN0cnVjdG9yIiwiY2hpbGQiLCJnZXRDb25uZWN0aXZpdHlTdGF0ZSIsImFkZENvbm5lY3Rpdml0eVN0YXRlTGlzdGVuZXIiLCJsaXN0ZW5lciIsInJlbW92ZUNvbm5lY3Rpdml0eVN0YXRlTGlzdGVuZXIiLCJzdGFydENvbm5lY3RpbmciLCJnZXRBZGRyZXNzIiwicmVmIiwidW5yZWYiLCJnZXRDaGFubmVselJlZiIsImdldFJlYWxTdWJjaGFubmVsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getSubchannelPool = exports.SubchannelPool = void 0;\nconst channel_options_1 = __webpack_require__(/*! ./channel-options */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-options.js\");\nconst subchannel_1 = __webpack_require__(/*! ./subchannel */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\n// 10 seconds in milliseconds. This value is arbitrary.\n/**\n * The amount of time in between checks for dropping subchannels that have no\n * other references\n */ const REF_CHECK_INTERVAL = 10000;\nclass SubchannelPool {\n    /**\n     * A pool of subchannels use for making connections. Subchannels with the\n     * exact same parameters will be reused.\n     */ constructor(){\n        this.pool = Object.create(null);\n        /**\n         * A timer of a task performing a periodic subchannel cleanup.\n         */ this.cleanupTimer = null;\n    }\n    /**\n     * Unrefs all unused subchannels and cancels the cleanup task if all\n     * subchannels have been unrefed.\n     */ unrefUnusedSubchannels() {\n        let allSubchannelsUnrefed = true;\n        /* These objects are created with Object.create(null), so they do not\n         * have a prototype, which means that for (... in ...) loops over them\n         * do not need to be filtered */ // eslint-disable-disable-next-line:forin\n        for(const channelTarget in this.pool){\n            const subchannelObjArray = this.pool[channelTarget];\n            const refedSubchannels = subchannelObjArray.filter((value)=>!value.subchannel.unrefIfOneRef());\n            if (refedSubchannels.length > 0) {\n                allSubchannelsUnrefed = false;\n            }\n            /* For each subchannel in the pool, try to unref it if it has\n             * exactly one ref (which is the ref from the pool itself). If that\n             * does happen, remove the subchannel from the pool */ this.pool[channelTarget] = refedSubchannels;\n        }\n        /* Currently we do not delete keys with empty values. If that results\n         * in significant memory usage we should change it. */ // Cancel the cleanup task if all subchannels have been unrefed.\n        if (allSubchannelsUnrefed && this.cleanupTimer !== null) {\n            clearInterval(this.cleanupTimer);\n            this.cleanupTimer = null;\n        }\n    }\n    /**\n     * Ensures that the cleanup task is spawned.\n     */ ensureCleanupTask() {\n        var _a, _b;\n        if (this.cleanupTimer === null) {\n            this.cleanupTimer = setInterval(()=>{\n                this.unrefUnusedSubchannels();\n            }, REF_CHECK_INTERVAL);\n            // Unref because this timer should not keep the event loop running.\n            // Call unref only if it exists to address electron/electron#21162\n            (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    }\n    /**\n     * Get a subchannel if one already exists with exactly matching parameters.\n     * Otherwise, create and save a subchannel with those parameters.\n     * @param channelTarget\n     * @param subchannelTarget\n     * @param channelArguments\n     * @param channelCredentials\n     */ getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {\n        this.ensureCleanupTask();\n        const channelTarget = uri_parser_1.uriToString(channelTargetUri);\n        if (channelTarget in this.pool) {\n            const subchannelObjArray = this.pool[channelTarget];\n            for (const subchannelObj of subchannelObjArray){\n                if (subchannel_address_1.subchannelAddressEqual(subchannelTarget, subchannelObj.subchannelAddress) && channel_options_1.channelOptionsEqual(channelArguments, subchannelObj.channelArguments) && channelCredentials._equals(subchannelObj.channelCredentials)) {\n                    return subchannelObj.subchannel;\n                }\n            }\n        }\n        // If we get here, no matching subchannel was found\n        const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials);\n        if (!(channelTarget in this.pool)) {\n            this.pool[channelTarget] = [];\n        }\n        this.pool[channelTarget].push({\n            subchannelAddress: subchannelTarget,\n            channelArguments,\n            channelCredentials,\n            subchannel\n        });\n        subchannel.ref();\n        return subchannel;\n    }\n}\nexports.SubchannelPool = SubchannelPool;\nconst globalSubchannelPool = new SubchannelPool();\n/**\n * Get either the global subchannel pool, or a new subchannel pool.\n * @param global\n */ function getSubchannelPool(global) {\n    if (global) {\n        return globalSubchannelPool;\n    } else {\n        return new SubchannelPool();\n    }\n}\nexports.getSubchannelPool = getSubchannelPool; //# sourceMappingURL=subchannel-pool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Subchannel = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst tls_1 = __webpack_require__(/*! tls */ \"tls\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst http_proxy_1 = __webpack_require__(/*! ./http_proxy */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst clientVersion = (__webpack_require__(/*! ../../package.json */ \"(ssr)/./node_modules/@grpc/grpc-js/package.json\").version);\nconst TRACER_NAME = \"subchannel\";\nconst FLOW_CONTROL_TRACER_NAME = \"subchannel_flowctrl\";\nconst MIN_CONNECT_TIMEOUT_MS = 20000;\nconst INITIAL_BACKOFF_MS = 1000;\nconst BACKOFF_MULTIPLIER = 1.6;\nconst MAX_BACKOFF_MS = 120000;\nconst BACKOFF_JITTER = 0.2;\n/* setInterval and setTimeout only accept signed 32 bit integers. JS doesn't\n * have a constant for the max signed 32 bit integer, so this is a simple way\n * to calculate it */ const KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\nconst KEEPALIVE_TIMEOUT_MS = 20000;\nconst { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT } = http2.constants;\n/**\n * Get a number uniformly at random in the range [min, max)\n * @param min\n * @param max\n */ function uniformRandom(min, max) {\n    return Math.random() * (max - min) + min;\n}\nconst tooManyPingsData = Buffer.from(\"too_many_pings\", \"ascii\");\nclass Subchannel {\n    /**\n     * A class representing a connection to a single backend.\n     * @param channelTarget The target string for the channel as a whole\n     * @param subchannelAddress The address for the backend that this subchannel\n     *     will connect to\n     * @param options The channel options, plus any specific subchannel options\n     *     for this subchannel\n     * @param credentials The channel credentials used to establish this\n     *     connection\n     */ constructor(channelTarget, subchannelAddress, options, credentials){\n        this.channelTarget = channelTarget;\n        this.subchannelAddress = subchannelAddress;\n        this.options = options;\n        this.credentials = credentials;\n        /**\n         * The subchannel's current connectivity state. Invariant: `session` === `null`\n         * if and only if `connectivityState` is IDLE or TRANSIENT_FAILURE.\n         */ this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n        /**\n         * The underlying http2 session used to make requests.\n         */ this.session = null;\n        /**\n         * Indicates that the subchannel should transition from TRANSIENT_FAILURE to\n         * CONNECTING instead of IDLE when the backoff timeout ends.\n         */ this.continueConnecting = false;\n        /**\n         * A list of listener functions that will be called whenever the connectivity\n         * state changes. Will be modified by `addConnectivityStateListener` and\n         * `removeConnectivityStateListener`\n         */ this.stateListeners = [];\n        /**\n         * A list of listener functions that will be called when the underlying\n         * socket disconnects. Used for ending active calls with an UNAVAILABLE\n         * status.\n         */ this.disconnectListeners = new Set();\n        /**\n         * The amount of time in between sending pings\n         */ this.keepaliveTimeMs = KEEPALIVE_MAX_TIME_MS;\n        /**\n         * The amount of time to wait for an acknowledgement after sending a ping\n         */ this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;\n        /**\n         * Indicates whether keepalive pings should be sent without any active calls\n         */ this.keepaliveWithoutCalls = false;\n        /**\n         * Tracks calls with references to this subchannel\n         */ this.callRefcount = 0;\n        /**\n         * Tracks channels and subchannel pools with references to this subchannel\n         */ this.refcount = 0;\n        // Channelz info\n        this.channelzEnabled = true;\n        this.callTracker = new channelz_1.ChannelzCallTracker();\n        this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n        // Channelz socket info\n        this.channelzSocketRef = null;\n        /**\n         * Name of the remote server, if it is not the same as the subchannel\n         * address, i.e. if connecting through an HTTP CONNECT proxy.\n         */ this.remoteName = null;\n        this.streamTracker = new channelz_1.ChannelzCallTracker();\n        this.keepalivesSent = 0;\n        this.messagesSent = 0;\n        this.messagesReceived = 0;\n        this.lastMessageSentTimestamp = null;\n        this.lastMessageReceivedTimestamp = null;\n        // Build user-agent string.\n        this.userAgent = [\n            options[\"grpc.primary_user_agent\"],\n            `grpc-node-js/${clientVersion}`,\n            options[\"grpc.secondary_user_agent\"]\n        ].filter((e)=>e).join(\" \"); // remove falsey values first\n        if (\"grpc.keepalive_time_ms\" in options) {\n            this.keepaliveTimeMs = options[\"grpc.keepalive_time_ms\"];\n        }\n        if (\"grpc.keepalive_timeout_ms\" in options) {\n            this.keepaliveTimeoutMs = options[\"grpc.keepalive_timeout_ms\"];\n        }\n        if (\"grpc.keepalive_permit_without_calls\" in options) {\n            this.keepaliveWithoutCalls = options[\"grpc.keepalive_permit_without_calls\"] === 1;\n        } else {\n            this.keepaliveWithoutCalls = false;\n        }\n        this.keepaliveIntervalId = setTimeout(()=>{}, 0);\n        clearTimeout(this.keepaliveIntervalId);\n        this.keepaliveTimeoutId = setTimeout(()=>{}, 0);\n        clearTimeout(this.keepaliveTimeoutId);\n        const backoffOptions = {\n            initialDelay: options[\"grpc.initial_reconnect_backoff_ms\"],\n            maxDelay: options[\"grpc.max_reconnect_backoff_ms\"]\n        };\n        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(()=>{\n            this.handleBackoffTimer();\n        }, backoffOptions);\n        this.subchannelAddressString = subchannel_address_1.subchannelAddressToString(subchannelAddress);\n        if (options[\"grpc.enable_channelz\"] === 0) {\n            this.channelzEnabled = false;\n        }\n        this.channelzTrace = new channelz_1.ChannelzTrace();\n        this.channelzRef = channelz_1.registerChannelzSubchannel(this.subchannelAddressString, ()=>this.getChannelzInfo(), this.channelzEnabled);\n        if (this.channelzEnabled) {\n            this.channelzTrace.addTrace(\"CT_INFO\", \"Subchannel created\");\n        }\n        this.trace(\"Subchannel constructed with options \" + JSON.stringify(options, undefined, 2));\n    }\n    getChannelzInfo() {\n        return {\n            state: this.connectivityState,\n            trace: this.channelzTrace,\n            callTracker: this.callTracker,\n            children: this.childrenTracker.getChildLists(),\n            target: this.subchannelAddressString\n        };\n    }\n    getChannelzSocketInfo() {\n        var _a, _b, _c;\n        if (this.session === null) {\n            return null;\n        }\n        const sessionSocket = this.session.socket;\n        const remoteAddress = sessionSocket.remoteAddress ? subchannel_address_1.stringToSubchannelAddress(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n        const localAddress = sessionSocket.localAddress ? subchannel_address_1.stringToSubchannelAddress(sessionSocket.localAddress, sessionSocket.localPort) : null;\n        let tlsInfo;\n        if (this.session.encrypted) {\n            const tlsSocket = sessionSocket;\n            const cipherInfo = tlsSocket.getCipher();\n            const certificate = tlsSocket.getCertificate();\n            const peerCertificate = tlsSocket.getPeerCertificate();\n            tlsInfo = {\n                cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\n                cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n                localCertificate: certificate && \"raw\" in certificate ? certificate.raw : null,\n                remoteCertificate: peerCertificate && \"raw\" in peerCertificate ? peerCertificate.raw : null\n            };\n        } else {\n            tlsInfo = null;\n        }\n        const socketInfo = {\n            remoteAddress: remoteAddress,\n            localAddress: localAddress,\n            security: tlsInfo,\n            remoteName: this.remoteName,\n            streamsStarted: this.streamTracker.callsStarted,\n            streamsSucceeded: this.streamTracker.callsSucceeded,\n            streamsFailed: this.streamTracker.callsFailed,\n            messagesSent: this.messagesSent,\n            messagesReceived: this.messagesReceived,\n            keepAlivesSent: this.keepalivesSent,\n            lastLocalStreamCreatedTimestamp: this.streamTracker.lastCallStartedTimestamp,\n            lastRemoteStreamCreatedTimestamp: null,\n            lastMessageSentTimestamp: this.lastMessageSentTimestamp,\n            lastMessageReceivedTimestamp: this.lastMessageReceivedTimestamp,\n            localFlowControlWindow: (_b = this.session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\n            remoteFlowControlWindow: (_c = this.session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null\n        };\n        return socketInfo;\n    }\n    resetChannelzSocketInfo() {\n        if (!this.channelzEnabled) {\n            return;\n        }\n        if (this.channelzSocketRef) {\n            channelz_1.unregisterChannelzRef(this.channelzSocketRef);\n            this.childrenTracker.unrefChild(this.channelzSocketRef);\n            this.channelzSocketRef = null;\n        }\n        this.remoteName = null;\n        this.streamTracker = new channelz_1.ChannelzCallTracker();\n        this.keepalivesSent = 0;\n        this.messagesSent = 0;\n        this.messagesReceived = 0;\n        this.lastMessageSentTimestamp = null;\n        this.lastMessageReceivedTimestamp = null;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    refTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, \"subchannel_refcount\", \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    flowControlTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, FLOW_CONTROL_TRACER_NAME, \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    internalsTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, \"subchannel_internals\", \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    keepaliveTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, \"keepalive\", \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    handleBackoffTimer() {\n        if (this.continueConnecting) {\n            this.transitionToState([\n                connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE\n            ], connectivity_state_1.ConnectivityState.CONNECTING);\n        } else {\n            this.transitionToState([\n                connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE\n            ], connectivity_state_1.ConnectivityState.IDLE);\n        }\n    }\n    /**\n     * Start a backoff timer with the current nextBackoff timeout\n     */ startBackoff() {\n        this.backoffTimeout.runOnce();\n    }\n    stopBackoff() {\n        this.backoffTimeout.stop();\n        this.backoffTimeout.reset();\n    }\n    sendPing() {\n        var _a, _b;\n        if (this.channelzEnabled) {\n            this.keepalivesSent += 1;\n        }\n        this.keepaliveTrace(\"Sending ping with timeout \" + this.keepaliveTimeoutMs + \"ms\");\n        this.keepaliveTimeoutId = setTimeout(()=>{\n            this.keepaliveTrace(\"Ping timeout passed without response\");\n            this.handleDisconnect();\n        }, this.keepaliveTimeoutMs);\n        (_b = (_a = this.keepaliveTimeoutId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        try {\n            this.session.ping((err, duration, payload)=>{\n                this.keepaliveTrace(\"Received ping response\");\n                clearTimeout(this.keepaliveTimeoutId);\n            });\n        } catch (e) {\n            /* If we fail to send a ping, the connection is no longer functional, so\n             * we should discard it. */ this.transitionToState([\n                connectivity_state_1.ConnectivityState.READY\n            ], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE);\n        }\n    }\n    startKeepalivePings() {\n        var _a, _b;\n        this.keepaliveIntervalId = setInterval(()=>{\n            this.sendPing();\n        }, this.keepaliveTimeMs);\n        (_b = (_a = this.keepaliveIntervalId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    /* Don't send a ping immediately because whatever caused us to start\n         * sending pings should also involve some network activity. */ }\n    /**\n     * Stop keepalive pings when terminating a connection. This discards the\n     * outstanding ping timeout, so it should not be called if the same\n     * connection will still be used.\n     */ stopKeepalivePings() {\n        clearInterval(this.keepaliveIntervalId);\n        clearTimeout(this.keepaliveTimeoutId);\n    }\n    createSession(proxyConnectionResult) {\n        var _a, _b, _c;\n        if (proxyConnectionResult.realTarget) {\n            this.remoteName = uri_parser_1.uriToString(proxyConnectionResult.realTarget);\n            this.trace(\"creating HTTP/2 session through proxy to \" + proxyConnectionResult.realTarget);\n        } else {\n            this.remoteName = null;\n            this.trace(\"creating HTTP/2 session\");\n        }\n        const targetAuthority = resolver_1.getDefaultAuthority((_a = proxyConnectionResult.realTarget) !== null && _a !== void 0 ? _a : this.channelTarget);\n        let connectionOptions = this.credentials._getConnectionOptions() || {};\n        connectionOptions.maxSendHeaderBlockLength = Number.MAX_SAFE_INTEGER;\n        if (\"grpc-node.max_session_memory\" in this.options) {\n            connectionOptions.maxSessionMemory = this.options[\"grpc-node.max_session_memory\"];\n        } else {\n            /* By default, set a very large max session memory limit, to effectively\n             * disable enforcement of the limit. Some testing indicates that Node's\n             * behavior degrades badly when this limit is reached, so we solve that\n             * by disabling the check entirely. */ connectionOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\n        }\n        let addressScheme = \"http://\";\n        if (\"secureContext\" in connectionOptions) {\n            addressScheme = \"https://\";\n            // If provided, the value of grpc.ssl_target_name_override should be used\n            // to override the target hostname when checking server identity.\n            // This option is used for testing only.\n            if (this.options[\"grpc.ssl_target_name_override\"]) {\n                const sslTargetNameOverride = this.options[\"grpc.ssl_target_name_override\"];\n                connectionOptions.checkServerIdentity = (host, cert)=>{\n                    return tls_1.checkServerIdentity(sslTargetNameOverride, cert);\n                };\n                connectionOptions.servername = sslTargetNameOverride;\n            } else {\n                const authorityHostname = (_c = (_b = uri_parser_1.splitHostPort(targetAuthority)) === null || _b === void 0 ? void 0 : _b.host) !== null && _c !== void 0 ? _c : \"localhost\";\n                // We want to always set servername to support SNI\n                connectionOptions.servername = authorityHostname;\n            }\n            if (proxyConnectionResult.socket) {\n                /* This is part of the workaround for\n                 * https://github.com/nodejs/node/issues/32922. Without that bug,\n                 * proxyConnectionResult.socket would always be a plaintext socket and\n                 * this would say\n                 * connectionOptions.socket = proxyConnectionResult.socket; */ connectionOptions.createConnection = (authority, option)=>{\n                    return proxyConnectionResult.socket;\n                };\n            }\n        } else {\n            /* In all but the most recent versions of Node, http2.connect does not use\n             * the options when establishing plaintext connections, so we need to\n             * establish that connection explicitly. */ connectionOptions.createConnection = (authority, option)=>{\n                if (proxyConnectionResult.socket) {\n                    return proxyConnectionResult.socket;\n                } else {\n                    /* net.NetConnectOpts is declared in a way that is more restrictive\n                     * than what net.connect will actually accept, so we use the type\n                     * assertion to work around that. */ return net.connect(this.subchannelAddress);\n                }\n            };\n        }\n        connectionOptions = Object.assign(Object.assign({}, connectionOptions), this.subchannelAddress);\n        /* http2.connect uses the options here:\n         * https://github.com/nodejs/node/blob/70c32a6d190e2b5d7b9ff9d5b6a459d14e8b7d59/lib/internal/http2/core.js#L3028-L3036\n         * The spread operator overides earlier values with later ones, so any port\n         * or host values in the options will be used rather than any values extracted\n         * from the first argument. In addition, the path overrides the host and port,\n         * as documented for plaintext connections here:\n         * https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener\n         * and for TLS connections here:\n         * https://nodejs.org/api/tls.html#tls_tls_connect_options_callback. In\n         * earlier versions of Node, http2.connect passes these options to\n         * tls.connect but not net.connect, so in the insecure case we still need\n         * to set the createConnection option above to create the connection\n         * explicitly. We cannot do that in the TLS case because http2.connect\n         * passes necessary additional options to tls.connect.\n         * The first argument just needs to be parseable as a URL and the scheme\n         * determines whether the connection will be established over TLS or not.\n         */ const session = http2.connect(addressScheme + targetAuthority, connectionOptions);\n        this.session = session;\n        this.channelzSocketRef = channelz_1.registerChannelzSocket(this.subchannelAddressString, ()=>this.getChannelzSocketInfo(), this.channelzEnabled);\n        if (this.channelzEnabled) {\n            this.childrenTracker.refChild(this.channelzSocketRef);\n        }\n        session.unref();\n        /* For all of these events, check if the session at the time of the event\n         * is the same one currently attached to this subchannel, to ensure that\n         * old events from previous connection attempts cannot cause invalid state\n         * transitions. */ session.once(\"connect\", ()=>{\n            if (this.session === session) {\n                this.transitionToState([\n                    connectivity_state_1.ConnectivityState.CONNECTING\n                ], connectivity_state_1.ConnectivityState.READY);\n            }\n        });\n        session.once(\"close\", ()=>{\n            if (this.session === session) {\n                this.trace(\"connection closed\");\n                this.transitionToState([\n                    connectivity_state_1.ConnectivityState.CONNECTING\n                ], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE);\n                /* Transitioning directly to IDLE here should be OK because we are not\n                 * doing any backoff, because a connection was established at some\n                 * point */ this.transitionToState([\n                    connectivity_state_1.ConnectivityState.READY\n                ], connectivity_state_1.ConnectivityState.IDLE);\n            }\n        });\n        session.once(\"goaway\", (errorCode, lastStreamID, opaqueData)=>{\n            if (this.session === session) {\n                /* See the last paragraph of\n                 * https://github.com/grpc/proposal/blob/master/A8-client-side-keepalive.md#basic-keepalive */ if (errorCode === http2.constants.NGHTTP2_ENHANCE_YOUR_CALM && opaqueData.equals(tooManyPingsData)) {\n                    this.keepaliveTimeMs = Math.min(2 * this.keepaliveTimeMs, KEEPALIVE_MAX_TIME_MS);\n                    logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${uri_parser_1.uriToString(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTimeMs} ms`);\n                }\n                this.trace(\"connection closed by GOAWAY with code \" + errorCode);\n                this.transitionToState([\n                    connectivity_state_1.ConnectivityState.CONNECTING,\n                    connectivity_state_1.ConnectivityState.READY\n                ], connectivity_state_1.ConnectivityState.IDLE);\n            }\n        });\n        session.once(\"error\", (error)=>{\n            /* Do nothing here. Any error should also trigger a close event, which is\n             * where we want to handle that.  */ this.trace(\"connection closed with error \" + error.message);\n        });\n        if (logging.isTracerEnabled(TRACER_NAME)) {\n            session.on(\"remoteSettings\", (settings)=>{\n                this.trace(\"new settings received\" + (this.session !== session ? \" on the old connection\" : \"\") + \": \" + JSON.stringify(settings));\n            });\n            session.on(\"localSettings\", (settings)=>{\n                this.trace(\"local settings acknowledged by remote\" + (this.session !== session ? \" on the old connection\" : \"\") + \": \" + JSON.stringify(settings));\n            });\n        }\n    }\n    startConnectingInternal() {\n        var _a, _b;\n        /* Pass connection options through to the proxy so that it's able to\n         * upgrade it's connection to support tls if needed.\n         * This is a workaround for https://github.com/nodejs/node/issues/32922\n         * See https://github.com/grpc/grpc-node/pull/1369 for more info. */ const connectionOptions = this.credentials._getConnectionOptions() || {};\n        if (\"secureContext\" in connectionOptions) {\n            connectionOptions.ALPNProtocols = [\n                \"h2\"\n            ];\n            // If provided, the value of grpc.ssl_target_name_override should be used\n            // to override the target hostname when checking server identity.\n            // This option is used for testing only.\n            if (this.options[\"grpc.ssl_target_name_override\"]) {\n                const sslTargetNameOverride = this.options[\"grpc.ssl_target_name_override\"];\n                connectionOptions.checkServerIdentity = (host, cert)=>{\n                    return tls_1.checkServerIdentity(sslTargetNameOverride, cert);\n                };\n                connectionOptions.servername = sslTargetNameOverride;\n            } else {\n                if (\"grpc.http_connect_target\" in this.options) {\n                    /* This is more or less how servername will be set in createSession\n                     * if a connection is successfully established through the proxy.\n                     * If the proxy is not used, these connectionOptions are discarded\n                     * anyway */ const targetPath = resolver_1.getDefaultAuthority((_a = uri_parser_1.parseUri(this.options[\"grpc.http_connect_target\"])) !== null && _a !== void 0 ? _a : {\n                        path: \"localhost\"\n                    });\n                    const hostPort = uri_parser_1.splitHostPort(targetPath);\n                    connectionOptions.servername = (_b = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _b !== void 0 ? _b : targetPath;\n                }\n            }\n        }\n        http_proxy_1.getProxiedConnection(this.subchannelAddress, this.options, connectionOptions).then((result)=>{\n            this.createSession(result);\n        }, (reason)=>{\n            this.transitionToState([\n                connectivity_state_1.ConnectivityState.CONNECTING\n            ], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE);\n        });\n    }\n    handleDisconnect() {\n        this.transitionToState([\n            connectivity_state_1.ConnectivityState.READY\n        ], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE);\n        for (const listener of this.disconnectListeners.values()){\n            listener();\n        }\n    }\n    /**\n     * Initiate a state transition from any element of oldStates to the new\n     * state. If the current connectivityState is not in oldStates, do nothing.\n     * @param oldStates The set of states to transition from\n     * @param newState The state to transition to\n     * @returns True if the state changed, false otherwise\n     */ transitionToState(oldStates, newState) {\n        if (oldStates.indexOf(this.connectivityState) === -1) {\n            return false;\n        }\n        this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] + \" -> \" + connectivity_state_1.ConnectivityState[newState]);\n        if (this.channelzEnabled) {\n            this.channelzTrace.addTrace(\"CT_INFO\", connectivity_state_1.ConnectivityState[this.connectivityState] + \" -> \" + connectivity_state_1.ConnectivityState[newState]);\n        }\n        const previousState = this.connectivityState;\n        this.connectivityState = newState;\n        switch(newState){\n            case connectivity_state_1.ConnectivityState.READY:\n                this.stopBackoff();\n                const session = this.session;\n                session.socket.once(\"close\", ()=>{\n                    if (this.session === session) {\n                        this.handleDisconnect();\n                    }\n                });\n                if (this.keepaliveWithoutCalls) {\n                    this.startKeepalivePings();\n                }\n                break;\n            case connectivity_state_1.ConnectivityState.CONNECTING:\n                this.startBackoff();\n                this.startConnectingInternal();\n                this.continueConnecting = false;\n                break;\n            case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n                if (this.session) {\n                    this.session.close();\n                }\n                this.session = null;\n                this.resetChannelzSocketInfo();\n                this.stopKeepalivePings();\n                /* If the backoff timer has already ended by the time we get to the\n                 * TRANSIENT_FAILURE state, we want to immediately transition out of\n                 * TRANSIENT_FAILURE as though the backoff timer is ending right now */ if (!this.backoffTimeout.isRunning()) {\n                    process.nextTick(()=>{\n                        this.handleBackoffTimer();\n                    });\n                }\n                break;\n            case connectivity_state_1.ConnectivityState.IDLE:\n                if (this.session) {\n                    this.session.close();\n                }\n                this.session = null;\n                this.resetChannelzSocketInfo();\n                this.stopKeepalivePings();\n                break;\n            default:\n                throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);\n        }\n        /* We use a shallow copy of the stateListeners array in case a listener\n         * is removed during this iteration */ for (const listener of [\n            ...this.stateListeners\n        ]){\n            listener(this, previousState, newState);\n        }\n        return true;\n    }\n    /**\n     * Check if the subchannel associated with zero calls and with zero channels.\n     * If so, shut it down.\n     */ checkBothRefcounts() {\n        /* If no calls, channels, or subchannel pools have any more references to\n         * this subchannel, we can be sure it will never be used again. */ if (this.callRefcount === 0 && this.refcount === 0) {\n            if (this.channelzEnabled) {\n                this.channelzTrace.addTrace(\"CT_INFO\", \"Shutting down\");\n            }\n            this.transitionToState([\n                connectivity_state_1.ConnectivityState.CONNECTING,\n                connectivity_state_1.ConnectivityState.READY\n            ], connectivity_state_1.ConnectivityState.IDLE);\n            if (this.channelzEnabled) {\n                channelz_1.unregisterChannelzRef(this.channelzRef);\n            }\n        }\n    }\n    callRef() {\n        this.refTrace(\"callRefcount \" + this.callRefcount + \" -> \" + (this.callRefcount + 1));\n        if (this.callRefcount === 0) {\n            if (this.session) {\n                this.session.ref();\n            }\n            this.backoffTimeout.ref();\n            if (!this.keepaliveWithoutCalls) {\n                this.startKeepalivePings();\n            }\n        }\n        this.callRefcount += 1;\n    }\n    callUnref() {\n        this.refTrace(\"callRefcount \" + this.callRefcount + \" -> \" + (this.callRefcount - 1));\n        this.callRefcount -= 1;\n        if (this.callRefcount === 0) {\n            if (this.session) {\n                this.session.unref();\n            }\n            this.backoffTimeout.unref();\n            if (!this.keepaliveWithoutCalls) {\n                clearInterval(this.keepaliveIntervalId);\n            }\n            this.checkBothRefcounts();\n        }\n    }\n    ref() {\n        this.refTrace(\"refcount \" + this.refcount + \" -> \" + (this.refcount + 1));\n        this.refcount += 1;\n    }\n    unref() {\n        this.refTrace(\"refcount \" + this.refcount + \" -> \" + (this.refcount - 1));\n        this.refcount -= 1;\n        this.checkBothRefcounts();\n    }\n    unrefIfOneRef() {\n        if (this.refcount === 1) {\n            this.unref();\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Start a stream on the current session with the given `metadata` as headers\n     * and then attach it to the `callStream`. Must only be called if the\n     * subchannel's current connectivity state is READY.\n     * @param metadata\n     * @param callStream\n     */ startCallStream(metadata, callStream, extraFilters) {\n        const headers = metadata.toHttp2Headers();\n        headers[HTTP2_HEADER_AUTHORITY] = callStream.getHost();\n        headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;\n        headers[HTTP2_HEADER_CONTENT_TYPE] = \"application/grpc\";\n        headers[HTTP2_HEADER_METHOD] = \"POST\";\n        headers[HTTP2_HEADER_PATH] = callStream.getMethod();\n        headers[HTTP2_HEADER_TE] = \"trailers\";\n        let http2Stream;\n        /* In theory, if an error is thrown by session.request because session has\n         * become unusable (e.g. because it has received a goaway), this subchannel\n         * should soon see the corresponding close or goaway event anyway and leave\n         * READY. But we have seen reports that this does not happen\n         * (https://github.com/googleapis/nodejs-firestore/issues/1023#issuecomment-653204096)\n         * so for defense in depth, we just discard the session when we see an\n         * error here.\n         */ try {\n            http2Stream = this.session.request(headers);\n        } catch (e) {\n            this.transitionToState([\n                connectivity_state_1.ConnectivityState.READY\n            ], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE);\n            throw e;\n        }\n        let headersString = \"\";\n        for (const header of Object.keys(headers)){\n            headersString += \"\t\t\" + header + \": \" + headers[header] + \"\\n\";\n        }\n        logging.trace(constants_1.LogVerbosity.DEBUG, \"call_stream\", \"Starting stream [\" + callStream.getCallNumber() + \"] on subchannel \" + \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" with headers\\n\" + headersString);\n        this.flowControlTrace(\"local window size: \" + this.session.state.localWindowSize + \" remote window size: \" + this.session.state.remoteWindowSize);\n        const streamSession = this.session;\n        this.internalsTrace(\"session.closed=\" + streamSession.closed + \" session.destroyed=\" + streamSession.destroyed + \" session.socket.destroyed=\" + streamSession.socket.destroyed);\n        let statsTracker;\n        if (this.channelzEnabled) {\n            this.callTracker.addCallStarted();\n            callStream.addStatusWatcher((status)=>{\n                if (status.code === constants_1.Status.OK) {\n                    this.callTracker.addCallSucceeded();\n                } else {\n                    this.callTracker.addCallFailed();\n                }\n            });\n            this.streamTracker.addCallStarted();\n            callStream.addStreamEndWatcher((success)=>{\n                if (streamSession === this.session) {\n                    if (success) {\n                        this.streamTracker.addCallSucceeded();\n                    } else {\n                        this.streamTracker.addCallFailed();\n                    }\n                }\n            });\n            statsTracker = {\n                addMessageSent: ()=>{\n                    this.messagesSent += 1;\n                    this.lastMessageSentTimestamp = new Date();\n                },\n                addMessageReceived: ()=>{\n                    this.messagesReceived += 1;\n                }\n            };\n        } else {\n            statsTracker = {\n                addMessageSent: ()=>{},\n                addMessageReceived: ()=>{}\n            };\n        }\n        callStream.attachHttp2Stream(http2Stream, this, extraFilters, statsTracker);\n    }\n    /**\n     * If the subchannel is currently IDLE, start connecting and switch to the\n     * CONNECTING state. If the subchannel is current in TRANSIENT_FAILURE,\n     * the next time it would transition to IDLE, start connecting again instead.\n     * Otherwise, do nothing.\n     */ startConnecting() {\n        /* First, try to transition from IDLE to connecting. If that doesn't happen\n         * because the state is not currently IDLE, check if it is\n         * TRANSIENT_FAILURE, and if so indicate that it should go back to\n         * connecting after the backoff timer ends. Otherwise do nothing */ if (!this.transitionToState([\n            connectivity_state_1.ConnectivityState.IDLE\n        ], connectivity_state_1.ConnectivityState.CONNECTING)) {\n            if (this.connectivityState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                this.continueConnecting = true;\n            }\n        }\n    }\n    /**\n     * Get the subchannel's current connectivity state.\n     */ getConnectivityState() {\n        return this.connectivityState;\n    }\n    /**\n     * Add a listener function to be called whenever the subchannel's\n     * connectivity state changes.\n     * @param listener\n     */ addConnectivityStateListener(listener) {\n        this.stateListeners.push(listener);\n    }\n    /**\n     * Remove a listener previously added with `addConnectivityStateListener`\n     * @param listener A reference to a function previously passed to\n     *     `addConnectivityStateListener`\n     */ removeConnectivityStateListener(listener) {\n        const listenerIndex = this.stateListeners.indexOf(listener);\n        if (listenerIndex > -1) {\n            this.stateListeners.splice(listenerIndex, 1);\n        }\n    }\n    addDisconnectListener(listener) {\n        this.disconnectListeners.add(listener);\n    }\n    removeDisconnectListener(listener) {\n        this.disconnectListeners.delete(listener);\n    }\n    /**\n     * Reset the backoff timeout, and immediately start connecting if in backoff.\n     */ resetBackoff() {\n        this.backoffTimeout.reset();\n        this.transitionToState([\n            connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE\n        ], connectivity_state_1.ConnectivityState.CONNECTING);\n    }\n    getAddress() {\n        return this.subchannelAddressString;\n    }\n    getChannelzRef() {\n        return this.channelzRef;\n    }\n    getRealSubchannel() {\n        return this;\n    }\n}\nexports.Subchannel = Subchannel; //# sourceMappingURL=subchannel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/tls-helpers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getDefaultRootsData = exports.CIPHER_SUITES = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nexports.CIPHER_SUITES = process.env.GRPC_SSL_CIPHER_SUITES;\nconst DEFAULT_ROOTS_FILE_PATH = process.env.GRPC_DEFAULT_SSL_ROOTS_FILE_PATH;\nlet defaultRootsData = null;\nfunction getDefaultRootsData() {\n    if (DEFAULT_ROOTS_FILE_PATH) {\n        if (defaultRootsData === null) {\n            defaultRootsData = fs.readFileSync(DEFAULT_ROOTS_FILE_PATH);\n        }\n        return defaultRootsData;\n    }\n    return null;\n}\nexports.getDefaultRootsData = getDefaultRootsData; //# sourceMappingURL=tls-helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdGxzLWhlbHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQzNELE1BQU1JLEtBQUtDLG1CQUFPQSxDQUFDLGNBQUk7QUFDdkJMLHFCQUFxQixHQUFHTSxRQUFRQyxHQUFHLENBQUNDLHNCQUFzQjtBQUMxRCxNQUFNQywwQkFBMEJILFFBQVFDLEdBQUcsQ0FBQ0csZ0NBQWdDO0FBQzVFLElBQUlDLG1CQUFtQjtBQUN2QixTQUFTVDtJQUNMLElBQUlPLHlCQUF5QjtRQUN6QixJQUFJRSxxQkFBcUIsTUFBTTtZQUMzQkEsbUJBQW1CUCxHQUFHUSxZQUFZLENBQUNIO1FBQ3ZDO1FBQ0EsT0FBT0U7SUFDWDtJQUNBLE9BQU87QUFDWDtBQUNBWCwyQkFBMkIsR0FBR0UscUJBQzlCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3Rscy1oZWxwZXJzLmpzPzBlZDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RGVmYXVsdFJvb3RzRGF0YSA9IGV4cG9ydHMuQ0lQSEVSX1NVSVRFUyA9IHZvaWQgMDtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuZXhwb3J0cy5DSVBIRVJfU1VJVEVTID0gcHJvY2Vzcy5lbnYuR1JQQ19TU0xfQ0lQSEVSX1NVSVRFUztcbmNvbnN0IERFRkFVTFRfUk9PVFNfRklMRV9QQVRIID0gcHJvY2Vzcy5lbnYuR1JQQ19ERUZBVUxUX1NTTF9ST09UU19GSUxFX1BBVEg7XG5sZXQgZGVmYXVsdFJvb3RzRGF0YSA9IG51bGw7XG5mdW5jdGlvbiBnZXREZWZhdWx0Um9vdHNEYXRhKCkge1xuICAgIGlmIChERUZBVUxUX1JPT1RTX0ZJTEVfUEFUSCkge1xuICAgICAgICBpZiAoZGVmYXVsdFJvb3RzRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZGVmYXVsdFJvb3RzRGF0YSA9IGZzLnJlYWRGaWxlU3luYyhERUZBVUxUX1JPT1RTX0ZJTEVfUEFUSCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRSb290c0RhdGE7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5nZXREZWZhdWx0Um9vdHNEYXRhID0gZ2V0RGVmYXVsdFJvb3RzRGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRscy1oZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldERlZmF1bHRSb290c0RhdGEiLCJDSVBIRVJfU1VJVEVTIiwiZnMiLCJyZXF1aXJlIiwicHJvY2VzcyIsImVudiIsIkdSUENfU1NMX0NJUEhFUl9TVUlURVMiLCJERUZBVUxUX1JPT1RTX0ZJTEVfUEFUSCIsIkdSUENfREVGQVVMVF9TU0xfUk9PVFNfRklMRV9QQVRIIiwiZGVmYXVsdFJvb3RzRGF0YSIsInJlYWRGaWxlU3luYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/uri-parser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.uriToString = exports.splitHostPort = exports.parseUri = void 0;\n/*\n * The groups correspond to URI parts as follows:\n * 1. scheme\n * 2. authority\n * 3. path\n */ const URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\nfunction parseUri(uriString) {\n    const parsedUri = URI_REGEX.exec(uriString);\n    if (parsedUri === null) {\n        return null;\n    }\n    return {\n        scheme: parsedUri[1],\n        authority: parsedUri[2],\n        path: parsedUri[3]\n    };\n}\nexports.parseUri = parseUri;\nconst NUMBER_REGEX = /^\\d+$/;\nfunction splitHostPort(path) {\n    if (path.startsWith(\"[\")) {\n        const hostEnd = path.indexOf(\"]\");\n        if (hostEnd === -1) {\n            return null;\n        }\n        const host = path.substring(1, hostEnd);\n        /* Only an IPv6 address should be in bracketed notation, and an IPv6\n         * address should have at least one colon */ if (host.indexOf(\":\") === -1) {\n            return null;\n        }\n        if (path.length > hostEnd + 1) {\n            if (path[hostEnd + 1] === \":\") {\n                const portString = path.substring(hostEnd + 2);\n                if (NUMBER_REGEX.test(portString)) {\n                    return {\n                        host: host,\n                        port: +portString\n                    };\n                } else {\n                    return null;\n                }\n            } else {\n                return null;\n            }\n        } else {\n            return {\n                host\n            };\n        }\n    } else {\n        const splitPath = path.split(\":\");\n        /* Exactly one colon means that this is host:port. Zero colons means that\n         * there is no port. And multiple colons means that this is a bare IPv6\n         * address with no port */ if (splitPath.length === 2) {\n            if (NUMBER_REGEX.test(splitPath[1])) {\n                return {\n                    host: splitPath[0],\n                    port: +splitPath[1]\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return {\n                host: path\n            };\n        }\n    }\n}\nexports.splitHostPort = splitHostPort;\nfunction uriToString(uri) {\n    let result = \"\";\n    if (uri.scheme !== undefined) {\n        result += uri.scheme + \":\";\n    }\n    if (uri.authority !== undefined) {\n        result += \"//\" + uri.authority + \"/\";\n    }\n    result += uri.path;\n    return result;\n}\nexports.uriToString = uriToString; //# sourceMappingURL=uri-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdXJpLXBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7Ozs7Q0FlQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUdBLHFCQUFxQixHQUFHQSxnQkFBZ0IsR0FBRyxLQUFLO0FBQ3RFOzs7OztDQUtDLEdBQ0QsTUFBTUssWUFBWTtBQUNsQixTQUFTRCxTQUFTRSxTQUFTO0lBQ3ZCLE1BQU1DLFlBQVlGLFVBQVVHLElBQUksQ0FBQ0Y7SUFDakMsSUFBSUMsY0FBYyxNQUFNO1FBQ3BCLE9BQU87SUFDWDtJQUNBLE9BQU87UUFDSEUsUUFBUUYsU0FBUyxDQUFDLEVBQUU7UUFDcEJHLFdBQVdILFNBQVMsQ0FBQyxFQUFFO1FBQ3ZCSSxNQUFNSixTQUFTLENBQUMsRUFBRTtJQUN0QjtBQUNKO0FBQ0FQLGdCQUFnQixHQUFHSTtBQUNuQixNQUFNUSxlQUFlO0FBQ3JCLFNBQVNULGNBQWNRLElBQUk7SUFDdkIsSUFBSUEsS0FBS0UsVUFBVSxDQUFDLE1BQU07UUFDdEIsTUFBTUMsVUFBVUgsS0FBS0ksT0FBTyxDQUFDO1FBQzdCLElBQUlELFlBQVksQ0FBQyxHQUFHO1lBQ2hCLE9BQU87UUFDWDtRQUNBLE1BQU1FLE9BQU9MLEtBQUtNLFNBQVMsQ0FBQyxHQUFHSDtRQUMvQjtrREFDMEMsR0FDMUMsSUFBSUUsS0FBS0QsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHO1lBQzFCLE9BQU87UUFDWDtRQUNBLElBQUlKLEtBQUtPLE1BQU0sR0FBR0osVUFBVSxHQUFHO1lBQzNCLElBQUlILElBQUksQ0FBQ0csVUFBVSxFQUFFLEtBQUssS0FBSztnQkFDM0IsTUFBTUssYUFBYVIsS0FBS00sU0FBUyxDQUFDSCxVQUFVO2dCQUM1QyxJQUFJRixhQUFhUSxJQUFJLENBQUNELGFBQWE7b0JBQy9CLE9BQU87d0JBQ0hILE1BQU1BO3dCQUNOSyxNQUFNLENBQUNGO29CQUNYO2dCQUNKLE9BQ0s7b0JBQ0QsT0FBTztnQkFDWDtZQUNKLE9BQ0s7Z0JBQ0QsT0FBTztZQUNYO1FBQ0osT0FDSztZQUNELE9BQU87Z0JBQ0hIO1lBQ0o7UUFDSjtJQUNKLE9BQ0s7UUFDRCxNQUFNTSxZQUFZWCxLQUFLWSxLQUFLLENBQUM7UUFDN0I7O2dDQUV3QixHQUN4QixJQUFJRCxVQUFVSixNQUFNLEtBQUssR0FBRztZQUN4QixJQUFJTixhQUFhUSxJQUFJLENBQUNFLFNBQVMsQ0FBQyxFQUFFLEdBQUc7Z0JBQ2pDLE9BQU87b0JBQ0hOLE1BQU1NLFNBQVMsQ0FBQyxFQUFFO29CQUNsQkQsTUFBTSxDQUFDQyxTQUFTLENBQUMsRUFBRTtnQkFDdkI7WUFDSixPQUNLO2dCQUNELE9BQU87WUFDWDtRQUNKLE9BQ0s7WUFDRCxPQUFPO2dCQUNITixNQUFNTDtZQUNWO1FBQ0o7SUFDSjtBQUNKO0FBQ0FYLHFCQUFxQixHQUFHRztBQUN4QixTQUFTRCxZQUFZc0IsR0FBRztJQUNwQixJQUFJQyxTQUFTO0lBQ2IsSUFBSUQsSUFBSWYsTUFBTSxLQUFLaUIsV0FBVztRQUMxQkQsVUFBVUQsSUFBSWYsTUFBTSxHQUFHO0lBQzNCO0lBQ0EsSUFBSWUsSUFBSWQsU0FBUyxLQUFLZ0IsV0FBVztRQUM3QkQsVUFBVSxPQUFPRCxJQUFJZCxTQUFTLEdBQUc7SUFDckM7SUFDQWUsVUFBVUQsSUFBSWIsSUFBSTtJQUNsQixPQUFPYztBQUNYO0FBQ0F6QixtQkFBbUIsR0FBR0UsYUFDdEIsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZjLW5leHRqcy1zaGFkY24vLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdXJpLXBhcnNlci5qcz8yYWMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIwIGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVyaVRvU3RyaW5nID0gZXhwb3J0cy5zcGxpdEhvc3RQb3J0ID0gZXhwb3J0cy5wYXJzZVVyaSA9IHZvaWQgMDtcbi8qXG4gKiBUaGUgZ3JvdXBzIGNvcnJlc3BvbmQgdG8gVVJJIHBhcnRzIGFzIGZvbGxvd3M6XG4gKiAxLiBzY2hlbWVcbiAqIDIuIGF1dGhvcml0eVxuICogMy4gcGF0aFxuICovXG5jb25zdCBVUklfUkVHRVggPSAvXig/OihbQS1aYS16MC05Ky4tXSspOik/KD86XFwvXFwvKFteL10qKVxcLyk/KC4rKSQvO1xuZnVuY3Rpb24gcGFyc2VVcmkodXJpU3RyaW5nKSB7XG4gICAgY29uc3QgcGFyc2VkVXJpID0gVVJJX1JFR0VYLmV4ZWModXJpU3RyaW5nKTtcbiAgICBpZiAocGFyc2VkVXJpID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzY2hlbWU6IHBhcnNlZFVyaVsxXSxcbiAgICAgICAgYXV0aG9yaXR5OiBwYXJzZWRVcmlbMl0sXG4gICAgICAgIHBhdGg6IHBhcnNlZFVyaVszXSxcbiAgICB9O1xufVxuZXhwb3J0cy5wYXJzZVVyaSA9IHBhcnNlVXJpO1xuY29uc3QgTlVNQkVSX1JFR0VYID0gL15cXGQrJC87XG5mdW5jdGlvbiBzcGxpdEhvc3RQb3J0KHBhdGgpIHtcbiAgICBpZiAocGF0aC5zdGFydHNXaXRoKCdbJykpIHtcbiAgICAgICAgY29uc3QgaG9zdEVuZCA9IHBhdGguaW5kZXhPZignXScpO1xuICAgICAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvc3QgPSBwYXRoLnN1YnN0cmluZygxLCBob3N0RW5kKTtcbiAgICAgICAgLyogT25seSBhbiBJUHY2IGFkZHJlc3Mgc2hvdWxkIGJlIGluIGJyYWNrZXRlZCBub3RhdGlvbiwgYW5kIGFuIElQdjZcbiAgICAgICAgICogYWRkcmVzcyBzaG91bGQgaGF2ZSBhdCBsZWFzdCBvbmUgY29sb24gKi9cbiAgICAgICAgaWYgKGhvc3QuaW5kZXhPZignOicpID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gaG9zdEVuZCArIDEpIHtcbiAgICAgICAgICAgIGlmIChwYXRoW2hvc3RFbmQgKyAxXSA9PT0gJzonKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9ydFN0cmluZyA9IHBhdGguc3Vic3RyaW5nKGhvc3RFbmQgKyAyKTtcbiAgICAgICAgICAgICAgICBpZiAoTlVNQkVSX1JFR0VYLnRlc3QocG9ydFN0cmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IGhvc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3J0OiArcG9ydFN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBob3N0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgc3BsaXRQYXRoID0gcGF0aC5zcGxpdCgnOicpO1xuICAgICAgICAvKiBFeGFjdGx5IG9uZSBjb2xvbiBtZWFucyB0aGF0IHRoaXMgaXMgaG9zdDpwb3J0LiBaZXJvIGNvbG9ucyBtZWFucyB0aGF0XG4gICAgICAgICAqIHRoZXJlIGlzIG5vIHBvcnQuIEFuZCBtdWx0aXBsZSBjb2xvbnMgbWVhbnMgdGhhdCB0aGlzIGlzIGEgYmFyZSBJUHY2XG4gICAgICAgICAqIGFkZHJlc3Mgd2l0aCBubyBwb3J0ICovXG4gICAgICAgIGlmIChzcGxpdFBhdGgubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBpZiAoTlVNQkVSX1JFR0VYLnRlc3Qoc3BsaXRQYXRoWzFdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3Q6IHNwbGl0UGF0aFswXSxcbiAgICAgICAgICAgICAgICAgICAgcG9ydDogK3NwbGl0UGF0aFsxXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGhvc3Q6IHBhdGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5zcGxpdEhvc3RQb3J0ID0gc3BsaXRIb3N0UG9ydDtcbmZ1bmN0aW9uIHVyaVRvU3RyaW5nKHVyaSkge1xuICAgIGxldCByZXN1bHQgPSAnJztcbiAgICBpZiAodXJpLnNjaGVtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCArPSB1cmkuc2NoZW1lICsgJzonO1xuICAgIH1cbiAgICBpZiAodXJpLmF1dGhvcml0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCArPSAnLy8nICsgdXJpLmF1dGhvcml0eSArICcvJztcbiAgICB9XG4gICAgcmVzdWx0ICs9IHVyaS5wYXRoO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnVyaVRvU3RyaW5nID0gdXJpVG9TdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmktcGFyc2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVyaVRvU3RyaW5nIiwic3BsaXRIb3N0UG9ydCIsInBhcnNlVXJpIiwiVVJJX1JFR0VYIiwidXJpU3RyaW5nIiwicGFyc2VkVXJpIiwiZXhlYyIsInNjaGVtZSIsImF1dGhvcml0eSIsInBhdGgiLCJOVU1CRVJfUkVHRVgiLCJzdGFydHNXaXRoIiwiaG9zdEVuZCIsImluZGV4T2YiLCJob3N0Iiwic3Vic3RyaW5nIiwibGVuZ3RoIiwicG9ydFN0cmluZyIsInRlc3QiLCJwb3J0Iiwic3BsaXRQYXRoIiwic3BsaXQiLCJ1cmkiLCJyZXN1bHQiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/@grpc/proto-loader/build/src/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/@grpc/proto-loader/build/src/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadFileDescriptorSetFromObject = exports.loadFileDescriptorSetFromBuffer = exports.fromJSON = exports.loadSync = exports.load = exports.IdempotencyLevel = exports.isAnyExtension = exports.Long = void 0;\nconst camelCase = __webpack_require__(/*! lodash.camelcase */ \"(ssr)/./node_modules/lodash.camelcase/index.js\");\nconst Protobuf = __webpack_require__(/*! protobufjs */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/index.js\");\nconst descriptor = __webpack_require__(/*! protobufjs/ext/descriptor */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/ext/descriptor/index.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/@grpc/proto-loader/build/src/util.js\");\nconst Long = __webpack_require__(/*! long */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/long/umd/index.js\");\nexports.Long = Long;\nfunction isAnyExtension(obj) {\n    return \"@type\" in obj && typeof obj[\"@type\"] === \"string\";\n}\nexports.isAnyExtension = isAnyExtension;\nvar IdempotencyLevel;\n(function(IdempotencyLevel) {\n    IdempotencyLevel[\"IDEMPOTENCY_UNKNOWN\"] = \"IDEMPOTENCY_UNKNOWN\";\n    IdempotencyLevel[\"NO_SIDE_EFFECTS\"] = \"NO_SIDE_EFFECTS\";\n    IdempotencyLevel[\"IDEMPOTENT\"] = \"IDEMPOTENT\";\n})(IdempotencyLevel = exports.IdempotencyLevel || (exports.IdempotencyLevel = {}));\nconst descriptorOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    defaults: true,\n    oneofs: true,\n    json: true\n};\nfunction joinName(baseName, name) {\n    if (baseName === \"\") {\n        return name;\n    } else {\n        return baseName + \".\" + name;\n    }\n}\nfunction isHandledReflectionObject(obj) {\n    return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;\n}\nfunction isNamespaceBase(obj) {\n    return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;\n}\nfunction getAllHandledReflectionObjects(obj, parentName) {\n    const objName = joinName(parentName, obj.name);\n    if (isHandledReflectionObject(obj)) {\n        return [\n            [\n                objName,\n                obj\n            ]\n        ];\n    } else {\n        if (isNamespaceBase(obj) && typeof obj.nested !== \"undefined\") {\n            return Object.keys(obj.nested).map((name)=>{\n                return getAllHandledReflectionObjects(obj.nested[name], objName);\n            }).reduce((accumulator, currentValue)=>accumulator.concat(currentValue), []);\n        }\n    }\n    return [];\n}\nfunction createDeserializer(cls, options) {\n    return function deserialize(argBuf) {\n        return cls.toObject(cls.decode(argBuf), options);\n    };\n}\nfunction createSerializer(cls) {\n    return function serialize(arg) {\n        if (Array.isArray(arg)) {\n            throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);\n        }\n        const message = cls.fromObject(arg);\n        return cls.encode(message).finish();\n    };\n}\nfunction mapMethodOptions(options) {\n    return (options || []).reduce((obj, item)=>{\n        for (const [key, value] of Object.entries(item)){\n            switch(key){\n                case \"uninterpreted_option\":\n                    obj.uninterpreted_option.push(item.uninterpreted_option);\n                    break;\n                default:\n                    obj[key] = value;\n            }\n        }\n        return obj;\n    }, {\n        deprecated: false,\n        idempotency_level: IdempotencyLevel.IDEMPOTENCY_UNKNOWN,\n        uninterpreted_option: []\n    });\n}\nfunction createMethodDefinition(method, serviceName, options, fileDescriptors) {\n    /* This is only ever called after the corresponding root.resolveAll(), so we\n     * can assume that the resolved request and response types are non-null */ const requestType = method.resolvedRequestType;\n    const responseType = method.resolvedResponseType;\n    return {\n        path: \"/\" + serviceName + \"/\" + method.name,\n        requestStream: !!method.requestStream,\n        responseStream: !!method.responseStream,\n        requestSerialize: createSerializer(requestType),\n        requestDeserialize: createDeserializer(requestType, options),\n        responseSerialize: createSerializer(responseType),\n        responseDeserialize: createDeserializer(responseType, options),\n        // TODO(murgatroid99): Find a better way to handle this\n        originalName: camelCase(method.name),\n        requestType: createMessageDefinition(requestType, fileDescriptors),\n        responseType: createMessageDefinition(responseType, fileDescriptors),\n        options: mapMethodOptions(method.parsedOptions)\n    };\n}\nfunction createServiceDefinition(service, name, options, fileDescriptors) {\n    const def = {};\n    for (const method of service.methodsArray){\n        def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);\n    }\n    return def;\n}\nfunction createMessageDefinition(message, fileDescriptors) {\n    const messageDescriptor = message.toDescriptor(\"proto3\");\n    return {\n        format: \"Protocol Buffer 3 DescriptorProto\",\n        type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),\n        fileDescriptorProtos: fileDescriptors\n    };\n}\nfunction createEnumDefinition(enumType, fileDescriptors) {\n    const enumDescriptor = enumType.toDescriptor(\"proto3\");\n    return {\n        format: \"Protocol Buffer 3 EnumDescriptorProto\",\n        type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),\n        fileDescriptorProtos: fileDescriptors\n    };\n}\n/**\n * function createDefinition(obj: Protobuf.Service, name: string, options:\n * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,\n * name: string, options: Options): MessageTypeDefinition; function\n * createDefinition(obj: Protobuf.Enum, name: string, options: Options):\n * EnumTypeDefinition;\n */ function createDefinition(obj, name, options, fileDescriptors) {\n    if (obj instanceof Protobuf.Service) {\n        return createServiceDefinition(obj, name, options, fileDescriptors);\n    } else if (obj instanceof Protobuf.Type) {\n        return createMessageDefinition(obj, fileDescriptors);\n    } else if (obj instanceof Protobuf.Enum) {\n        return createEnumDefinition(obj, fileDescriptors);\n    } else {\n        throw new Error(\"Type mismatch in reflection object handling\");\n    }\n}\nfunction createPackageDefinition(root, options) {\n    const def = {};\n    root.resolveAll();\n    const descriptorList = root.toDescriptor(\"proto3\").file;\n    const bufferList = descriptorList.map((value)=>Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));\n    for (const [name, obj] of getAllHandledReflectionObjects(root, \"\")){\n        def[name] = createDefinition(obj, name, options, bufferList);\n    }\n    return def;\n}\nfunction createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {\n    options = options || {};\n    const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);\n    root.resolveAll();\n    return createPackageDefinition(root, options);\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename One or multiple file paths to load. Can be an absolute path\n *     or relative to an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.json Represent Infinity and NaN as strings in float fields,\n *     and automatically decode google.protobuf.Any values.\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */ function load(filename, options) {\n    return (0, util_1.loadProtosWithOptions)(filename, options).then((loadedRoot)=>{\n        return createPackageDefinition(loadedRoot, options);\n    });\n}\nexports.load = load;\nfunction loadSync(filename, options) {\n    const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);\n    return createPackageDefinition(loadedRoot, options);\n}\nexports.loadSync = loadSync;\nfunction fromJSON(json, options) {\n    options = options || {};\n    const loadedRoot = Protobuf.Root.fromJSON(json);\n    loadedRoot.resolveAll();\n    return createPackageDefinition(loadedRoot, options);\n}\nexports.fromJSON = fromJSON;\nfunction loadFileDescriptorSetFromBuffer(descriptorSet, options) {\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;\nfunction loadFileDescriptorSetFromObject(descriptorSet, options) {\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;\n(0, util_1.addCommonProtos)(); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/@grpc/proto-loader/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/@grpc/proto-loader/build/src/util.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/@grpc/proto-loader/build/src/util.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.addCommonProtos = exports.loadProtosWithOptionsSync = exports.loadProtosWithOptions = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst Protobuf = __webpack_require__(/*! protobufjs */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/index.js\");\nfunction addIncludePathResolver(root, includePaths) {\n    const originalResolvePath = root.resolvePath;\n    root.resolvePath = (origin, target)=>{\n        if (path.isAbsolute(target)) {\n            return target;\n        }\n        for (const directory of includePaths){\n            const fullPath = path.join(directory, target);\n            try {\n                fs.accessSync(fullPath, fs.constants.R_OK);\n                return fullPath;\n            } catch (err) {\n                continue;\n            }\n        }\n        process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);\n        return originalResolvePath(origin, target);\n    };\n}\nasync function loadProtosWithOptions(filename, options) {\n    const root = new Protobuf.Root();\n    options = options || {};\n    if (!!options.includeDirs) {\n        if (!Array.isArray(options.includeDirs)) {\n            return Promise.reject(new Error(\"The includeDirs option must be an array\"));\n        }\n        addIncludePathResolver(root, options.includeDirs);\n    }\n    const loadedRoot = await root.load(filename, options);\n    loadedRoot.resolveAll();\n    return loadedRoot;\n}\nexports.loadProtosWithOptions = loadProtosWithOptions;\nfunction loadProtosWithOptionsSync(filename, options) {\n    const root = new Protobuf.Root();\n    options = options || {};\n    if (!!options.includeDirs) {\n        if (!Array.isArray(options.includeDirs)) {\n            throw new Error(\"The includeDirs option must be an array\");\n        }\n        addIncludePathResolver(root, options.includeDirs);\n    }\n    const loadedRoot = root.loadSync(filename, options);\n    loadedRoot.resolveAll();\n    return loadedRoot;\n}\nexports.loadProtosWithOptionsSync = loadProtosWithOptionsSync;\n/**\n * Load Google's well-known proto files that aren't exposed by Protobuf.js.\n */ function addCommonProtos() {\n    // Protobuf.js exposes: any, duration, empty, field_mask, struct, timestamp,\n    // and wrappers. compiler/plugin is excluded in Protobuf.js and here.\n    // Using constant strings for compatibility with tools like Webpack\n    const apiDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/api.json */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/api.json\");\n    const descriptorDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/descriptor.json */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/descriptor.json\");\n    const sourceContextDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/source_context.json */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/source_context.json\");\n    const typeDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/type.json */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/type.json\");\n    Protobuf.common(\"api\", apiDescriptor.nested.google.nested.protobuf.nested);\n    Protobuf.common(\"descriptor\", descriptorDescriptor.nested.google.nested.protobuf.nested);\n    Protobuf.common(\"source_context\", sourceContextDescriptor.nested.google.nested.protobuf.nested);\n    Protobuf.common(\"type\", typeDescriptor.nested.google.nested.protobuf.nested);\n}\nexports.addCommonProtos = addCommonProtos; //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/@grpc/proto-loader/build/src/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/ext/descriptor/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/ext/descriptor/index.js ***!
  \************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar $protobuf = __webpack_require__(/*! ../.. */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/index.js\");\nmodule.exports = exports = $protobuf.descriptor = $protobuf.Root.fromJSON(__webpack_require__(/*! ../../google/protobuf/descriptor.json */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/descriptor.json\")).lookup(\".google.protobuf\");\nvar Namespace = $protobuf.Namespace, Root = $protobuf.Root, Enum = $protobuf.Enum, Type = $protobuf.Type, Field = $protobuf.Field, MapField = $protobuf.MapField, OneOf = $protobuf.OneOf, Service = $protobuf.Service, Method = $protobuf.Method;\n// --- Root ---\n/**\n * Properties of a FileDescriptorSet message.\n * @interface IFileDescriptorSet\n * @property {IFileDescriptorProto[]} file Files\n */ /**\n * Properties of a FileDescriptorProto message.\n * @interface IFileDescriptorProto\n * @property {string} [name] File name\n * @property {string} [package] Package\n * @property {*} [dependency] Not supported\n * @property {*} [publicDependency] Not supported\n * @property {*} [weakDependency] Not supported\n * @property {IDescriptorProto[]} [messageType] Nested message types\n * @property {IEnumDescriptorProto[]} [enumType] Nested enums\n * @property {IServiceDescriptorProto[]} [service] Nested services\n * @property {IFieldDescriptorProto[]} [extension] Nested extension fields\n * @property {IFileOptions} [options] Options\n * @property {*} [sourceCodeInfo] Not supported\n * @property {string} [syntax=\"proto2\"] Syntax\n */ /**\n * Properties of a FileOptions message.\n * @interface IFileOptions\n * @property {string} [javaPackage]\n * @property {string} [javaOuterClassname]\n * @property {boolean} [javaMultipleFiles]\n * @property {boolean} [javaGenerateEqualsAndHash]\n * @property {boolean} [javaStringCheckUtf8]\n * @property {IFileOptionsOptimizeMode} [optimizeFor=1]\n * @property {string} [goPackage]\n * @property {boolean} [ccGenericServices]\n * @property {boolean} [javaGenericServices]\n * @property {boolean} [pyGenericServices]\n * @property {boolean} [deprecated]\n * @property {boolean} [ccEnableArenas]\n * @property {string} [objcClassPrefix]\n * @property {string} [csharpNamespace]\n */ /**\n * Values of he FileOptions.OptimizeMode enum.\n * @typedef IFileOptionsOptimizeMode\n * @type {number}\n * @property {number} SPEED=1\n * @property {number} CODE_SIZE=2\n * @property {number} LITE_RUNTIME=3\n */ /**\n * Creates a root from a descriptor set.\n * @param {IFileDescriptorSet|Reader|Uint8Array} descriptor Descriptor\n * @returns {Root} Root instance\n */ Root.fromDescriptor = function fromDescriptor(descriptor) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.FileDescriptorSet.decode(descriptor);\n    var root = new Root();\n    if (descriptor.file) {\n        var fileDescriptor, filePackage;\n        for(var j = 0, i; j < descriptor.file.length; ++j){\n            filePackage = root;\n            if ((fileDescriptor = descriptor.file[j])[\"package\"] && fileDescriptor[\"package\"].length) filePackage = root.define(fileDescriptor[\"package\"]);\n            if (fileDescriptor.name && fileDescriptor.name.length) root.files.push(filePackage.filename = fileDescriptor.name);\n            if (fileDescriptor.messageType) for(i = 0; i < fileDescriptor.messageType.length; ++i)filePackage.add(Type.fromDescriptor(fileDescriptor.messageType[i], fileDescriptor.syntax));\n            if (fileDescriptor.enumType) for(i = 0; i < fileDescriptor.enumType.length; ++i)filePackage.add(Enum.fromDescriptor(fileDescriptor.enumType[i]));\n            if (fileDescriptor.extension) for(i = 0; i < fileDescriptor.extension.length; ++i)filePackage.add(Field.fromDescriptor(fileDescriptor.extension[i]));\n            if (fileDescriptor.service) for(i = 0; i < fileDescriptor.service.length; ++i)filePackage.add(Service.fromDescriptor(fileDescriptor.service[i]));\n            var opts = fromDescriptorOptions(fileDescriptor.options, exports.FileOptions);\n            if (opts) {\n                var ks = Object.keys(opts);\n                for(i = 0; i < ks.length; ++i)filePackage.setOption(ks[i], opts[ks[i]]);\n            }\n        }\n    }\n    return root;\n};\n/**\n * Converts a root to a descriptor set.\n * @returns {Message<IFileDescriptorSet>} Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n */ Root.prototype.toDescriptor = function toDescriptor(syntax) {\n    var set = exports.FileDescriptorSet.create();\n    Root_toDescriptorRecursive(this, set.file, syntax);\n    return set;\n};\n// Traverses a namespace and assembles the descriptor set\nfunction Root_toDescriptorRecursive(ns, files, syntax) {\n    // Create a new file\n    var file = exports.FileDescriptorProto.create({\n        name: ns.filename || (ns.fullName.substring(1).replace(/\\./g, \"_\") || \"root\") + \".proto\"\n    });\n    if (syntax) file.syntax = syntax;\n    if (!(ns instanceof Root)) file[\"package\"] = ns.fullName.substring(1);\n    // Add nested types\n    for(var i = 0, nested; i < ns.nestedArray.length; ++i)if ((nested = ns._nestedArray[i]) instanceof Type) file.messageType.push(nested.toDescriptor(syntax));\n    else if (nested instanceof Enum) file.enumType.push(nested.toDescriptor());\n    else if (nested instanceof Field) file.extension.push(nested.toDescriptor(syntax));\n    else if (nested instanceof Service) file.service.push(nested.toDescriptor());\n    else if (nested instanceof /* plain */ Namespace) Root_toDescriptorRecursive(nested, files, syntax); // requires new file\n    // Keep package-level options\n    file.options = toDescriptorOptions(ns.options, exports.FileOptions);\n    // And keep the file only if there is at least one nested object\n    if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length) files.push(file);\n}\n// --- Type ---\n/**\n * Properties of a DescriptorProto message.\n * @interface IDescriptorProto\n * @property {string} [name] Message type name\n * @property {IFieldDescriptorProto[]} [field] Fields\n * @property {IFieldDescriptorProto[]} [extension] Extension fields\n * @property {IDescriptorProto[]} [nestedType] Nested message types\n * @property {IEnumDescriptorProto[]} [enumType] Nested enums\n * @property {IDescriptorProtoExtensionRange[]} [extensionRange] Extension ranges\n * @property {IOneofDescriptorProto[]} [oneofDecl] Oneofs\n * @property {IMessageOptions} [options] Not supported\n * @property {IDescriptorProtoReservedRange[]} [reservedRange] Reserved ranges\n * @property {string[]} [reservedName] Reserved names\n */ /**\n * Properties of a MessageOptions message.\n * @interface IMessageOptions\n * @property {boolean} [mapEntry=false] Whether this message is a map entry\n */ /**\n * Properties of an ExtensionRange message.\n * @interface IDescriptorProtoExtensionRange\n * @property {number} [start] Start field id\n * @property {number} [end] End field id\n */ /**\n * Properties of a ReservedRange message.\n * @interface IDescriptorProtoReservedRange\n * @property {number} [start] Start field id\n * @property {number} [end] End field id\n */ var unnamedMessageIndex = 0;\n/**\n * Creates a type from a descriptor.\n * @param {IDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n * @returns {Type} Type instance\n */ Type.fromDescriptor = function fromDescriptor(descriptor, syntax) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.DescriptorProto.decode(descriptor);\n    // Create the message type\n    var type = new Type(descriptor.name.length ? descriptor.name : \"Type\" + unnamedMessageIndex++, fromDescriptorOptions(descriptor.options, exports.MessageOptions)), i;\n    /* Oneofs */ if (descriptor.oneofDecl) for(i = 0; i < descriptor.oneofDecl.length; ++i)type.add(OneOf.fromDescriptor(descriptor.oneofDecl[i]));\n    /* Fields */ if (descriptor.field) for(i = 0; i < descriptor.field.length; ++i){\n        var field = Field.fromDescriptor(descriptor.field[i], syntax);\n        type.add(field);\n        if (descriptor.field[i].hasOwnProperty(\"oneofIndex\")) type.oneofsArray[descriptor.field[i].oneofIndex].add(field);\n    }\n    /* Extension fields */ if (descriptor.extension) for(i = 0; i < descriptor.extension.length; ++i)type.add(Field.fromDescriptor(descriptor.extension[i], syntax));\n    /* Nested types */ if (descriptor.nestedType) for(i = 0; i < descriptor.nestedType.length; ++i){\n        type.add(Type.fromDescriptor(descriptor.nestedType[i], syntax));\n        if (descriptor.nestedType[i].options && descriptor.nestedType[i].options.mapEntry) type.setOption(\"map_entry\", true);\n    }\n    /* Nested enums */ if (descriptor.enumType) for(i = 0; i < descriptor.enumType.length; ++i)type.add(Enum.fromDescriptor(descriptor.enumType[i]));\n    /* Extension ranges */ if (descriptor.extensionRange && descriptor.extensionRange.length) {\n        type.extensions = [];\n        for(i = 0; i < descriptor.extensionRange.length; ++i)type.extensions.push([\n            descriptor.extensionRange[i].start,\n            descriptor.extensionRange[i].end\n        ]);\n    }\n    /* Reserved... */ if (descriptor.reservedRange && descriptor.reservedRange.length || descriptor.reservedName && descriptor.reservedName.length) {\n        type.reserved = [];\n        /* Ranges */ if (descriptor.reservedRange) for(i = 0; i < descriptor.reservedRange.length; ++i)type.reserved.push([\n            descriptor.reservedRange[i].start,\n            descriptor.reservedRange[i].end\n        ]);\n        /* Names */ if (descriptor.reservedName) for(i = 0; i < descriptor.reservedName.length; ++i)type.reserved.push(descriptor.reservedName[i]);\n    }\n    return type;\n};\n/**\n * Converts a type to a descriptor.\n * @returns {Message<IDescriptorProto>} Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n */ Type.prototype.toDescriptor = function toDescriptor(syntax) {\n    var descriptor = exports.DescriptorProto.create({\n        name: this.name\n    }), i;\n    /* Fields */ for(i = 0; i < this.fieldsArray.length; ++i){\n        var fieldDescriptor;\n        descriptor.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(syntax));\n        if (this._fieldsArray[i] instanceof MapField) {\n            var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType), valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType), valueTypeName = valueType === /* type */ 11 || valueType === /* enum */ 14 ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type : undefined;\n            descriptor.nestedType.push(exports.DescriptorProto.create({\n                name: fieldDescriptor.typeName,\n                field: [\n                    exports.FieldDescriptorProto.create({\n                        name: \"key\",\n                        number: 1,\n                        label: 1,\n                        type: keyType\n                    }),\n                    exports.FieldDescriptorProto.create({\n                        name: \"value\",\n                        number: 2,\n                        label: 1,\n                        type: valueType,\n                        typeName: valueTypeName\n                    })\n                ],\n                options: exports.MessageOptions.create({\n                    mapEntry: true\n                })\n            }));\n        }\n    }\n    /* Oneofs */ for(i = 0; i < this.oneofsArray.length; ++i)descriptor.oneofDecl.push(this._oneofsArray[i].toDescriptor());\n    /* Nested... */ for(i = 0; i < this.nestedArray.length; ++i){\n        /* Extension fields */ if (this._nestedArray[i] instanceof Field) descriptor.field.push(this._nestedArray[i].toDescriptor(syntax));\n        else if (this._nestedArray[i] instanceof Type) descriptor.nestedType.push(this._nestedArray[i].toDescriptor(syntax));\n        else if (this._nestedArray[i] instanceof Enum) descriptor.enumType.push(this._nestedArray[i].toDescriptor());\n    // plain nested namespaces become packages instead in Root#toDescriptor\n    }\n    /* Extension ranges */ if (this.extensions) for(i = 0; i < this.extensions.length; ++i)descriptor.extensionRange.push(exports.DescriptorProto.ExtensionRange.create({\n        start: this.extensions[i][0],\n        end: this.extensions[i][1]\n    }));\n    /* Reserved... */ if (this.reserved) for(i = 0; i < this.reserved.length; ++i)/* Names */ if (typeof this.reserved[i] === \"string\") descriptor.reservedName.push(this.reserved[i]);\n    else descriptor.reservedRange.push(exports.DescriptorProto.ReservedRange.create({\n        start: this.reserved[i][0],\n        end: this.reserved[i][1]\n    }));\n    descriptor.options = toDescriptorOptions(this.options, exports.MessageOptions);\n    return descriptor;\n};\n// --- Field ---\n/**\n * Properties of a FieldDescriptorProto message.\n * @interface IFieldDescriptorProto\n * @property {string} [name] Field name\n * @property {number} [number] Field id\n * @property {IFieldDescriptorProtoLabel} [label] Field rule\n * @property {IFieldDescriptorProtoType} [type] Field basic type\n * @property {string} [typeName] Field type name\n * @property {string} [extendee] Extended type name\n * @property {string} [defaultValue] Literal default value\n * @property {number} [oneofIndex] Oneof index if part of a oneof\n * @property {*} [jsonName] Not supported\n * @property {IFieldOptions} [options] Field options\n */ /**\n * Values of the FieldDescriptorProto.Label enum.\n * @typedef IFieldDescriptorProtoLabel\n * @type {number}\n * @property {number} LABEL_OPTIONAL=1\n * @property {number} LABEL_REQUIRED=2\n * @property {number} LABEL_REPEATED=3\n */ /**\n * Values of the FieldDescriptorProto.Type enum.\n * @typedef IFieldDescriptorProtoType\n * @type {number}\n * @property {number} TYPE_DOUBLE=1\n * @property {number} TYPE_FLOAT=2\n * @property {number} TYPE_INT64=3\n * @property {number} TYPE_UINT64=4\n * @property {number} TYPE_INT32=5\n * @property {number} TYPE_FIXED64=6\n * @property {number} TYPE_FIXED32=7\n * @property {number} TYPE_BOOL=8\n * @property {number} TYPE_STRING=9\n * @property {number} TYPE_GROUP=10\n * @property {number} TYPE_MESSAGE=11\n * @property {number} TYPE_BYTES=12\n * @property {number} TYPE_UINT32=13\n * @property {number} TYPE_ENUM=14\n * @property {number} TYPE_SFIXED32=15\n * @property {number} TYPE_SFIXED64=16\n * @property {number} TYPE_SINT32=17\n * @property {number} TYPE_SINT64=18\n */ /**\n * Properties of a FieldOptions message.\n * @interface IFieldOptions\n * @property {boolean} [packed] Whether packed or not (defaults to `false` for proto2 and `true` for proto3)\n * @property {IFieldOptionsJSType} [jstype] JavaScript value type (not used by protobuf.js)\n */ /**\n * Values of the FieldOptions.JSType enum.\n * @typedef IFieldOptionsJSType\n * @type {number}\n * @property {number} JS_NORMAL=0\n * @property {number} JS_STRING=1\n * @property {number} JS_NUMBER=2\n */ // copied here from parse.js\nvar numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;\n/**\n * Creates a field from a descriptor.\n * @param {IFieldDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n * @returns {Field} Field instance\n */ Field.fromDescriptor = function fromDescriptor(descriptor, syntax) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.DescriptorProto.decode(descriptor);\n    if (typeof descriptor.number !== \"number\") throw Error(\"missing field id\");\n    // Rewire field type\n    var fieldType;\n    if (descriptor.typeName && descriptor.typeName.length) fieldType = descriptor.typeName;\n    else fieldType = fromDescriptorType(descriptor.type);\n    // Rewire field rule\n    var fieldRule;\n    switch(descriptor.label){\n        // 0 is reserved for errors\n        case 1:\n            fieldRule = undefined;\n            break;\n        case 2:\n            fieldRule = \"required\";\n            break;\n        case 3:\n            fieldRule = \"repeated\";\n            break;\n        default:\n            throw Error(\"illegal label: \" + descriptor.label);\n    }\n    var extendee = descriptor.extendee;\n    if (descriptor.extendee !== undefined) {\n        extendee = extendee.length ? extendee : undefined;\n    }\n    var field = new Field(descriptor.name.length ? descriptor.name : \"field\" + descriptor.number, descriptor.number, fieldType, fieldRule, extendee);\n    field.options = fromDescriptorOptions(descriptor.options, exports.FieldOptions);\n    if (descriptor.defaultValue && descriptor.defaultValue.length) {\n        var defaultValue = descriptor.defaultValue;\n        switch(defaultValue){\n            case \"true\":\n            case \"TRUE\":\n                defaultValue = true;\n                break;\n            case \"false\":\n            case \"FALSE\":\n                defaultValue = false;\n                break;\n            default:\n                var match = numberRe.exec(defaultValue);\n                if (match) defaultValue = parseInt(defaultValue); // eslint-disable-line radix\n                break;\n        }\n        field.setOption(\"default\", defaultValue);\n    }\n    if (packableDescriptorType(descriptor.type)) {\n        if (syntax === \"proto3\") {\n            if (descriptor.options && !descriptor.options.packed) field.setOption(\"packed\", false);\n        } else if (!(descriptor.options && descriptor.options.packed)) field.setOption(\"packed\", false);\n    }\n    return field;\n};\n/**\n * Converts a field to a descriptor.\n * @returns {Message<IFieldDescriptorProto>} Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n */ Field.prototype.toDescriptor = function toDescriptor(syntax) {\n    var descriptor = exports.FieldDescriptorProto.create({\n        name: this.name,\n        number: this.id\n    });\n    if (this.map) {\n        descriptor.type = 11; // message\n        descriptor.typeName = $protobuf.util.ucFirst(this.name); // fieldName -> FieldNameEntry (built in Type#toDescriptor)\n        descriptor.label = 3; // repeated\n    } else {\n        // Rewire field type\n        switch(descriptor.type = toDescriptorType(this.type, this.resolve().resolvedType)){\n            case 10:\n            case 11:\n            case 14:\n                descriptor.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;\n                break;\n        }\n        // Rewire field rule\n        switch(this.rule){\n            case \"repeated\":\n                descriptor.label = 3;\n                break;\n            case \"required\":\n                descriptor.label = 2;\n                break;\n            default:\n                descriptor.label = 1;\n                break;\n        }\n    }\n    // Handle extension field\n    descriptor.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;\n    // Handle part of oneof\n    if (this.partOf) {\n        if ((descriptor.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0) throw Error(\"missing oneof\");\n    }\n    if (this.options) {\n        descriptor.options = toDescriptorOptions(this.options, exports.FieldOptions);\n        if (this.options[\"default\"] != null) descriptor.defaultValue = String(this.options[\"default\"]);\n    }\n    if (syntax === \"proto3\") {\n        if (!this.packed) (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = false;\n    } else if (this.packed) (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = true;\n    return descriptor;\n};\n// --- Enum ---\n/**\n * Properties of an EnumDescriptorProto message.\n * @interface IEnumDescriptorProto\n * @property {string} [name] Enum name\n * @property {IEnumValueDescriptorProto[]} [value] Enum values\n * @property {IEnumOptions} [options] Enum options\n */ /**\n * Properties of an EnumValueDescriptorProto message.\n * @interface IEnumValueDescriptorProto\n * @property {string} [name] Name\n * @property {number} [number] Value\n * @property {*} [options] Not supported\n */ /**\n * Properties of an EnumOptions message.\n * @interface IEnumOptions\n * @property {boolean} [allowAlias] Whether aliases are allowed\n * @property {boolean} [deprecated]\n */ var unnamedEnumIndex = 0;\n/**\n * Creates an enum from a descriptor.\n * @param {IEnumDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {Enum} Enum instance\n */ Enum.fromDescriptor = function fromDescriptor(descriptor) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.EnumDescriptorProto.decode(descriptor);\n    // Construct values object\n    var values = {};\n    if (descriptor.value) for(var i = 0; i < descriptor.value.length; ++i){\n        var name = descriptor.value[i].name, value = descriptor.value[i].number || 0;\n        values[name && name.length ? name : \"NAME\" + value] = value;\n    }\n    return new Enum(descriptor.name && descriptor.name.length ? descriptor.name : \"Enum\" + unnamedEnumIndex++, values, fromDescriptorOptions(descriptor.options, exports.EnumOptions));\n};\n/**\n * Converts an enum to a descriptor.\n * @returns {Message<IEnumDescriptorProto>} Descriptor\n */ Enum.prototype.toDescriptor = function toDescriptor() {\n    // Values\n    var values = [];\n    for(var i = 0, ks = Object.keys(this.values); i < ks.length; ++i)values.push(exports.EnumValueDescriptorProto.create({\n        name: ks[i],\n        number: this.values[ks[i]]\n    }));\n    return exports.EnumDescriptorProto.create({\n        name: this.name,\n        value: values,\n        options: toDescriptorOptions(this.options, exports.EnumOptions)\n    });\n};\n// --- OneOf ---\n/**\n * Properties of a OneofDescriptorProto message.\n * @interface IOneofDescriptorProto\n * @property {string} [name] Oneof name\n * @property {*} [options] Not supported\n */ var unnamedOneofIndex = 0;\n/**\n * Creates a oneof from a descriptor.\n * @param {IOneofDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {OneOf} OneOf instance\n */ OneOf.fromDescriptor = function fromDescriptor(descriptor) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.OneofDescriptorProto.decode(descriptor);\n    return new OneOf(// unnamedOneOfIndex is global, not per type, because we have no ref to a type here\n    descriptor.name && descriptor.name.length ? descriptor.name : \"oneof\" + unnamedOneofIndex++);\n};\n/**\n * Converts a oneof to a descriptor.\n * @returns {Message<IOneofDescriptorProto>} Descriptor\n */ OneOf.prototype.toDescriptor = function toDescriptor() {\n    return exports.OneofDescriptorProto.create({\n        name: this.name\n    });\n};\n// --- Service ---\n/**\n * Properties of a ServiceDescriptorProto message.\n * @interface IServiceDescriptorProto\n * @property {string} [name] Service name\n * @property {IMethodDescriptorProto[]} [method] Methods\n * @property {IServiceOptions} [options] Options\n */ /**\n * Properties of a ServiceOptions message.\n * @interface IServiceOptions\n * @property {boolean} [deprecated]\n */ var unnamedServiceIndex = 0;\n/**\n * Creates a service from a descriptor.\n * @param {IServiceDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {Service} Service instance\n */ Service.fromDescriptor = function fromDescriptor(descriptor) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.ServiceDescriptorProto.decode(descriptor);\n    var service = new Service(descriptor.name && descriptor.name.length ? descriptor.name : \"Service\" + unnamedServiceIndex++, fromDescriptorOptions(descriptor.options, exports.ServiceOptions));\n    if (descriptor.method) for(var i = 0; i < descriptor.method.length; ++i)service.add(Method.fromDescriptor(descriptor.method[i]));\n    return service;\n};\n/**\n * Converts a service to a descriptor.\n * @returns {Message<IServiceDescriptorProto>} Descriptor\n */ Service.prototype.toDescriptor = function toDescriptor() {\n    // Methods\n    var methods = [];\n    for(var i = 0; i < this.methodsArray.length; ++i)methods.push(this._methodsArray[i].toDescriptor());\n    return exports.ServiceDescriptorProto.create({\n        name: this.name,\n        method: methods,\n        options: toDescriptorOptions(this.options, exports.ServiceOptions)\n    });\n};\n// --- Method ---\n/**\n * Properties of a MethodDescriptorProto message.\n * @interface IMethodDescriptorProto\n * @property {string} [name] Method name\n * @property {string} [inputType] Request type name\n * @property {string} [outputType] Response type name\n * @property {IMethodOptions} [options] Not supported\n * @property {boolean} [clientStreaming=false] Whether requests are streamed\n * @property {boolean} [serverStreaming=false] Whether responses are streamed\n */ /**\n * Properties of a MethodOptions message.\n * @interface IMethodOptions\n * @property {boolean} [deprecated]\n */ var unnamedMethodIndex = 0;\n/**\n * Creates a method from a descriptor.\n * @param {IMethodDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {Method} Reflected method instance\n */ Method.fromDescriptor = function fromDescriptor(descriptor) {\n    // Decode the descriptor message if specified as a buffer:\n    if (typeof descriptor.length === \"number\") descriptor = exports.MethodDescriptorProto.decode(descriptor);\n    return new Method(// unnamedMethodIndex is global, not per service, because we have no ref to a service here\n    descriptor.name && descriptor.name.length ? descriptor.name : \"Method\" + unnamedMethodIndex++, \"rpc\", descriptor.inputType, descriptor.outputType, Boolean(descriptor.clientStreaming), Boolean(descriptor.serverStreaming), fromDescriptorOptions(descriptor.options, exports.MethodOptions));\n};\n/**\n * Converts a method to a descriptor.\n * @returns {Message<IMethodDescriptorProto>} Descriptor\n */ Method.prototype.toDescriptor = function toDescriptor() {\n    return exports.MethodDescriptorProto.create({\n        name: this.name,\n        inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,\n        outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,\n        clientStreaming: this.requestStream,\n        serverStreaming: this.responseStream,\n        options: toDescriptorOptions(this.options, exports.MethodOptions)\n    });\n};\n// --- utility ---\n// Converts a descriptor type to a protobuf.js basic type\nfunction fromDescriptorType(type) {\n    switch(type){\n        // 0 is reserved for errors\n        case 1:\n            return \"double\";\n        case 2:\n            return \"float\";\n        case 3:\n            return \"int64\";\n        case 4:\n            return \"uint64\";\n        case 5:\n            return \"int32\";\n        case 6:\n            return \"fixed64\";\n        case 7:\n            return \"fixed32\";\n        case 8:\n            return \"bool\";\n        case 9:\n            return \"string\";\n        case 12:\n            return \"bytes\";\n        case 13:\n            return \"uint32\";\n        case 15:\n            return \"sfixed32\";\n        case 16:\n            return \"sfixed64\";\n        case 17:\n            return \"sint32\";\n        case 18:\n            return \"sint64\";\n    }\n    throw Error(\"illegal type: \" + type);\n}\n// Tests if a descriptor type is packable\nfunction packableDescriptorType(type) {\n    switch(type){\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n            return true;\n    }\n    return false;\n}\n// Converts a protobuf.js basic type to a descriptor type\nfunction toDescriptorType(type, resolvedType) {\n    switch(type){\n        // 0 is reserved for errors\n        case \"double\":\n            return 1;\n        case \"float\":\n            return 2;\n        case \"int64\":\n            return 3;\n        case \"uint64\":\n            return 4;\n        case \"int32\":\n            return 5;\n        case \"fixed64\":\n            return 6;\n        case \"fixed32\":\n            return 7;\n        case \"bool\":\n            return 8;\n        case \"string\":\n            return 9;\n        case \"bytes\":\n            return 12;\n        case \"uint32\":\n            return 13;\n        case \"sfixed32\":\n            return 15;\n        case \"sfixed64\":\n            return 16;\n        case \"sint32\":\n            return 17;\n        case \"sint64\":\n            return 18;\n    }\n    if (resolvedType instanceof Enum) return 14;\n    if (resolvedType instanceof Type) return resolvedType.group ? 10 : 11;\n    throw Error(\"illegal type: \" + type);\n}\n// Converts descriptor options to an options object\nfunction fromDescriptorOptions(options, type) {\n    if (!options) return undefined;\n    var out = [];\n    for(var i = 0, field, key, val; i < type.fieldsArray.length; ++i)if ((key = (field = type._fieldsArray[i]).name) !== \"uninterpretedOption\") {\n        if (options.hasOwnProperty(key)) {\n            val = options[key];\n            if (field.resolvedType instanceof Enum && typeof val === \"number\" && field.resolvedType.valuesById[val] !== undefined) val = field.resolvedType.valuesById[val];\n            out.push(underScore(key), val);\n        }\n    }\n    return out.length ? $protobuf.util.toObject(out) : undefined;\n}\n// Converts an options object to descriptor options\nfunction toDescriptorOptions(options, type) {\n    if (!options) return undefined;\n    var out = [];\n    for(var i = 0, ks = Object.keys(options), key, val; i < ks.length; ++i){\n        val = options[key = ks[i]];\n        if (key === \"default\") continue;\n        var field = type.fields[key];\n        if (!field && !(field = type.fields[key = $protobuf.util.camelCase(key)])) continue;\n        out.push(key, val);\n    }\n    return out.length ? type.fromObject($protobuf.util.toObject(out)) : undefined;\n}\n// Calculates the shortest relative path from `from` to `to`.\nfunction shortname(from, to) {\n    var fromPath = from.fullName.split(\".\"), toPath = to.fullName.split(\".\"), i = 0, j = 0, k = toPath.length - 1;\n    if (!(from instanceof Root) && to instanceof Namespace) while(i < fromPath.length && j < k && fromPath[i] === toPath[j]){\n        var other = to.lookup(fromPath[i++], true);\n        if (other !== null && other !== to) break;\n        ++j;\n    }\n    else for(; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j);\n    return toPath.slice(j).join(\".\");\n}\n// copied here from cli/targets/proto.js\nfunction underScore(str) {\n    return str.substring(0, 1) + str.substring(1).replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) {\n        return \"_\" + $1.toLowerCase();\n    });\n} // --- exports ---\n /**\n * Reflected file descriptor set.\n * @name FileDescriptorSet\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected file descriptor proto.\n * @name FileDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected descriptor proto.\n * @name DescriptorProto\n * @type {Type}\n * @property {Type} ExtensionRange\n * @property {Type} ReservedRange\n * @const\n * @tstype $protobuf.Type & {\n *     ExtensionRange: $protobuf.Type,\n *     ReservedRange: $protobuf.Type\n * }\n */  /**\n * Reflected field descriptor proto.\n * @name FieldDescriptorProto\n * @type {Type}\n * @property {Enum} Label\n * @property {Enum} Type\n * @const\n * @tstype $protobuf.Type & {\n *     Label: $protobuf.Enum,\n *     Type: $protobuf.Enum\n * }\n */  /**\n * Reflected oneof descriptor proto.\n * @name OneofDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected enum descriptor proto.\n * @name EnumDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected service descriptor proto.\n * @name ServiceDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected enum value descriptor proto.\n * @name EnumValueDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected method descriptor proto.\n * @name MethodDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected file options.\n * @name FileOptions\n * @type {Type}\n * @property {Enum} OptimizeMode\n * @const\n * @tstype $protobuf.Type & {\n *     OptimizeMode: $protobuf.Enum\n * }\n */  /**\n * Reflected message options.\n * @name MessageOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected field options.\n * @name FieldOptions\n * @type {Type}\n * @property {Enum} CType\n * @property {Enum} JSType\n * @const\n * @tstype $protobuf.Type & {\n *     CType: $protobuf.Enum,\n *     JSType: $protobuf.Enum\n * }\n */  /**\n * Reflected oneof options.\n * @name OneofOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected enum options.\n * @name EnumOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected enum value options.\n * @name EnumValueOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected service options.\n * @name ServiceOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected method options.\n * @name MethodOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */  /**\n * Reflected uninterpretet option.\n * @name UninterpretedOption\n * @type {Type}\n * @property {Type} NamePart\n * @const\n * @tstype $protobuf.Type & {\n *     NamePart: $protobuf.Type\n * }\n */  /**\n * Reflected source code info.\n * @name SourceCodeInfo\n * @type {Type}\n * @property {Type} Location\n * @const\n * @tstype $protobuf.Type & {\n *     Location: $protobuf.Type\n * }\n */  /**\n * Reflected generated code info.\n * @name GeneratedCodeInfo\n * @type {Type}\n * @property {Type} Annotation\n * @const\n * @tstype $protobuf.Type & {\n *     Annotation: $protobuf.Type\n * }\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/ext/descriptor/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/index.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// full library entry point.\n\nmodule.exports = __webpack_require__(/*! ./src/index */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw0QkFBNEI7QUFFZjtBQUNiQSxrSUFBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZmMtbmV4dGpzLXNoYWRjbi8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL2luZGV4LmpzP2M5NzMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZnVsbCBsaWJyYXJ5IGVudHJ5IHBvaW50LlxuXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vc3JjL2luZGV4XCIpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/common.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/common.js ***!
  \**************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = common;\nvar commonRe = /\\/|\\./;\n/**\n * Provides common type definitions.\n * Can also be used to provide additional google types or your own custom types.\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\n * @returns {undefined}\n * @property {INamespace} google/protobuf/any.proto Any\n * @property {INamespace} google/protobuf/duration.proto Duration\n * @property {INamespace} google/protobuf/empty.proto Empty\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\n * @example\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\n * protobuf.common(\"descriptor\", descriptorJson);\n *\n * // manually provides a custom definition (uses my.foo namespace)\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\n */ function common(name, json) {\n    if (!commonRe.test(name)) {\n        name = \"google/protobuf/\" + name + \".proto\";\n        json = {\n            nested: {\n                google: {\n                    nested: {\n                        protobuf: {\n                            nested: json\n                        }\n                    }\n                }\n            }\n        };\n    }\n    common[name] = json;\n}\n// Not provided because of limited use (feel free to discuss or to provide yourself):\n//\n// google/protobuf/descriptor.proto\n// google/protobuf/source_context.proto\n// google/protobuf/type.proto\n//\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\n// the repository or package within the google/protobuf directory.\ncommon(\"any\", {\n    /**\n     * Properties of a google.protobuf.Any message.\n     * @interface IAny\n     * @type {Object}\n     * @property {string} [typeUrl]\n     * @property {Uint8Array} [bytes]\n     * @memberof common\n     */ Any: {\n        fields: {\n            type_url: {\n                type: \"string\",\n                id: 1\n            },\n            value: {\n                type: \"bytes\",\n                id: 2\n            }\n        }\n    }\n});\nvar timeType;\ncommon(\"duration\", {\n    /**\n     * Properties of a google.protobuf.Duration message.\n     * @interface IDuration\n     * @type {Object}\n     * @property {number|Long} [seconds]\n     * @property {number} [nanos]\n     * @memberof common\n     */ Duration: timeType = {\n        fields: {\n            seconds: {\n                type: \"int64\",\n                id: 1\n            },\n            nanos: {\n                type: \"int32\",\n                id: 2\n            }\n        }\n    }\n});\ncommon(\"timestamp\", {\n    /**\n     * Properties of a google.protobuf.Timestamp message.\n     * @interface ITimestamp\n     * @type {Object}\n     * @property {number|Long} [seconds]\n     * @property {number} [nanos]\n     * @memberof common\n     */ Timestamp: timeType\n});\ncommon(\"empty\", {\n    /**\n     * Properties of a google.protobuf.Empty message.\n     * @interface IEmpty\n     * @memberof common\n     */ Empty: {\n        fields: {}\n    }\n});\ncommon(\"struct\", {\n    /**\n     * Properties of a google.protobuf.Struct message.\n     * @interface IStruct\n     * @type {Object}\n     * @property {Object.<string,IValue>} [fields]\n     * @memberof common\n     */ Struct: {\n        fields: {\n            fields: {\n                keyType: \"string\",\n                type: \"Value\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.Value message.\n     * @interface IValue\n     * @type {Object}\n     * @property {string} [kind]\n     * @property {0} [nullValue]\n     * @property {number} [numberValue]\n     * @property {string} [stringValue]\n     * @property {boolean} [boolValue]\n     * @property {IStruct} [structValue]\n     * @property {IListValue} [listValue]\n     * @memberof common\n     */ Value: {\n        oneofs: {\n            kind: {\n                oneof: [\n                    \"nullValue\",\n                    \"numberValue\",\n                    \"stringValue\",\n                    \"boolValue\",\n                    \"structValue\",\n                    \"listValue\"\n                ]\n            }\n        },\n        fields: {\n            nullValue: {\n                type: \"NullValue\",\n                id: 1\n            },\n            numberValue: {\n                type: \"double\",\n                id: 2\n            },\n            stringValue: {\n                type: \"string\",\n                id: 3\n            },\n            boolValue: {\n                type: \"bool\",\n                id: 4\n            },\n            structValue: {\n                type: \"Struct\",\n                id: 5\n            },\n            listValue: {\n                type: \"ListValue\",\n                id: 6\n            }\n        }\n    },\n    NullValue: {\n        values: {\n            NULL_VALUE: 0\n        }\n    },\n    /**\n     * Properties of a google.protobuf.ListValue message.\n     * @interface IListValue\n     * @type {Object}\n     * @property {Array.<IValue>} [values]\n     * @memberof common\n     */ ListValue: {\n        fields: {\n            values: {\n                rule: \"repeated\",\n                type: \"Value\",\n                id: 1\n            }\n        }\n    }\n});\ncommon(\"wrappers\", {\n    /**\n     * Properties of a google.protobuf.DoubleValue message.\n     * @interface IDoubleValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */ DoubleValue: {\n        fields: {\n            value: {\n                type: \"double\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.FloatValue message.\n     * @interface IFloatValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */ FloatValue: {\n        fields: {\n            value: {\n                type: \"float\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.Int64Value message.\n     * @interface IInt64Value\n     * @type {Object}\n     * @property {number|Long} [value]\n     * @memberof common\n     */ Int64Value: {\n        fields: {\n            value: {\n                type: \"int64\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.UInt64Value message.\n     * @interface IUInt64Value\n     * @type {Object}\n     * @property {number|Long} [value]\n     * @memberof common\n     */ UInt64Value: {\n        fields: {\n            value: {\n                type: \"uint64\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.Int32Value message.\n     * @interface IInt32Value\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */ Int32Value: {\n        fields: {\n            value: {\n                type: \"int32\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.UInt32Value message.\n     * @interface IUInt32Value\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */ UInt32Value: {\n        fields: {\n            value: {\n                type: \"uint32\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.BoolValue message.\n     * @interface IBoolValue\n     * @type {Object}\n     * @property {boolean} [value]\n     * @memberof common\n     */ BoolValue: {\n        fields: {\n            value: {\n                type: \"bool\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.StringValue message.\n     * @interface IStringValue\n     * @type {Object}\n     * @property {string} [value]\n     * @memberof common\n     */ StringValue: {\n        fields: {\n            value: {\n                type: \"string\",\n                id: 1\n            }\n        }\n    },\n    /**\n     * Properties of a google.protobuf.BytesValue message.\n     * @interface IBytesValue\n     * @type {Object}\n     * @property {Uint8Array} [value]\n     * @memberof common\n     */ BytesValue: {\n        fields: {\n            value: {\n                type: \"bytes\",\n                id: 1\n            }\n        }\n    }\n});\ncommon(\"field_mask\", {\n    /**\n     * Properties of a google.protobuf.FieldMask message.\n     * @interface IDoubleValue\n     * @type {Object}\n     * @property {number} [value]\n     * @memberof common\n     */ FieldMask: {\n        fields: {\n            paths: {\n                rule: \"repeated\",\n                type: \"string\",\n                id: 1\n            }\n        }\n    }\n});\n/**\n * Gets the root definition of the specified common proto file.\n *\n * Bundled definitions are:\n * - google/protobuf/any.proto\n * - google/protobuf/duration.proto\n * - google/protobuf/empty.proto\n * - google/protobuf/field_mask.proto\n * - google/protobuf/struct.proto\n * - google/protobuf/timestamp.proto\n * - google/protobuf/wrappers.proto\n *\n * @param {string} file Proto file name\n * @returns {INamespace|null} Root definition or `null` if not defined\n */ common.get = function get(file) {\n    return common[file] || null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/converter.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/converter.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */ var converter = exports;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */ function genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n    var defaultAlreadyEmitted = false;\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) {\n            gen(\"switch(d%s){\", prop);\n            for(var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i){\n                // enum unknown values passthrough\n                if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) {\n                    gen(\"default:\")('if(typeof(d%s)===\"number\"){m%s=d%s;break}', prop, prop, prop);\n                    if (!field.repeated) gen // fallback to default value only for\n                    (\"break\"); // for non-repeated fields, just ignore\n                    defaultAlreadyEmitted = true;\n                }\n                gen(\"case%j:\", keys[i])(\"case %i:\", values[keys[i]])(\"m%s=%j\", prop, values[keys[i]])(\"break\");\n            }\n            gen(\"}\");\n        } else gen('if(typeof d%s!==\"object\")', prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch(field.type){\n            case \"double\":\n            case \"float\":\n                gen(\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\":\n                gen(\"m%s=d%s>>>0\", prop, prop);\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\":\n                gen(\"m%s=d%s|0\", prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n            // eslint-disable-next-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\":\n                gen(\"if(util.Long)\")(\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)('else if(typeof d%s===\"string\")', prop)(\"m%s=parseInt(d%s,10)\", prop, prop)('else if(typeof d%s===\"number\")', prop)(\"m%s=d%s\", prop, prop)('else if(typeof d%s===\"object\")', prop)(\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n                break;\n            case \"bytes\":\n                gen('if(typeof d%s===\"string\")', prop)(\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)(\"else if(d%s.length >= 0)\", prop)(\"m%s=d%s\", prop, prop);\n                break;\n            case \"string\":\n                gen(\"m%s=String(d%s)\", prop, prop);\n                break;\n            case \"bool\":\n                gen(\"m%s=Boolean(d%s)\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ }\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ converter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ var fields = mtype.fieldsArray;\n    var gen = util.codegen([\n        \"d\"\n    ], mtype.name + \"$fromObject\")(\"if(d instanceof this.ctor)\")(\"return d\");\n    if (!fields.length) return gen(\"return new this.ctor\");\n    gen(\"var m=new this.ctor\");\n    for(var i = 0; i < fields.length; ++i){\n        var field = fields[i].resolve(), prop = util.safeProp(field.name);\n        // Map fields\n        if (field.map) {\n            gen(\"if(d%s){\", prop)('if(typeof d%s!==\"object\")', prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s={}\", prop)(\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")(\"}\")(\"}\");\n        // Repeated fields\n        } else if (field.repeated) {\n            gen(\"if(d%s){\", prop)(\"if(!Array.isArray(d%s))\", prop)(\"throw TypeError(%j)\", field.fullName + \": array expected\")(\"m%s=[]\", prop)(\"for(var i=0;i<d%s.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")(\"}\")(\"}\");\n        // Non-repeated fields\n        } else {\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n            (\"if(d%s!=null){\", prop); // !== undefined && !== null\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n            if (!(field.resolvedType instanceof Enum)) gen(\"}\");\n        }\n    }\n    return gen(\"return m\");\n/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ };\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */ function genValuePartial_toObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s\", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);\n        else gen(\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch(field.type){\n            case \"double\":\n            case \"float\":\n                gen(\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n            // eslint-disable-next-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\":\n                gen('if(typeof m%s===\"number\")', prop)(\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)(\"else\") // Long-like\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\" : \"\", prop);\n                break;\n            case \"bytes\":\n                gen(\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n                break;\n            default:\n                gen(\"d%s=m%s\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ }\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ converter.toObject = function toObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    if (!fields.length) return util.codegen()(\"return {}\");\n    var gen = util.codegen([\n        \"m\",\n        \"o\"\n    ], mtype.name + \"$toObject\")(\"if(!o)\")(\"o={}\")(\"var d={}\");\n    var repeatedFields = [], mapFields = [], normalFields = [], i = 0;\n    for(; i < fields.length; ++i)if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);\n    if (repeatedFields.length) {\n        gen(\"if(o.arrays||o.defaults){\");\n        for(i = 0; i < repeatedFields.length; ++i)gen(\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n        gen(\"}\");\n    }\n    if (mapFields.length) {\n        gen(\"if(o.objects||o.defaults){\");\n        for(i = 0; i < mapFields.length; ++i)gen(\"d%s={}\", util.safeProp(mapFields[i].name));\n        gen(\"}\");\n    }\n    if (normalFields.length) {\n        gen(\"if(o.defaults){\");\n        for(i = 0; i < normalFields.length; ++i){\n            var field = normalFields[i], prop = util.safeProp(field.name);\n            if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\n            else if (field.long) gen(\"if(util.Long){\")(\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)(\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)(\"}else\")(\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\n            else if (field.bytes) {\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n                gen(\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))(\"else{\")(\"d%s=%s\", prop, arrayDefault)(\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)(\"}\");\n            } else gen(\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n        }\n        gen(\"}\");\n    }\n    var hasKs2 = false;\n    for(i = 0; i < fields.length; ++i){\n        var field = fields[i], index = mtype._fieldsArray.indexOf(field), prop = util.safeProp(field.name);\n        if (field.map) {\n            if (!hasKs2) {\n                hasKs2 = true;\n                gen(\"var ks2\");\n            }\n            gen(\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)(\"d%s={}\", prop)(\"for(var j=0;j<ks2.length;++j){\");\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")(\"}\");\n        } else if (field.repeated) {\n            gen(\"if(m%s&&m%s.length){\", prop, prop)(\"d%s=[]\", prop)(\"for(var j=0;j<m%s.length;++j){\", prop);\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")(\"}\");\n        } else {\n            gen(\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n            if (field.partOf) gen(\"if(o.oneofs)\")(\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n        }\n        gen(\"}\");\n    }\n    return gen(\"return d\");\n/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/converter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/decoder.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/decoder.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = decoder;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\"), types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/types.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\nfunction missing(field) {\n    return \"missing required '\" + field.name + \"'\";\n}\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ function decoder(mtype) {\n    /* eslint-disable no-unexpected-multiline */ var gen = util.codegen([\n        \"r\",\n        \"l\",\n        \"e\"\n    ], mtype.name + \"$decode\")(\"if(!(r instanceof Reader))\")(\"r=Reader.create(r)\")(\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) {\n        return field.map;\n    }).length ? \",k,value\" : \"\"))(\"while(r.pos<c){\")(\"var t=r.uint32()\")(\"if(t===e)\")(\"break\")(\"switch(t>>>3){\");\n    var i = 0;\n    for(; i < /* initializes */ mtype.fieldsArray.length; ++i){\n        var field = mtype._fieldsArray[i].resolve(), type = field.resolvedType instanceof Enum ? \"int32\" : field.type, ref = \"m\" + util.safeProp(field.name);\n        gen(\"case %i: {\", field.id);\n        // Map fields\n        if (field.map) {\n            gen(\"if(%s===util.emptyObject)\", ref)(\"%s={}\", ref)(\"var c2 = r.uint32()+r.pos\");\n            if (types.defaults[field.keyType] !== undefined) gen(\"k=%j\", types.defaults[field.keyType]);\n            else gen(\"k=null\");\n            if (types.defaults[type] !== undefined) gen(\"value=%j\", types.defaults[type]);\n            else gen(\"value=null\");\n            gen(\"while(r.pos<c2){\")(\"var tag2=r.uint32()\")(\"switch(tag2>>>3){\")(\"case 1: k=r.%s(); break\", field.keyType)(\"case 2:\");\n            if (types.basic[type] === undefined) gen(\"value=types[%i].decode(r,r.uint32())\", i); // can't be groups\n            else gen(\"value=r.%s()\", type);\n            gen(\"break\")(\"default:\")(\"r.skipType(tag2&7)\")(\"break\")(\"}\")(\"}\");\n            if (types.long[field.keyType] !== undefined) gen('%s[typeof k===\"object\"?util.longToHash(k):k]=value', ref);\n            else gen(\"%s[k]=value\", ref);\n        // Repeated fields\n        } else if (field.repeated) {\n            gen(\"if(!(%s&&%s.length))\", ref, ref)(\"%s=[]\", ref);\n            // Packable (always check for forward and backward compatiblity)\n            if (types.packed[type] !== undefined) gen(\"if((t&7)===2){\")(\"var c2=r.uint32()+r.pos\")(\"while(r.pos<c2)\")(\"%s.push(r.%s())\", ref, type)(\"}else\");\n            // Non-packed\n            if (types.basic[type] === undefined) gen(field.delimited ? \"%s.push(types[%i].decode(r,undefined,((t&~7)|4)))\" : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\n            else gen(\"%s.push(r.%s())\", ref, type);\n        // Non-repeated\n        } else if (types.basic[type] === undefined) gen(field.delimited ? \"%s=types[%i].decode(r,undefined,((t&~7)|4))\" : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\n        else gen(\"%s=r.%s()\", ref, type);\n        gen(\"break\")(\"}\");\n    // Unknown fields\n    }\n    gen(\"default:\")(\"r.skipType(t&7)\")(\"break\")(\"}\")(\"}\");\n    // Field presence\n    for(i = 0; i < mtype._fieldsArray.length; ++i){\n        var rfield = mtype._fieldsArray[i];\n        if (rfield.required) gen(\"if(!m.hasOwnProperty(%j))\", rfield.name)(\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n    }\n    return gen(\"return m\");\n/* eslint-enable no-unexpected-multiline */ }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/decoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/encoder.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/encoder.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = encoder;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\"), types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/types.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */ function genTypePartial(gen, field, fieldIndex, ref) {\n    return field.delimited ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ function encoder(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */ var gen = util.codegen([\n        \"m\",\n        \"w\"\n    ], mtype.name + \"$encode\")(\"if(!w)\")(\"w=Writer.create()\");\n    var i, ref;\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    for(var i = 0; i < fields.length; ++i){\n        var field = fields[i].resolve(), index = mtype._fieldsArray.indexOf(field), type = field.resolvedType instanceof Enum ? \"int32\" : field.type, wireType = types.basic[type];\n        ref = \"m\" + util.safeProp(field.name);\n        // Map fields\n        if (field.map) {\n            gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n            (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)(\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n            if (wireType === undefined) gen(\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n            else gen(\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n            gen(\"}\")(\"}\");\n        // Repeated fields\n        } else if (field.repeated) {\n            gen(\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n            // Packed repeated\n            if (field.packed && types.packed[type] !== undefined) {\n                gen(\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)(\"for(var i=0;i<%s.length;++i)\", ref)(\"w.%s(%s[i])\", type, ref)(\"w.ldelim()\");\n            // Non-packed\n            } else {\n                gen(\"for(var i=0;i<%s.length;++i)\", ref);\n                if (wireType === undefined) genTypePartial(gen, field, index, ref + \"[i]\");\n                else gen(\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n            }\n            gen(\"}\");\n        // Non-repeated\n        } else {\n            if (field.optional) gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n            if (wireType === undefined) genTypePartial(gen, field, index, ref);\n            else gen(\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n        }\n    }\n    return gen(\"return w\");\n/* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */ }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/encoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js":
/*!************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Enum;\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/object.js\");\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/namespace.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum\n */ function Enum(name, values, options, comment, comments, valuesOptions) {\n    ReflectionObject.call(this, name, options);\n    if (values && typeof values !== \"object\") throw TypeError(\"values must be an object\");\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */ this.valuesById = {};\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */ this.values = Object.create(this.valuesById); // toJSON, marker\n    /**\n     * Enum comment text.\n     * @type {string|null}\n     */ this.comment = comment;\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */ this.comments = comments || {};\n    /**\n     * Values options, if any\n     * @type {Object<string, Object<string, *>>|undefined}\n     */ this.valuesOptions = valuesOptions;\n    /**\n     * Resolved values features, if any\n     * @type {Object<string, Object<string, *>>|undefined}\n     */ this._valuesFeatures = {};\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */ this.reserved = undefined; // toJSON\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n    if (values) {\n        for(var keys = Object.keys(values), i = 0; i < keys.length; ++i)if (typeof values[keys[i]] === \"number\") this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];\n    }\n}\n/**\n * @override\n */ Enum.prototype._resolveFeatures = function _resolveFeatures(edition) {\n    edition = this._edition || edition;\n    ReflectionObject.prototype._resolveFeatures.call(this, edition);\n    Object.keys(this.values).forEach((key)=>{\n        var parentFeaturesCopy = Object.assign({}, this._features);\n        this._valuesFeatures[key] = Object.assign(parentFeaturesCopy, this.valuesOptions && this.valuesOptions[key] && this.valuesOptions[key].features);\n    });\n    return this;\n};\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */ /**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */ Enum.fromJSON = function fromJSON(name, json) {\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n    enm.reserved = json.reserved;\n    if (json.edition) enm._edition = json.edition;\n    enm._defaultEdition = \"proto3\"; // For backwards-compatibility.\n    return enm;\n};\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */ Enum.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"edition\",\n        this._editionToJSON(),\n        \"options\",\n        this.options,\n        \"valuesOptions\",\n        this.valuesOptions,\n        \"values\",\n        this.values,\n        \"reserved\",\n        this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"comment\",\n        keepComments ? this.comment : undefined,\n        \"comments\",\n        keepComments ? this.comments : undefined\n    ]);\n};\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @param {Object.<string, *>|undefined} [options] Options, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */ Enum.prototype.add = function add(name, id, comment, options) {\n    // utilized by the parser but not by .fromJSON\n    if (!util.isString(name)) throw TypeError(\"name must be a string\");\n    if (!util.isInteger(id)) throw TypeError(\"id must be an integer\");\n    if (this.values[name] !== undefined) throw Error(\"duplicate name '\" + name + \"' in \" + this);\n    if (this.isReservedId(id)) throw Error(\"id \" + id + \" is reserved in \" + this);\n    if (this.isReservedName(name)) throw Error(\"name '\" + name + \"' is reserved in \" + this);\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias)) throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else this.valuesById[this.values[name] = id] = name;\n    if (options) {\n        if (this.valuesOptions === undefined) this.valuesOptions = {};\n        this.valuesOptions[name] = options || null;\n    }\n    this.comments[name] = comment || null;\n    return this;\n};\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */ Enum.prototype.remove = function remove(name) {\n    if (!util.isString(name)) throw TypeError(\"name must be a string\");\n    var val = this.values[name];\n    if (val == null) throw Error(\"name '\" + name + \"' does not exist in \" + this);\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n    if (this.valuesOptions) delete this.valuesOptions[name];\n    return this;\n};\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Enum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Enum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/field.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/field.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Field;\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/object.js\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\"), types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/types.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\nvar Type; // cyclic\nvar ruleRe = /^required|optional|repeated$/;\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */ /**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */ Field.fromJSON = function fromJSON(name, json) {\n    var field = new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n    if (json.edition) field._edition = json.edition;\n    field._defaultEdition = \"proto3\"; // For backwards-compatibility.\n    return field;\n};\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */ function Field(name, id, type, rule, extend, options, comment) {\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n    if (!util.isInteger(id) || id < 0) throw TypeError(\"id must be a non-negative integer\");\n    if (!util.isString(type)) throw TypeError(\"type must be a string\");\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError(\"rule must be a string rule\");\n    if (extend !== undefined && !util.isString(extend)) throw TypeError(\"extend must be a string\");\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */ if (rule === \"proto3_optional\") {\n        rule = \"optional\";\n    }\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n    /**\n     * Field type.\n     * @type {string}\n     */ this.type = type; // toJSON\n    /**\n     * Unique field id.\n     * @type {number}\n     */ this.id = id; // toJSON, marker\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */ this.extend = extend || undefined; // toJSON\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */ this.repeated = rule === \"repeated\";\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */ this.map = false;\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */ this.message = null;\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */ this.partOf = null;\n    /**\n     * The field type's default value.\n     * @type {*}\n     */ this.typeDefault = null;\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */ this.defaultValue = null;\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */ this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */ this.bytes = type === \"bytes\";\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */ this.resolvedType = null;\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */ this.extensionField = null;\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */ this.declaringField = null;\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */ this.comment = comment;\n}\n/**\n * Determines whether this field is required.\n * @name Field#required\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(Field.prototype, \"required\", {\n    get: function() {\n        return this._features.field_presence === \"LEGACY_REQUIRED\";\n    }\n});\n/**\n * Determines whether this field is not required.\n * @name Field#optional\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(Field.prototype, \"optional\", {\n    get: function() {\n        return !this.required;\n    }\n});\n/**\n * Determines whether this field uses tag-delimited encoding.  In proto2 this\n * corresponded to group syntax.\n * @name Field#delimited\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(Field.prototype, \"delimited\", {\n    get: function() {\n        return this.resolvedType instanceof Type && this._features.message_encoding === \"DELIMITED\";\n    }\n});\n/**\n * Determines whether this field is packed. Only relevant when repeated.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        return this._features.repeated_field_encoding === \"PACKED\";\n    }\n});\n/**\n * Determines whether this field tracks presence.\n * @name Field#hasPresence\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(Field.prototype, \"hasPresence\", {\n    get: function() {\n        if (this.repeated || this.map) {\n            return false;\n        }\n        return this.partOf || // oneofs\n        this.declaringField || this.extensionField || // extensions\n        this._features.field_presence !== \"IMPLICIT\";\n    }\n});\n/**\n * @override\n */ Field.prototype.setOption = function setOption(name, value, ifNotSet) {\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */ /**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */ /**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */ Field.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"edition\",\n        this._editionToJSON(),\n        \"rule\",\n        this.rule !== \"optional\" && this.rule || undefined,\n        \"type\",\n        this.type,\n        \"id\",\n        this.id,\n        \"extend\",\n        this.extend,\n        \"options\",\n        this.options,\n        \"comment\",\n        keepComments ? this.comment : undefined\n    ]);\n};\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */ Field.prototype.resolve = function resolve() {\n    if (this.resolved) return this;\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) {\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type) this.typeDefault = null;\n        else this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    } else if (this.options && this.options.proto3_optional) {\n        // proto3 scalar value marked optional; should default to null\n        this.typeDefault = null;\n    }\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\") this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;\n        if (!Object.keys(this.options).length) this.options = undefined;\n    }\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n        /* istanbul ignore else */ if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n    // take special care of maps and repeated fields\n    if (this.map) this.defaultValue = util.emptyObject;\n    else if (this.repeated) this.defaultValue = util.emptyArray;\n    else this.defaultValue = this.typeDefault;\n    // ensure proper value on prototype\n    if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;\n    return ReflectionObject.prototype.resolve.call(this);\n};\n/**\n * Infers field features from legacy syntax that may have been specified differently.\n * in older editions.\n * @param {string|undefined} edition The edition this proto is on, or undefined if pre-editions\n * @returns {object} The feature values to override\n */ Field.prototype._inferLegacyProtoFeatures = function _inferLegacyProtoFeatures(edition) {\n    if (edition !== \"proto2\" && edition !== \"proto3\") {\n        return {};\n    }\n    var features = {};\n    if (this.rule === \"required\") {\n        features.field_presence = \"LEGACY_REQUIRED\";\n    }\n    if (this.parent && types.defaults[this.type] === undefined) {\n        // We can't use resolvedType because types may not have been resolved yet.  However,\n        // legacy groups are always in the same scope as the field so we don't have to do a\n        // full scan of the tree.\n        var type = this.parent.get(this.type.split(\".\").pop());\n        if (type && type instanceof Type && type.group) {\n            features.message_encoding = \"DELIMITED\";\n        }\n    }\n    if (this.getOption(\"packed\") === true) {\n        features.repeated_field_encoding = \"PACKED\";\n    } else if (this.getOption(\"packed\") === false) {\n        features.repeated_field_encoding = \"EXPANDED\";\n    }\n    return features;\n};\n/**\n * @override\n */ Field.prototype._resolveFeatures = function _resolveFeatures(edition) {\n    return ReflectionObject.prototype._resolveFeatures.call(this, this._edition || edition);\n};\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */ /**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */ Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\") fieldType = util.decorateType(fieldType).name;\n    else if (fieldType && typeof fieldType === \"object\") fieldType = util.decorateEnum(fieldType).name;\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {\n            \"default\": defaultValue\n        }));\n    };\n};\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */ // like Field.d but without a default value\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/field.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index-light.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index-light.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar protobuf = module.exports = __webpack_require__(/*! ./index-minimal */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index-minimal.js\");\nprotobuf.build = \"light\";\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */ /**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */ function load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root) root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */ // function load(filename:string, callback:LoadCallback):undefined\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */ // function load(filename:string, [root:Root]):Promise<Root>\nprotobuf.load = load;\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */ function loadSync(filename, root) {\n    if (!root) root = new protobuf.Root();\n    return root.loadSync(filename);\n}\nprotobuf.loadSync = loadSync;\n// Serialization\nprotobuf.encoder = __webpack_require__(/*! ./encoder */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/encoder.js\");\nprotobuf.decoder = __webpack_require__(/*! ./decoder */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/decoder.js\");\nprotobuf.verifier = __webpack_require__(/*! ./verifier */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/verifier.js\");\nprotobuf.converter = __webpack_require__(/*! ./converter */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/converter.js\");\n// Reflection\nprotobuf.ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/object.js\");\nprotobuf.Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/namespace.js\");\nprotobuf.Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/root.js\");\nprotobuf.Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\");\nprotobuf.Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/type.js\");\nprotobuf.Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/field.js\");\nprotobuf.OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/oneof.js\");\nprotobuf.MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/mapfield.js\");\nprotobuf.Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/service.js\");\nprotobuf.Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/method.js\");\n// Runtime\nprotobuf.Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/message.js\");\nprotobuf.wrappers = __webpack_require__(/*! ./wrappers */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/wrappers.js\");\n// Utility\nprotobuf.types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/types.js\");\nprotobuf.util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbGlnaHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxXQUFXQyw4SUFBMkM7QUFFMURELFNBQVNJLEtBQUssR0FBRztBQUVqQjs7Ozs7OztDQU9DLEdBRUQ7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNDLEtBQUtDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ2xDLElBQUksT0FBT0QsU0FBUyxZQUFZO1FBQzVCQyxXQUFXRDtRQUNYQSxPQUFPLElBQUlQLFNBQVNTLElBQUk7SUFDNUIsT0FBTyxJQUFJLENBQUNGLE1BQ1JBLE9BQU8sSUFBSVAsU0FBU1MsSUFBSTtJQUM1QixPQUFPRixLQUFLRixJQUFJLENBQUNDLFVBQVVFO0FBQy9CO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ0Qsa0VBQWtFO0FBRWxFOzs7Ozs7Ozs7Q0FTQyxHQUNELDREQUE0RDtBQUU1RFIsU0FBU0ssSUFBSSxHQUFHQTtBQUVoQjs7Ozs7OztDQU9DLEdBQ0QsU0FBU0ssU0FBU0osUUFBUSxFQUFFQyxJQUFJO0lBQzVCLElBQUksQ0FBQ0EsTUFDREEsT0FBTyxJQUFJUCxTQUFTUyxJQUFJO0lBQzVCLE9BQU9GLEtBQUtHLFFBQVEsQ0FBQ0o7QUFDekI7QUFFQU4sU0FBU1UsUUFBUSxHQUFHQTtBQUVwQixnQkFBZ0I7QUFDaEJWLFNBQVNXLE9BQU8sR0FBWVIsbUJBQU9BLENBQUMsNEZBQVc7QUFDL0NILFNBQVNZLE9BQU8sR0FBWVQsbUJBQU9BLENBQUMsNEZBQVc7QUFDL0NILFNBQVNhLFFBQVEsR0FBV1YsbUJBQU9BLENBQUMsOEZBQVk7QUFDaERILFNBQVNjLFNBQVMsR0FBVVgsbUJBQU9BLENBQUMsZ0dBQWE7QUFFakQsYUFBYTtBQUNiSCxTQUFTZSxnQkFBZ0IsR0FBR1osbUJBQU9BLENBQUMsMEZBQVU7QUFDOUNILFNBQVNnQixTQUFTLEdBQVViLG1CQUFPQSxDQUFDLGdHQUFhO0FBQ2pESCxTQUFTUyxJQUFJLEdBQWVOLG1CQUFPQSxDQUFDLHNGQUFRO0FBQzVDSCxTQUFTaUIsSUFBSSxHQUFlZCxtQkFBT0EsQ0FBQyxzRkFBUTtBQUM1Q0gsU0FBU2tCLElBQUksR0FBZWYsbUJBQU9BLENBQUMsc0ZBQVE7QUFDNUNILFNBQVNtQixLQUFLLEdBQWNoQixtQkFBT0EsQ0FBQyx3RkFBUztBQUM3Q0gsU0FBU29CLEtBQUssR0FBY2pCLG1CQUFPQSxDQUFDLHdGQUFTO0FBQzdDSCxTQUFTcUIsUUFBUSxHQUFXbEIsbUJBQU9BLENBQUMsOEZBQVk7QUFDaERILFNBQVNzQixPQUFPLEdBQVluQixtQkFBT0EsQ0FBQyw0RkFBVztBQUMvQ0gsU0FBU3VCLE1BQU0sR0FBYXBCLG1CQUFPQSxDQUFDLDBGQUFVO0FBRTlDLFVBQVU7QUFDVkgsU0FBU3dCLE9BQU8sR0FBWXJCLG1CQUFPQSxDQUFDLDRGQUFXO0FBQy9DSCxTQUFTeUIsUUFBUSxHQUFXdEIsbUJBQU9BLENBQUMsOEZBQVk7QUFFaEQsVUFBVTtBQUNWSCxTQUFTMEIsS0FBSyxHQUFjdkIsbUJBQU9BLENBQUMsd0ZBQVM7QUFDN0NILFNBQVMyQixJQUFJLEdBQWV4QixtQkFBT0EsQ0FBQyxzRkFBUTtBQUU1QyxpREFBaUQ7QUFDakRILFNBQVNlLGdCQUFnQixDQUFDYSxVQUFVLENBQUM1QixTQUFTUyxJQUFJO0FBQ2xEVCxTQUFTZ0IsU0FBUyxDQUFDWSxVQUFVLENBQUM1QixTQUFTa0IsSUFBSSxFQUFFbEIsU0FBU3NCLE9BQU8sRUFBRXRCLFNBQVNpQixJQUFJO0FBQzVFakIsU0FBU1MsSUFBSSxDQUFDbUIsVUFBVSxDQUFDNUIsU0FBU2tCLElBQUk7QUFDdENsQixTQUFTbUIsS0FBSyxDQUFDUyxVQUFVLENBQUM1QixTQUFTa0IsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2luZGV4LWxpZ2h0LmpzPzhiZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcHJvdG9idWYgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2luZGV4LW1pbmltYWxcIik7XG5cbnByb3RvYnVmLmJ1aWxkID0gXCJsaWdodFwiO1xuXG4vKipcbiAqIEEgbm9kZS1zdHlsZSBjYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayBsb2FkfSBhbmQge0BsaW5rIFJvb3QjbG9hZH0uXG4gKiBAdHlwZWRlZiBMb2FkQ2FsbGJhY2tcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgRXJyb3IsIGlmIGFueSwgb3RoZXJ3aXNlIGBudWxsYFxuICogQHBhcmFtIHtSb290fSBbcm9vdF0gUm9vdCwgaWYgdGhlcmUgaGFzbid0IGJlZW4gYW4gZXJyb3JcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuLyoqXG4gKiBMb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIGEgY29tbW9uIHJvb3QgbmFtZXNwYWNlIGFuZCBjYWxscyB0aGUgY2FsbGJhY2suXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgT25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcbiAqIEBwYXJhbSB7Um9vdH0gcm9vdCBSb290IG5hbWVzcGFjZSwgZGVmYXVsdHMgdG8gY3JlYXRlIGEgbmV3IG9uZSBpZiBvbWl0dGVkLlxuICogQHBhcmFtIHtMb2FkQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQHNlZSB7QGxpbmsgUm9vdCNsb2FkfVxuICovXG5mdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCByb290LCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygcm9vdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gcm9vdDtcbiAgICAgICAgcm9vdCA9IG5ldyBwcm90b2J1Zi5Sb290KCk7XG4gICAgfSBlbHNlIGlmICghcm9vdClcbiAgICAgICAgcm9vdCA9IG5ldyBwcm90b2J1Zi5Sb290KCk7XG4gICAgcmV0dXJuIHJvb3QubG9hZChmaWxlbmFtZSwgY2FsbGJhY2spO1xufVxuXG4vKipcbiAqIExvYWRzIG9uZSBvciBtdWx0aXBsZSAucHJvdG8gb3IgcHJlcHJvY2Vzc2VkIC5qc29uIGZpbGVzIGludG8gYSBjb21tb24gcm9vdCBuYW1lc3BhY2UgYW5kIGNhbGxzIHRoZSBjYWxsYmFjay5cbiAqIEBuYW1lIGxvYWRcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXG4gKiBAcGFyYW0ge0xvYWRDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAc2VlIHtAbGluayBSb290I2xvYWR9XG4gKiBAdmFyaWF0aW9uIDJcbiAqL1xuLy8gZnVuY3Rpb24gbG9hZChmaWxlbmFtZTpzdHJpbmcsIGNhbGxiYWNrOkxvYWRDYWxsYmFjayk6dW5kZWZpbmVkXG5cbi8qKlxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byBhIGNvbW1vbiByb290IG5hbWVzcGFjZSBhbmQgcmV0dXJucyBhIHByb21pc2UuXG4gKiBAbmFtZSBsb2FkXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBmaWxlbmFtZSBPbmUgb3IgbXVsdGlwbGUgZmlsZXMgdG8gbG9hZFxuICogQHBhcmFtIHtSb290fSBbcm9vdF0gUm9vdCBuYW1lc3BhY2UsIGRlZmF1bHRzIHRvIGNyZWF0ZSBhIG5ldyBvbmUgaWYgb21pdHRlZC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPFJvb3Q+fSBQcm9taXNlXG4gKiBAc2VlIHtAbGluayBSb290I2xvYWR9XG4gKiBAdmFyaWF0aW9uIDNcbiAqL1xuLy8gZnVuY3Rpb24gbG9hZChmaWxlbmFtZTpzdHJpbmcsIFtyb290OlJvb3RdKTpQcm9taXNlPFJvb3Q+XG5cbnByb3RvYnVmLmxvYWQgPSBsb2FkO1xuXG4vKipcbiAqIFN5bmNocm9ub3VzbHkgbG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byBhIGNvbW1vbiByb290IG5hbWVzcGFjZSAobm9kZSBvbmx5KS5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBmaWxlbmFtZSBPbmUgb3IgbXVsdGlwbGUgZmlsZXMgdG8gbG9hZFxuICogQHBhcmFtIHtSb290fSBbcm9vdF0gUm9vdCBuYW1lc3BhY2UsIGRlZmF1bHRzIHRvIGNyZWF0ZSBhIG5ldyBvbmUgaWYgb21pdHRlZC5cbiAqIEByZXR1cm5zIHtSb290fSBSb290IG5hbWVzcGFjZVxuICogQHRocm93cyB7RXJyb3J9IElmIHN5bmNocm9ub3VzIGZldGNoaW5nIGlzIG5vdCBzdXBwb3J0ZWQgKGkuZS4gaW4gYnJvd3NlcnMpIG9yIGlmIGEgZmlsZSdzIHN5bnRheCBpcyBpbnZhbGlkXG4gKiBAc2VlIHtAbGluayBSb290I2xvYWRTeW5jfVxuICovXG5mdW5jdGlvbiBsb2FkU3luYyhmaWxlbmFtZSwgcm9vdCkge1xuICAgIGlmICghcm9vdClcbiAgICAgICAgcm9vdCA9IG5ldyBwcm90b2J1Zi5Sb290KCk7XG4gICAgcmV0dXJuIHJvb3QubG9hZFN5bmMoZmlsZW5hbWUpO1xufVxuXG5wcm90b2J1Zi5sb2FkU3luYyA9IGxvYWRTeW5jO1xuXG4vLyBTZXJpYWxpemF0aW9uXG5wcm90b2J1Zi5lbmNvZGVyICAgICAgICAgID0gcmVxdWlyZShcIi4vZW5jb2RlclwiKTtcbnByb3RvYnVmLmRlY29kZXIgICAgICAgICAgPSByZXF1aXJlKFwiLi9kZWNvZGVyXCIpO1xucHJvdG9idWYudmVyaWZpZXIgICAgICAgICA9IHJlcXVpcmUoXCIuL3ZlcmlmaWVyXCIpO1xucHJvdG9idWYuY29udmVydGVyICAgICAgICA9IHJlcXVpcmUoXCIuL2NvbnZlcnRlclwiKTtcblxuLy8gUmVmbGVjdGlvblxucHJvdG9idWYuUmVmbGVjdGlvbk9iamVjdCA9IHJlcXVpcmUoXCIuL29iamVjdFwiKTtcbnByb3RvYnVmLk5hbWVzcGFjZSAgICAgICAgPSByZXF1aXJlKFwiLi9uYW1lc3BhY2VcIik7XG5wcm90b2J1Zi5Sb290ICAgICAgICAgICAgID0gcmVxdWlyZShcIi4vcm9vdFwiKTtcbnByb3RvYnVmLkVudW0gICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9lbnVtXCIpO1xucHJvdG9idWYuVHlwZSAgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3R5cGVcIik7XG5wcm90b2J1Zi5GaWVsZCAgICAgICAgICAgID0gcmVxdWlyZShcIi4vZmllbGRcIik7XG5wcm90b2J1Zi5PbmVPZiAgICAgICAgICAgID0gcmVxdWlyZShcIi4vb25lb2ZcIik7XG5wcm90b2J1Zi5NYXBGaWVsZCAgICAgICAgID0gcmVxdWlyZShcIi4vbWFwZmllbGRcIik7XG5wcm90b2J1Zi5TZXJ2aWNlICAgICAgICAgID0gcmVxdWlyZShcIi4vc2VydmljZVwiKTtcbnByb3RvYnVmLk1ldGhvZCAgICAgICAgICAgPSByZXF1aXJlKFwiLi9tZXRob2RcIik7XG5cbi8vIFJ1bnRpbWVcbnByb3RvYnVmLk1lc3NhZ2UgICAgICAgICAgPSByZXF1aXJlKFwiLi9tZXNzYWdlXCIpO1xucHJvdG9idWYud3JhcHBlcnMgICAgICAgICA9IHJlcXVpcmUoXCIuL3dyYXBwZXJzXCIpO1xuXG4vLyBVdGlsaXR5XG5wcm90b2J1Zi50eXBlcyAgICAgICAgICAgID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5wcm90b2J1Zi51dGlsICAgICAgICAgICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuLy8gU2V0IHVwIHBvc3NpYmx5IGN5Y2xpYyByZWZsZWN0aW9uIGRlcGVuZGVuY2llc1xucHJvdG9idWYuUmVmbGVjdGlvbk9iamVjdC5fY29uZmlndXJlKHByb3RvYnVmLlJvb3QpO1xucHJvdG9idWYuTmFtZXNwYWNlLl9jb25maWd1cmUocHJvdG9idWYuVHlwZSwgcHJvdG9idWYuU2VydmljZSwgcHJvdG9idWYuRW51bSk7XG5wcm90b2J1Zi5Sb290Ll9jb25maWd1cmUocHJvdG9idWYuVHlwZSk7XG5wcm90b2J1Zi5GaWVsZC5fY29uZmlndXJlKHByb3RvYnVmLlR5cGUpO1xuIl0sIm5hbWVzIjpbInByb3RvYnVmIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJidWlsZCIsImxvYWQiLCJmaWxlbmFtZSIsInJvb3QiLCJjYWxsYmFjayIsIlJvb3QiLCJsb2FkU3luYyIsImVuY29kZXIiLCJkZWNvZGVyIiwidmVyaWZpZXIiLCJjb252ZXJ0ZXIiLCJSZWZsZWN0aW9uT2JqZWN0IiwiTmFtZXNwYWNlIiwiRW51bSIsIlR5cGUiLCJGaWVsZCIsIk9uZU9mIiwiTWFwRmllbGQiLCJTZXJ2aWNlIiwiTWV0aG9kIiwiTWVzc2FnZSIsIndyYXBwZXJzIiwidHlwZXMiLCJ1dGlsIiwiX2NvbmZpZ3VyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index-light.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index-minimal.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index-minimal.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar protobuf = exports;\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */ protobuf.build = \"minimal\";\n// Serialization\nprotobuf.Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/reader_buffer.js\");\n// Utility\nprotobuf.util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots = __webpack_require__(/*! ./roots */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/roots.js\");\nprotobuf.configure = configure;\n/* istanbul ignore next */ /**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */ function configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n// Set up buffer utility according to the environment\nconfigure();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbWluaW1hbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFdBQVdDO0FBRWY7Ozs7O0NBS0MsR0FDREQsU0FBU0UsS0FBSyxHQUFHO0FBRWpCLGdCQUFnQjtBQUNoQkYsU0FBU0csTUFBTSxHQUFTQyxtQkFBT0EsQ0FBQywwRkFBVTtBQUMxQ0osU0FBU0ssWUFBWSxHQUFHRCxtQkFBT0EsQ0FBQyx3R0FBaUI7QUFDakRKLFNBQVNNLE1BQU0sR0FBU0YsbUJBQU9BLENBQUMsMEZBQVU7QUFDMUNKLFNBQVNPLFlBQVksR0FBR0gsbUJBQU9BLENBQUMsd0dBQWlCO0FBRWpELFVBQVU7QUFDVkosU0FBU1EsSUFBSSxHQUFXSixtQkFBT0EsQ0FBQyxzR0FBZ0I7QUFDaERKLFNBQVNTLEdBQUcsR0FBWUwsbUJBQU9BLENBQUMsb0ZBQU87QUFDdkNKLFNBQVNVLEtBQUssR0FBVU4sbUJBQU9BLENBQUMsd0ZBQVM7QUFDekNKLFNBQVNXLFNBQVMsR0FBTUE7QUFFeEIsd0JBQXdCLEdBQ3hCOzs7Q0FHQyxHQUNELFNBQVNBO0lBQ0xYLFNBQVNRLElBQUksQ0FBQ0ksVUFBVTtJQUN4QlosU0FBU0csTUFBTSxDQUFDUyxVQUFVLENBQUNaLFNBQVNLLFlBQVk7SUFDaERMLFNBQVNNLE1BQU0sQ0FBQ00sVUFBVSxDQUFDWixTQUFTTyxZQUFZO0FBQ3BEO0FBRUEscURBQXFEO0FBQ3JESSIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2luZGV4LW1pbmltYWwuanM/ZWNjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBwcm90b2J1ZiA9IGV4cG9ydHM7XG5cbi8qKlxuICogQnVpbGQgdHlwZSwgb25lIG9mIGBcImZ1bGxcImAsIGBcImxpZ2h0XCJgIG9yIGBcIm1pbmltYWxcImAuXG4gKiBAbmFtZSBidWlsZFxuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdFxuICovXG5wcm90b2J1Zi5idWlsZCA9IFwibWluaW1hbFwiO1xuXG4vLyBTZXJpYWxpemF0aW9uXG5wcm90b2J1Zi5Xcml0ZXIgICAgICAgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XG5wcm90b2J1Zi5CdWZmZXJXcml0ZXIgPSByZXF1aXJlKFwiLi93cml0ZXJfYnVmZmVyXCIpO1xucHJvdG9idWYuUmVhZGVyICAgICAgID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xucHJvdG9idWYuQnVmZmVyUmVhZGVyID0gcmVxdWlyZShcIi4vcmVhZGVyX2J1ZmZlclwiKTtcblxuLy8gVXRpbGl0eVxucHJvdG9idWYudXRpbCAgICAgICAgID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xucHJvdG9idWYucnBjICAgICAgICAgID0gcmVxdWlyZShcIi4vcnBjXCIpO1xucHJvdG9idWYucm9vdHMgICAgICAgID0gcmVxdWlyZShcIi4vcm9vdHNcIik7XG5wcm90b2J1Zi5jb25maWd1cmUgICAgPSBjb25maWd1cmU7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIFJlY29uZmlndXJlcyB0aGUgbGlicmFyeSBhY2NvcmRpbmcgdG8gdGhlIGVudmlyb25tZW50LlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gY29uZmlndXJlKCkge1xuICAgIHByb3RvYnVmLnV0aWwuX2NvbmZpZ3VyZSgpO1xuICAgIHByb3RvYnVmLldyaXRlci5fY29uZmlndXJlKHByb3RvYnVmLkJ1ZmZlcldyaXRlcik7XG4gICAgcHJvdG9idWYuUmVhZGVyLl9jb25maWd1cmUocHJvdG9idWYuQnVmZmVyUmVhZGVyKTtcbn1cblxuLy8gU2V0IHVwIGJ1ZmZlciB1dGlsaXR5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnRcbmNvbmZpZ3VyZSgpO1xuIl0sIm5hbWVzIjpbInByb3RvYnVmIiwiZXhwb3J0cyIsImJ1aWxkIiwiV3JpdGVyIiwicmVxdWlyZSIsIkJ1ZmZlcldyaXRlciIsIlJlYWRlciIsIkJ1ZmZlclJlYWRlciIsInV0aWwiLCJycGMiLCJyb290cyIsImNvbmZpZ3VyZSIsIl9jb25maWd1cmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index-minimal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar protobuf = module.exports = __webpack_require__(/*! ./index-light */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index-light.js\");\nprotobuf.build = \"full\";\n// Parser\nprotobuf.tokenize = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/tokenize.js\");\nprotobuf.parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/parse.js\");\nprotobuf.common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/common.js\");\n// Configure parser\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxXQUFXQywwSUFBeUM7QUFFeERELFNBQVNJLEtBQUssR0FBRztBQUVqQixTQUFTO0FBQ1RKLFNBQVNLLFFBQVEsR0FBV0YsbUJBQU9BLENBQUMsOEZBQVk7QUFDaERILFNBQVNNLEtBQUssR0FBY0gsbUJBQU9BLENBQUMsd0ZBQVM7QUFDN0NILFNBQVNPLE1BQU0sR0FBYUosbUJBQU9BLENBQUMsMEZBQVU7QUFFOUMsbUJBQW1CO0FBQ25CSCxTQUFTUSxJQUFJLENBQUNDLFVBQVUsQ0FBQ1QsU0FBU1UsSUFBSSxFQUFFVixTQUFTTSxLQUFLLEVBQUVOLFNBQVNPLE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZmMtbmV4dGpzLXNoYWRjbi8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9pbmRleC5qcz9hYTY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIHByb3RvYnVmID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9pbmRleC1saWdodFwiKTtcblxucHJvdG9idWYuYnVpbGQgPSBcImZ1bGxcIjtcblxuLy8gUGFyc2VyXG5wcm90b2J1Zi50b2tlbml6ZSAgICAgICAgID0gcmVxdWlyZShcIi4vdG9rZW5pemVcIik7XG5wcm90b2J1Zi5wYXJzZSAgICAgICAgICAgID0gcmVxdWlyZShcIi4vcGFyc2VcIik7XG5wcm90b2J1Zi5jb21tb24gICAgICAgICAgID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuXG4vLyBDb25maWd1cmUgcGFyc2VyXG5wcm90b2J1Zi5Sb290Ll9jb25maWd1cmUocHJvdG9idWYuVHlwZSwgcHJvdG9idWYucGFyc2UsIHByb3RvYnVmLmNvbW1vbik7XG4iXSwibmFtZXMiOlsicHJvdG9idWYiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsImJ1aWxkIiwidG9rZW5pemUiLCJwYXJzZSIsImNvbW1vbiIsIlJvb3QiLCJfY29uZmlndXJlIiwiVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/mapfield.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/mapfield.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = MapField;\n// extends Field\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/field.js\");\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\nvar types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/types.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */ function MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n    /* istanbul ignore if */ if (!util.isString(keyType)) throw TypeError(\"keyType must be a string\");\n    /**\n     * Key type.\n     * @type {string}\n     */ this.keyType = keyType; // toJSON, marker\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */ this.resolvedKeyType = null;\n    // Overrides Field#map\n    this.map = true;\n}\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */ /**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */ /**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */ MapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */ MapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"keyType\",\n        this.keyType,\n        \"type\",\n        this.type,\n        \"id\",\n        this.id,\n        \"extend\",\n        this.extend,\n        \"options\",\n        this.options,\n        \"comment\",\n        keepComments ? this.comment : undefined\n    ]);\n};\n/**\n * @override\n */ MapField.prototype.resolve = function resolve() {\n    if (this.resolved) return this;\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined) throw Error(\"invalid key type: \" + this.keyType);\n    return Field.prototype.resolve.call(this);\n};\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */ MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\") fieldValueType = util.decorateType(fieldValueType).name;\n    else if (fieldValueType && typeof fieldValueType === \"object\") fieldValueType = util.decorateEnum(fieldValueType).name;\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/mapfield.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/message.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/message.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Message;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js\");\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object = object\n */ function Message(properties) {\n    // not used internally\n    if (properties) for(var keys = Object.keys(properties), i = 0; i < keys.length; ++i)this[keys[i]] = properties[keys[i]];\n}\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */ /**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */ /*eslint-disable valid-jsdoc*/ /**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.create = function create(properties) {\n    return this.$type.create(properties);\n};\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.encode = function encode(message, writer) {\n    return this.$type.encode(message, writer);\n};\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.$type.encodeDelimited(message, writer);\n};\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.decode = function decode(reader) {\n    return this.$type.decode(reader);\n};\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.decodeDelimited = function decodeDelimited(reader) {\n    return this.$type.decodeDelimited(reader);\n};\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */ Message.verify = function verify(message) {\n    return this.$type.verify(message);\n};\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.fromObject = function fromObject(object) {\n    return this.$type.fromObject(object);\n};\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */ Message.toObject = function toObject(message, options) {\n    return this.$type.toObject(message, options);\n};\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */ Message.prototype.toJSON = function toJSON() {\n    return this.$type.toObject(this, util.toJSONOptions);\n}; /*eslint-enable valid-jsdoc*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLE9BQU9DLG1CQUFPQSxDQUFDLHNHQUFnQjtBQUVuQzs7Ozs7O0NBTUMsR0FDRCxTQUFTRixRQUFRRyxVQUFVO0lBQ3ZCLHNCQUFzQjtJQUN0QixJQUFJQSxZQUNBLElBQUssSUFBSUMsT0FBT0MsT0FBT0QsSUFBSSxDQUFDRCxhQUFhRyxJQUFJLEdBQUdBLElBQUlGLEtBQUtHLE1BQU0sRUFBRSxFQUFFRCxFQUMvRCxJQUFJLENBQUNGLElBQUksQ0FBQ0UsRUFBRSxDQUFDLEdBQUdILFVBQVUsQ0FBQ0MsSUFBSSxDQUFDRSxFQUFFLENBQUM7QUFDL0M7QUFFQTs7Ozs7Q0FLQyxHQUVEOzs7OztDQUtDLEdBRUQsNEJBQTRCLEdBRTVCOzs7Ozs7Q0FNQyxHQUNETixRQUFRUSxNQUFNLEdBQUcsU0FBU0EsT0FBT0wsVUFBVTtJQUN2QyxPQUFPLElBQUksQ0FBQ00sS0FBSyxDQUFDRCxNQUFNLENBQUNMO0FBQzdCO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNESCxRQUFRVSxNQUFNLEdBQUcsU0FBU0EsT0FBT0MsT0FBTyxFQUFFQyxNQUFNO0lBQzVDLE9BQU8sSUFBSSxDQUFDSCxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsU0FBU0M7QUFDdEM7QUFFQTs7Ozs7OztDQU9DLEdBQ0RaLFFBQVFhLGVBQWUsR0FBRyxTQUFTQSxnQkFBZ0JGLE9BQU8sRUFBRUMsTUFBTTtJQUM5RCxPQUFPLElBQUksQ0FBQ0gsS0FBSyxDQUFDSSxlQUFlLENBQUNGLFNBQVNDO0FBQy9DO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDRFosUUFBUWMsTUFBTSxHQUFHLFNBQVNBLE9BQU9DLE1BQU07SUFDbkMsT0FBTyxJQUFJLENBQUNOLEtBQUssQ0FBQ0ssTUFBTSxDQUFDQztBQUM3QjtBQUVBOzs7Ozs7OztDQVFDLEdBQ0RmLFFBQVFnQixlQUFlLEdBQUcsU0FBU0EsZ0JBQWdCRCxNQUFNO0lBQ3JELE9BQU8sSUFBSSxDQUFDTixLQUFLLENBQUNPLGVBQWUsQ0FBQ0Q7QUFDdEM7QUFFQTs7Ozs7O0NBTUMsR0FDRGYsUUFBUWlCLE1BQU0sR0FBRyxTQUFTQSxPQUFPTixPQUFPO0lBQ3BDLE9BQU8sSUFBSSxDQUFDRixLQUFLLENBQUNRLE1BQU0sQ0FBQ047QUFDN0I7QUFFQTs7Ozs7O0NBTUMsR0FDRFgsUUFBUWtCLFVBQVUsR0FBRyxTQUFTQSxXQUFXQyxNQUFNO0lBQzNDLE9BQU8sSUFBSSxDQUFDVixLQUFLLENBQUNTLFVBQVUsQ0FBQ0M7QUFDakM7QUFFQTs7Ozs7OztDQU9DLEdBQ0RuQixRQUFRb0IsUUFBUSxHQUFHLFNBQVNBLFNBQVNULE9BQU8sRUFBRVUsT0FBTztJQUNqRCxPQUFPLElBQUksQ0FBQ1osS0FBSyxDQUFDVyxRQUFRLENBQUNULFNBQVNVO0FBQ3hDO0FBRUE7OztDQUdDLEdBQ0RyQixRQUFRc0IsU0FBUyxDQUFDQyxNQUFNLEdBQUcsU0FBU0E7SUFDaEMsT0FBTyxJQUFJLENBQUNkLEtBQUssQ0FBQ1csUUFBUSxDQUFDLElBQUksRUFBRW5CLEtBQUt1QixhQUFhO0FBQ3ZELEdBRUEsMkJBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZjLW5leHRqcy1zaGFkY24vLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbWVzc2FnZS5qcz8zMTIyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc3NhZ2UgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIEFic3RyYWN0IHJ1bnRpbWUgbWVzc2FnZS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtQcm9wZXJ0aWVzPFQ+fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgb2JqZWN0ID0gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIE1lc3NhZ2UocHJvcGVydGllcykge1xuICAgIC8vIG5vdCB1c2VkIGludGVybmFsbHlcbiAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbn1cblxuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIHJlZmxlY3RlZCB0eXBlLlxuICogQG5hbWUgTWVzc2FnZS4kdHlwZVxuICogQHR5cGUge1R5cGV9XG4gKiBAcmVhZG9ubHlcbiAqL1xuXG4vKipcbiAqIFJlZmVyZW5jZSB0byB0aGUgcmVmbGVjdGVkIHR5cGUuXG4gKiBAbmFtZSBNZXNzYWdlIyR0eXBlXG4gKiBAdHlwZSB7VHlwZX1cbiAqIEByZWFkb25seVxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWVzc2FnZSBvZiB0aGlzIHR5cGUgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gKiBAcmV0dXJucyB7TWVzc2FnZTxUPn0gTWVzc2FnZSBpbnN0YW5jZVxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuY3JlYXRlKHByb3BlcnRpZXMpO1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUuXG4gKiBAcGFyYW0ge1R8T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgTWVzc2FnZSB0byBlbmNvZGVcbiAqIEBwYXJhbSB7V3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gdXNlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBXcml0ZXJcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cbiAqL1xuTWVzc2FnZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcik7XG59O1xuXG4vKipcbiAqIEVuY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZSBwcmVjZWVkZWQgYnkgaXRzIGxlbmd0aCBhcyBhIHZhcmludC5cbiAqIEBwYXJhbSB7VHxPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBNZXNzYWdlIHRvIGVuY29kZVxuICogQHBhcmFtIHtXcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byB1c2VcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IFdyaXRlclxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICByZXR1cm4gdGhpcy4kdHlwZS5lbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKTtcbn07XG5cbi8qKlxuICogRGVjb2RlcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLlxuICogQG5hbWUgTWVzc2FnZS5kZWNvZGVcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtSZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlXG4gKiBAcmV0dXJucyB7VH0gRGVjb2RlZCBtZXNzYWdlXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEB0aGlzIENvbnN0cnVjdG9yPFQ+XG4gKi9cbk1lc3NhZ2UuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlcikge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLmRlY29kZShyZWFkZXIpO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAbmFtZSBNZXNzYWdlLmRlY29kZURlbGltaXRlZFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1JlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGVcbiAqIEByZXR1cm5zIHtUfSBEZWNvZGVkIG1lc3NhZ2VcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cbiAqL1xuTWVzc2FnZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZGVjb2RlRGVsaW1pdGVkKHJlYWRlcik7XG59O1xuXG4vKipcbiAqIFZlcmlmaWVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUuXG4gKiBAbmFtZSBNZXNzYWdlLnZlcmlmeVxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gKi9cbk1lc3NhZ2UudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy4kdHlwZS52ZXJpZnkobWVzc2FnZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWVzc2FnZSBvZiB0aGlzIHR5cGUgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG9iamVjdCBQbGFpbiBvYmplY3RcbiAqIEByZXR1cm5zIHtUfSBNZXNzYWdlIGluc3RhbmNlXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cbiAqIEB0aGlzIENvbnN0cnVjdG9yPFQ+XG4gKi9cbk1lc3NhZ2UuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3Qob2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZnJvbU9iamVjdChvYmplY3QpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBtZXNzYWdlIG9mIHRoaXMgdHlwZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICogQHBhcmFtIHtUfSBtZXNzYWdlIE1lc3NhZ2UgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxuICovXG5NZXNzYWdlLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLnRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIG1lc3NhZ2UgdG8gSlNPTi5cbiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAqL1xuTWVzc2FnZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLiR0eXBlLnRvT2JqZWN0KHRoaXMsIHV0aWwudG9KU09OT3B0aW9ucyk7XG59O1xuXG4vKmVzbGludC1lbmFibGUgdmFsaWQtanNkb2MqLyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiTWVzc2FnZSIsInV0aWwiLCJyZXF1aXJlIiwicHJvcGVydGllcyIsImtleXMiLCJPYmplY3QiLCJpIiwibGVuZ3RoIiwiY3JlYXRlIiwiJHR5cGUiLCJlbmNvZGUiLCJtZXNzYWdlIiwid3JpdGVyIiwiZW5jb2RlRGVsaW1pdGVkIiwiZGVjb2RlIiwicmVhZGVyIiwiZGVjb2RlRGVsaW1pdGVkIiwidmVyaWZ5IiwiZnJvbU9iamVjdCIsIm9iamVjdCIsInRvT2JqZWN0Iiwib3B0aW9ucyIsInByb3RvdHlwZSIsInRvSlNPTiIsInRvSlNPTk9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/method.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/method.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Method;\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/object.js\");\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */ function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n    /* istanbul ignore next */ if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n    /* istanbul ignore if */ if (!(type === undefined || util.isString(type))) throw TypeError(\"type must be a string\");\n    /* istanbul ignore if */ if (!util.isString(requestType)) throw TypeError(\"requestType must be a string\");\n    /* istanbul ignore if */ if (!util.isString(responseType)) throw TypeError(\"responseType must be a string\");\n    ReflectionObject.call(this, name, options);\n    /**\n     * Method type.\n     * @type {string}\n     */ this.type = type || \"rpc\"; // toJSON\n    /**\n     * Request type.\n     * @type {string}\n     */ this.requestType = requestType; // toJSON, marker\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */ this.requestStream = requestStream ? true : undefined; // toJSON\n    /**\n     * Response type.\n     * @type {string}\n     */ this.responseType = responseType; // toJSON\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */ this.responseStream = responseStream ? true : undefined; // toJSON\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */ this.resolvedRequestType = null;\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */ this.resolvedResponseType = null;\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */ this.comment = comment;\n    /**\n     * Options properly parsed into an object\n     */ this.parsedOptions = parsedOptions;\n}\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */ /**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */ Method.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */ Method.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\",\n        this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\",\n        this.requestType,\n        \"requestStream\",\n        this.requestStream,\n        \"responseType\",\n        this.responseType,\n        \"responseStream\",\n        this.responseStream,\n        \"options\",\n        this.options,\n        \"comment\",\n        keepComments ? this.comment : undefined,\n        \"parsedOptions\",\n        this.parsedOptions\n    ]);\n};\n/**\n * @override\n */ Method.prototype.resolve = function resolve() {\n    /* istanbul ignore if */ if (this.resolved) return this;\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n    return ReflectionObject.prototype.resolve.call(this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/method.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/namespace.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/namespace.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Namespace;\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/object.js\");\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/field.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\"), OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/oneof.js\");\nvar Type, Service, Enum;\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */ /**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */ Namespace.fromJSON = function fromJSON(name, json) {\n    return new Namespace(name, json.options).addJSON(json.nested);\n};\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */ function arrayToJSON(array, toJSONOptions) {\n    if (!(array && array.length)) return undefined;\n    var obj = {};\n    for(var i = 0; i < array.length; ++i)obj[array[i].name] = array[i].toJSON(toJSONOptions);\n    return obj;\n}\nNamespace.arrayToJSON = arrayToJSON;\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Namespace.isReservedId = function isReservedId(reserved, id) {\n    if (reserved) {\n        for(var i = 0; i < reserved.length; ++i)if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id) return true;\n    }\n    return false;\n};\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Namespace.isReservedName = function isReservedName(reserved, name) {\n    if (reserved) {\n        for(var i = 0; i < reserved.length; ++i)if (reserved[i] === name) return true;\n    }\n    return false;\n};\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */ function Namespace(name, options) {\n    ReflectionObject.call(this, name, options);\n    /**\n     * Nested objects by name.\n     * @type {Object.<string,ReflectionObject>|undefined}\n     */ this.nested = undefined; // toJSON\n    /**\n     * Cached nested objects as an array.\n     * @type {ReflectionObject[]|null}\n     * @private\n     */ this._nestedArray = null;\n    /**\n     * Cache lookup calls for any objects contains anywhere under this namespace.\n     * This drastically speeds up resolve for large cross-linked protos where the same\n     * types are looked up repeatedly.\n     * @type {Object.<string,ReflectionObject|null>}\n     * @private\n     */ this._lookupCache = {};\n    /**\n     * Whether or not objects contained in this namespace need feature resolution.\n     * @type {boolean}\n     * @protected\n     */ this._needsRecursiveFeatureResolution = true;\n    /**\n     * Whether or not objects contained in this namespace need a resolve.\n     * @type {boolean}\n     * @protected\n     */ this._needsRecursiveResolve = true;\n}\nfunction clearCache(namespace) {\n    namespace._nestedArray = null;\n    namespace._lookupCache = {};\n    // Also clear parent caches, since they include nested lookups.\n    var parent = namespace;\n    while(parent = parent.parent){\n        parent._lookupCache = {};\n    }\n    return namespace;\n}\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */ Object.defineProperty(Namespace.prototype, \"nestedArray\", {\n    get: function() {\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n    }\n});\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */ /**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */ /**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace|IOneOf}\n */ /**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */ Namespace.prototype.toJSON = function toJSON(toJSONOptions) {\n    return util.toObject([\n        \"options\",\n        this.options,\n        \"nested\",\n        arrayToJSON(this.nestedArray, toJSONOptions)\n    ]);\n};\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */ Namespace.prototype.addJSON = function addJSON(nestedJson) {\n    var ns = this;\n    /* istanbul ignore else */ if (nestedJson) {\n        for(var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i){\n            nested = nestedJson[names[i]];\n            ns.add((nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));\n        }\n    }\n    return this;\n};\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */ Namespace.prototype.get = function get(name) {\n    return this.nested && this.nested[name] || null;\n};\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */ Namespace.prototype.getEnum = function getEnum(name) {\n    if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;\n    throw Error(\"no such enum: \" + name);\n};\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */ Namespace.prototype.add = function add(object) {\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace)) throw TypeError(\"object must be a valid nested object\");\n    if (!this.nested) this.nested = {};\n    else {\n        var prev = this.get(object.name);\n        if (prev) {\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n                // replace plain namespace but keep existing nested elements and options\n                var nested = prev.nestedArray;\n                for(var i = 0; i < nested.length; ++i)object.add(nested[i]);\n                this.remove(prev);\n                if (!this.nested) this.nested = {};\n                object.setOptions(prev.options, true);\n            } else throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n        }\n    }\n    this.nested[object.name] = object;\n    if (!(this instanceof Type || this instanceof Service || this instanceof Enum || this instanceof Field)) {\n        // This is a package or a root namespace.\n        if (!object._edition) {\n            // Make sure that some edition is set if it hasn't already been specified.\n            object._edition = object._defaultEdition;\n        }\n    }\n    this._needsRecursiveFeatureResolution = true;\n    this._needsRecursiveResolve = true;\n    // Also clear parent caches, since they need to recurse down.\n    var parent = this;\n    while(parent = parent.parent){\n        parent._needsRecursiveFeatureResolution = true;\n        parent._needsRecursiveResolve = true;\n    }\n    object.onAdd(this);\n    return clearCache(this);\n};\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */ Namespace.prototype.remove = function remove(object) {\n    if (!(object instanceof ReflectionObject)) throw TypeError(\"object must be a ReflectionObject\");\n    if (object.parent !== this) throw Error(object + \" is not a member of \" + this);\n    delete this.nested[object.name];\n    if (!Object.keys(this.nested).length) this.nested = undefined;\n    object.onRemove(this);\n    return clearCache(this);\n};\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */ Namespace.prototype.define = function define(path, json) {\n    if (util.isString(path)) path = path.split(\".\");\n    else if (!Array.isArray(path)) throw TypeError(\"illegal path\");\n    if (path && path.length && path[0] === \"\") throw Error(\"path must be relative\");\n    var ptr = this;\n    while(path.length > 0){\n        var part = path.shift();\n        if (ptr.nested && ptr.nested[part]) {\n            ptr = ptr.nested[part];\n            if (!(ptr instanceof Namespace)) throw Error(\"path conflicts with non-namespace objects\");\n        } else ptr.add(ptr = new Namespace(part));\n    }\n    if (json) ptr.addJSON(json);\n    return ptr;\n};\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */ Namespace.prototype.resolveAll = function resolveAll() {\n    if (!this._needsRecursiveResolve) return this;\n    var nested = this.nestedArray, i = 0;\n    this.resolve();\n    while(i < nested.length)if (nested[i] instanceof Namespace) nested[i++].resolveAll();\n    else nested[i++].resolve();\n    this._needsRecursiveResolve = false;\n    return this;\n};\n/**\n * @override\n */ Namespace.prototype._resolveFeaturesRecursive = function _resolveFeaturesRecursive(edition) {\n    if (!this._needsRecursiveFeatureResolution) return this;\n    this._needsRecursiveFeatureResolution = false;\n    edition = this._edition || edition;\n    ReflectionObject.prototype._resolveFeaturesRecursive.call(this, edition);\n    this.nestedArray.forEach((nested)=>{\n        nested._resolveFeaturesRecursive(edition);\n    });\n    return this;\n};\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */ Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n    /* istanbul ignore next */ if (typeof filterTypes === \"boolean\") {\n        parentAlreadyChecked = filterTypes;\n        filterTypes = undefined;\n    } else if (filterTypes && !Array.isArray(filterTypes)) filterTypes = [\n        filterTypes\n    ];\n    if (util.isString(path) && path.length) {\n        if (path === \".\") return this.root;\n        path = path.split(\".\");\n    } else if (!path.length) return this;\n    var flatPath = path.join(\".\");\n    // Start at root if path is absolute\n    if (path[0] === \"\") return this.root.lookup(path.slice(1), filterTypes);\n    // Early bailout for objects with matching absolute paths\n    var found = this.root._fullyQualifiedObjects[\".\" + flatPath];\n    if (found && (!filterTypes || filterTypes.indexOf(found.constructor) > -1)) {\n        return found;\n    }\n    // Do a regular lookup at this namespace and below\n    found = this._lookupImpl(path, flatPath);\n    if (found && (!filterTypes || filterTypes.indexOf(found.constructor) > -1)) {\n        return found;\n    }\n    if (parentAlreadyChecked) return null;\n    // If there hasn't been a match, walk up the tree and look more broadly\n    var current = this;\n    while(current.parent){\n        found = current.parent._lookupImpl(path, flatPath);\n        if (found && (!filterTypes || filterTypes.indexOf(found.constructor) > -1)) {\n            return found;\n        }\n        current = current.parent;\n    }\n    return null;\n};\n/**\n * Internal helper for lookup that handles searching just at this namespace and below along with caching.\n * @param {string[]} path Path to look up\n * @param {string} flatPath Flattened version of the path to use as a cache key\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @private\n */ Namespace.prototype._lookupImpl = function lookup(path, flatPath) {\n    if (Object.prototype.hasOwnProperty.call(this._lookupCache, flatPath)) {\n        return this._lookupCache[flatPath];\n    }\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\n    var found = this.get(path[0]);\n    var exact = null;\n    if (found) {\n        if (path.length === 1) {\n            exact = found;\n        } else if (found instanceof Namespace) {\n            path = path.slice(1);\n            exact = found._lookupImpl(path, path.join(\".\"));\n        }\n    // Otherwise try each nested namespace\n    } else {\n        for(var i = 0; i < this.nestedArray.length; ++i)if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i]._lookupImpl(path, flatPath))) exact = found;\n    }\n    // Set this even when null, so that when we walk up the tree we can quickly bail on repeated checks back down.\n    this._lookupCache[flatPath] = exact;\n    return exact;\n};\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */ // lookup(path: string, [parentAlreadyChecked: boolean])\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */ Namespace.prototype.lookupType = function lookupType(path) {\n    var found = this.lookup(path, [\n        Type\n    ]);\n    if (!found) throw Error(\"no such type: \" + path);\n    return found;\n};\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */ Namespace.prototype.lookupEnum = function lookupEnum(path) {\n    var found = this.lookup(path, [\n        Enum\n    ]);\n    if (!found) throw Error(\"no such Enum '\" + path + \"' in \" + this);\n    return found;\n};\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */ Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n    var found = this.lookup(path, [\n        Type,\n        Enum\n    ]);\n    if (!found) throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n    return found;\n};\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */ Namespace.prototype.lookupService = function lookupService(path) {\n    var found = this.lookup(path, [\n        Service\n    ]);\n    if (!found) throw Error(\"no such Service '\" + path + \"' in \" + this);\n    return found;\n};\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function(Type_, Service_, Enum_) {\n    Type = Type_;\n    Service = Service_;\n    Enum = Enum_;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbmFtZXNwYWNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsMkJBQTJCO0FBQzNCLElBQUlDLG1CQUFtQkMsbUJBQU9BLENBQUMsMEZBQVU7QUFDeEMsRUFBQ0YsVUFBVUcsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNKLGlCQUFpQkUsU0FBUyxHQUFHRyxXQUFXLEdBQUdOLFNBQVEsRUFBR08sU0FBUyxHQUFHO0FBRXhHLElBQUlDLFFBQVdOLG1CQUFPQSxDQUFDLHdGQUFTLEdBQzVCTyxPQUFXUCxtQkFBT0EsQ0FBQyxzRkFBUSxHQUMzQlEsUUFBV1IsbUJBQU9BLENBQUMsd0ZBQVM7QUFFaEMsSUFBSVMsTUFDQUMsU0FDQUM7QUFFSjs7Ozs7Ozs7Q0FRQyxHQUVEOzs7Ozs7OztDQVFDLEdBQ0RiLFVBQVVjLFFBQVEsR0FBRyxTQUFTQSxTQUFTQyxJQUFJLEVBQUVDLElBQUk7SUFDN0MsT0FBTyxJQUFJaEIsVUFBVWUsTUFBTUMsS0FBS0MsT0FBTyxFQUFFQyxPQUFPLENBQUNGLEtBQUtHLE1BQU07QUFDaEU7QUFFQTs7Ozs7O0NBTUMsR0FDRCxTQUFTQyxZQUFZQyxLQUFLLEVBQUVDLGFBQWE7SUFDckMsSUFBSSxDQUFFRCxDQUFBQSxTQUFTQSxNQUFNRSxNQUFNLEdBQ3ZCLE9BQU9DO0lBQ1gsSUFBSUMsTUFBTSxDQUFDO0lBQ1gsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLE1BQU1FLE1BQU0sRUFBRSxFQUFFRyxFQUNoQ0QsR0FBRyxDQUFDSixLQUFLLENBQUNLLEVBQUUsQ0FBQ1gsSUFBSSxDQUFDLEdBQUdNLEtBQUssQ0FBQ0ssRUFBRSxDQUFDQyxNQUFNLENBQUNMO0lBQ3pDLE9BQU9HO0FBQ1g7QUFFQXpCLFVBQVVvQixXQUFXLEdBQUdBO0FBRXhCOzs7OztDQUtDLEdBQ0RwQixVQUFVNEIsWUFBWSxHQUFHLFNBQVNBLGFBQWFDLFFBQVEsRUFBRUMsRUFBRTtJQUN2RCxJQUFJRCxVQUNBO1FBQUEsSUFBSyxJQUFJSCxJQUFJLEdBQUdBLElBQUlHLFNBQVNOLE1BQU0sRUFBRSxFQUFFRyxFQUNuQyxJQUFJLE9BQU9HLFFBQVEsQ0FBQ0gsRUFBRSxLQUFLLFlBQVlHLFFBQVEsQ0FBQ0gsRUFBRSxDQUFDLEVBQUUsSUFBSUksTUFBTUQsUUFBUSxDQUFDSCxFQUFFLENBQUMsRUFBRSxHQUFHSSxJQUM1RSxPQUFPO0lBQUk7SUFDdkIsT0FBTztBQUNYO0FBRUE7Ozs7O0NBS0MsR0FDRDlCLFVBQVUrQixjQUFjLEdBQUcsU0FBU0EsZUFBZUYsUUFBUSxFQUFFZCxJQUFJO0lBQzdELElBQUljLFVBQ0E7UUFBQSxJQUFLLElBQUlILElBQUksR0FBR0EsSUFBSUcsU0FBU04sTUFBTSxFQUFFLEVBQUVHLEVBQ25DLElBQUlHLFFBQVEsQ0FBQ0gsRUFBRSxLQUFLWCxNQUNoQixPQUFPO0lBQUk7SUFDdkIsT0FBTztBQUNYO0FBRUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNELFNBQVNmLFVBQVVlLElBQUksRUFBRUUsT0FBTztJQUM1QmhCLGlCQUFpQitCLElBQUksQ0FBQyxJQUFJLEVBQUVqQixNQUFNRTtJQUVsQzs7O0tBR0MsR0FDRCxJQUFJLENBQUNFLE1BQU0sR0FBR0ssV0FBVyxTQUFTO0lBRWxDOzs7O0tBSUMsR0FDRCxJQUFJLENBQUNTLFlBQVksR0FBRztJQUVwQjs7Ozs7O0tBTUMsR0FDRCxJQUFJLENBQUNDLFlBQVksR0FBRyxDQUFDO0lBRXJCOzs7O0tBSUMsR0FDRCxJQUFJLENBQUNDLGdDQUFnQyxHQUFHO0lBRXhDOzs7O0tBSUMsR0FDRCxJQUFJLENBQUNDLHNCQUFzQixHQUFHO0FBQ2xDO0FBRUEsU0FBU0MsV0FBV0MsU0FBUztJQUN6QkEsVUFBVUwsWUFBWSxHQUFHO0lBQ3pCSyxVQUFVSixZQUFZLEdBQUcsQ0FBQztJQUUxQiwrREFBK0Q7SUFDL0QsSUFBSUssU0FBU0Q7SUFDYixNQUFNQyxTQUFTQSxPQUFPQSxNQUFNLENBQUU7UUFDMUJBLE9BQU9MLFlBQVksR0FBRyxDQUFDO0lBQzNCO0lBQ0EsT0FBT0k7QUFDWDtBQUVBOzs7OztDQUtDLEdBQ0RsQyxPQUFPb0MsY0FBYyxDQUFDeEMsVUFBVUcsU0FBUyxFQUFFLGVBQWU7SUFDdERzQyxLQUFLO1FBQ0QsT0FBTyxJQUFJLENBQUNSLFlBQVksSUFBSyxLQUFJLENBQUNBLFlBQVksR0FBR3hCLEtBQUtpQyxPQUFPLENBQUMsSUFBSSxDQUFDdkIsTUFBTTtJQUM3RTtBQUNKO0FBRUE7Ozs7O0NBS0MsR0FFRDs7OztDQUlDLEdBRUQ7Ozs7Q0FJQyxHQUVEOzs7O0NBSUMsR0FDRG5CLFVBQVVHLFNBQVMsQ0FBQ3dCLE1BQU0sR0FBRyxTQUFTQSxPQUFPTCxhQUFhO0lBQ3RELE9BQU9iLEtBQUtrQyxRQUFRLENBQUM7UUFDakI7UUFBWSxJQUFJLENBQUMxQixPQUFPO1FBQ3hCO1FBQVlHLFlBQVksSUFBSSxDQUFDd0IsV0FBVyxFQUFFdEI7S0FDN0M7QUFDTDtBQUVBOzs7O0NBSUMsR0FDRHRCLFVBQVVHLFNBQVMsQ0FBQ2UsT0FBTyxHQUFHLFNBQVNBLFFBQVEyQixVQUFVO0lBQ3JELElBQUlDLEtBQUssSUFBSTtJQUNiLHdCQUF3QixHQUN4QixJQUFJRCxZQUFZO1FBQ1osSUFBSyxJQUFJRSxRQUFRM0MsT0FBTzRDLElBQUksQ0FBQ0gsYUFBYW5CLElBQUksR0FBR1AsUUFBUU8sSUFBSXFCLE1BQU14QixNQUFNLEVBQUUsRUFBRUcsRUFBRztZQUM1RVAsU0FBUzBCLFVBQVUsQ0FBQ0UsS0FBSyxDQUFDckIsRUFBRSxDQUFDO1lBQzdCb0IsR0FBR0csR0FBRyxDQUNGLENBQUU5QixPQUFPK0IsTUFBTSxLQUFLMUIsWUFDbEJiLEtBQUtHLFFBQVEsR0FDYkssT0FBT2dDLE1BQU0sS0FBSzNCLFlBQ2xCWCxLQUFLQyxRQUFRLEdBQ2JLLE9BQU9pQyxPQUFPLEtBQUs1QixZQUNuQlosUUFBUUUsUUFBUSxHQUNoQkssT0FBT1csRUFBRSxLQUFLTixZQUNkaEIsTUFBTU0sUUFBUSxHQUNkZCxVQUFVYyxRQUFRLEVBQUdpQyxLQUFLLENBQUNyQixFQUFFLEVBQUVQO1FBRXpDO0lBQ0o7SUFDQSxPQUFPLElBQUk7QUFDZjtBQUVBOzs7O0NBSUMsR0FDRG5CLFVBQVVHLFNBQVMsQ0FBQ3NDLEdBQUcsR0FBRyxTQUFTQSxJQUFJMUIsSUFBSTtJQUN2QyxPQUFPLElBQUksQ0FBQ0ksTUFBTSxJQUFJLElBQUksQ0FBQ0EsTUFBTSxDQUFDSixLQUFLLElBQ2hDO0FBQ1g7QUFFQTs7Ozs7O0NBTUMsR0FDRGYsVUFBVUcsU0FBUyxDQUFDa0QsT0FBTyxHQUFHLFNBQVNBLFFBQVF0QyxJQUFJO0lBQy9DLElBQUksSUFBSSxDQUFDSSxNQUFNLElBQUksSUFBSSxDQUFDQSxNQUFNLENBQUNKLEtBQUssWUFBWUYsTUFDNUMsT0FBTyxJQUFJLENBQUNNLE1BQU0sQ0FBQ0osS0FBSyxDQUFDb0MsTUFBTTtJQUNuQyxNQUFNRyxNQUFNLG1CQUFtQnZDO0FBQ25DO0FBRUE7Ozs7OztDQU1DLEdBQ0RmLFVBQVVHLFNBQVMsQ0FBQzhDLEdBQUcsR0FBRyxTQUFTQSxJQUFJTSxNQUFNO0lBRXpDLElBQUksQ0FBRUEsQ0FBQUEsa0JBQWtCL0MsU0FBUytDLE9BQU9DLE1BQU0sS0FBS2hDLGFBQWErQixrQkFBa0I1QyxRQUFTNEMsa0JBQWtCN0MsU0FBUzZDLGtCQUFrQjFDLFFBQVEwQyxrQkFBa0IzQyxXQUFXMkMsa0JBQWtCdkQsU0FBUSxHQUNuTSxNQUFNeUQsVUFBVTtJQUVwQixJQUFJLENBQUMsSUFBSSxDQUFDdEMsTUFBTSxFQUNaLElBQUksQ0FBQ0EsTUFBTSxHQUFHLENBQUM7U0FDZDtRQUNELElBQUl1QyxPQUFPLElBQUksQ0FBQ2pCLEdBQUcsQ0FBQ2MsT0FBT3hDLElBQUk7UUFDL0IsSUFBSTJDLE1BQU07WUFDTixJQUFJQSxnQkFBZ0IxRCxhQUFhdUQsa0JBQWtCdkQsYUFBYSxDQUFFMEQsQ0FBQUEsZ0JBQWdCL0MsUUFBUStDLGdCQUFnQjlDLE9BQU0sR0FBSTtnQkFDaEgsd0VBQXdFO2dCQUN4RSxJQUFJTyxTQUFTdUMsS0FBS2QsV0FBVztnQkFDN0IsSUFBSyxJQUFJbEIsSUFBSSxHQUFHQSxJQUFJUCxPQUFPSSxNQUFNLEVBQUUsRUFBRUcsRUFDakM2QixPQUFPTixHQUFHLENBQUM5QixNQUFNLENBQUNPLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQ2lDLE1BQU0sQ0FBQ0Q7Z0JBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ3ZDLE1BQU0sRUFDWixJQUFJLENBQUNBLE1BQU0sR0FBRyxDQUFDO2dCQUNuQm9DLE9BQU9LLFVBQVUsQ0FBQ0YsS0FBS3pDLE9BQU8sRUFBRTtZQUVwQyxPQUNJLE1BQU1xQyxNQUFNLHFCQUFxQkMsT0FBT3hDLElBQUksR0FBRyxVQUFVLElBQUk7UUFDckU7SUFDSjtJQUNBLElBQUksQ0FBQ0ksTUFBTSxDQUFDb0MsT0FBT3hDLElBQUksQ0FBQyxHQUFHd0M7SUFFM0IsSUFBSSxDQUFFLEtBQUksWUFBWTVDLFFBQVEsSUFBSSxZQUFZQyxXQUFXLElBQUksWUFBWUMsUUFBUSxJQUFJLFlBQVlMLEtBQUksR0FBSTtRQUNyRyx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDK0MsT0FBT00sUUFBUSxFQUFFO1lBQ2xCLDBFQUEwRTtZQUMxRU4sT0FBT00sUUFBUSxHQUFHTixPQUFPTyxlQUFlO1FBQzVDO0lBQ0o7SUFFQSxJQUFJLENBQUMzQixnQ0FBZ0MsR0FBRztJQUN4QyxJQUFJLENBQUNDLHNCQUFzQixHQUFHO0lBRTlCLDZEQUE2RDtJQUM3RCxJQUFJRyxTQUFTLElBQUk7SUFDakIsTUFBTUEsU0FBU0EsT0FBT0EsTUFBTSxDQUFFO1FBQzFCQSxPQUFPSixnQ0FBZ0MsR0FBRztRQUMxQ0ksT0FBT0gsc0JBQXNCLEdBQUc7SUFDcEM7SUFFQW1CLE9BQU9RLEtBQUssQ0FBQyxJQUFJO0lBQ2pCLE9BQU8xQixXQUFXLElBQUk7QUFDMUI7QUFFQTs7Ozs7O0NBTUMsR0FDRHJDLFVBQVVHLFNBQVMsQ0FBQ3dELE1BQU0sR0FBRyxTQUFTQSxPQUFPSixNQUFNO0lBRS9DLElBQUksQ0FBRUEsQ0FBQUEsa0JBQWtCdEQsZ0JBQWUsR0FDbkMsTUFBTXdELFVBQVU7SUFDcEIsSUFBSUYsT0FBT2hCLE1BQU0sS0FBSyxJQUFJLEVBQ3RCLE1BQU1lLE1BQU1DLFNBQVMseUJBQXlCLElBQUk7SUFFdEQsT0FBTyxJQUFJLENBQUNwQyxNQUFNLENBQUNvQyxPQUFPeEMsSUFBSSxDQUFDO0lBQy9CLElBQUksQ0FBQ1gsT0FBTzRDLElBQUksQ0FBQyxJQUFJLENBQUM3QixNQUFNLEVBQUVJLE1BQU0sRUFDaEMsSUFBSSxDQUFDSixNQUFNLEdBQUdLO0lBRWxCK0IsT0FBT1MsUUFBUSxDQUFDLElBQUk7SUFDcEIsT0FBTzNCLFdBQVcsSUFBSTtBQUMxQjtBQUVBOzs7OztDQUtDLEdBQ0RyQyxVQUFVRyxTQUFTLENBQUM4RCxNQUFNLEdBQUcsU0FBU0EsT0FBT0MsSUFBSSxFQUFFbEQsSUFBSTtJQUVuRCxJQUFJUCxLQUFLMEQsUUFBUSxDQUFDRCxPQUNkQSxPQUFPQSxLQUFLRSxLQUFLLENBQUM7U0FDakIsSUFBSSxDQUFDQyxNQUFNQyxPQUFPLENBQUNKLE9BQ3BCLE1BQU1ULFVBQVU7SUFDcEIsSUFBSVMsUUFBUUEsS0FBSzNDLE1BQU0sSUFBSTJDLElBQUksQ0FBQyxFQUFFLEtBQUssSUFDbkMsTUFBTVosTUFBTTtJQUVoQixJQUFJaUIsTUFBTSxJQUFJO0lBQ2QsTUFBT0wsS0FBSzNDLE1BQU0sR0FBRyxFQUFHO1FBQ3BCLElBQUlpRCxPQUFPTixLQUFLTyxLQUFLO1FBQ3JCLElBQUlGLElBQUlwRCxNQUFNLElBQUlvRCxJQUFJcEQsTUFBTSxDQUFDcUQsS0FBSyxFQUFFO1lBQ2hDRCxNQUFNQSxJQUFJcEQsTUFBTSxDQUFDcUQsS0FBSztZQUN0QixJQUFJLENBQUVELENBQUFBLGVBQWV2RSxTQUFRLEdBQ3pCLE1BQU1zRCxNQUFNO1FBQ3BCLE9BQ0lpQixJQUFJdEIsR0FBRyxDQUFDc0IsTUFBTSxJQUFJdkUsVUFBVXdFO0lBQ3BDO0lBQ0EsSUFBSXhELE1BQ0F1RCxJQUFJckQsT0FBTyxDQUFDRjtJQUNoQixPQUFPdUQ7QUFDWDtBQUVBOzs7Q0FHQyxHQUNEdkUsVUFBVUcsU0FBUyxDQUFDdUUsVUFBVSxHQUFHLFNBQVNBO0lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUN0QyxzQkFBc0IsRUFBRSxPQUFPLElBQUk7SUFFN0MsSUFBSWpCLFNBQVMsSUFBSSxDQUFDeUIsV0FBVyxFQUFFbEIsSUFBSTtJQUNuQyxJQUFJLENBQUNpRCxPQUFPO0lBQ1osTUFBT2pELElBQUlQLE9BQU9JLE1BQU0sQ0FDcEIsSUFBSUosTUFBTSxDQUFDTyxFQUFFLFlBQVkxQixXQUNyQm1CLE1BQU0sQ0FBQ08sSUFBSSxDQUFDZ0QsVUFBVTtTQUV0QnZELE1BQU0sQ0FBQ08sSUFBSSxDQUFDaUQsT0FBTztJQUMzQixJQUFJLENBQUN2QyxzQkFBc0IsR0FBRztJQUM5QixPQUFPLElBQUk7QUFDZjtBQUVBOztDQUVDLEdBQ0RwQyxVQUFVRyxTQUFTLENBQUN5RSx5QkFBeUIsR0FBRyxTQUFTQSwwQkFBMEJDLE9BQU87SUFDdEYsSUFBSSxDQUFDLElBQUksQ0FBQzFDLGdDQUFnQyxFQUFFLE9BQU8sSUFBSTtJQUN2RCxJQUFJLENBQUNBLGdDQUFnQyxHQUFHO0lBRXhDMEMsVUFBVSxJQUFJLENBQUNoQixRQUFRLElBQUlnQjtJQUUzQjVFLGlCQUFpQkUsU0FBUyxDQUFDeUUseUJBQXlCLENBQUM1QyxJQUFJLENBQUMsSUFBSSxFQUFFNkM7SUFDaEUsSUFBSSxDQUFDakMsV0FBVyxDQUFDa0MsT0FBTyxDQUFDM0QsQ0FBQUE7UUFDckJBLE9BQU95RCx5QkFBeUIsQ0FBQ0M7SUFDckM7SUFDQSxPQUFPLElBQUk7QUFDZjtBQUVBOzs7Ozs7Q0FNQyxHQUNEN0UsVUFBVUcsU0FBUyxDQUFDNEUsTUFBTSxHQUFHLFNBQVNBLE9BQU9iLElBQUksRUFBRWMsV0FBVyxFQUFFQyxvQkFBb0I7SUFDaEYsd0JBQXdCLEdBQ3hCLElBQUksT0FBT0QsZ0JBQWdCLFdBQVc7UUFDbENDLHVCQUF1QkQ7UUFDdkJBLGNBQWN4RDtJQUNsQixPQUFPLElBQUl3RCxlQUFlLENBQUNYLE1BQU1DLE9BQU8sQ0FBQ1UsY0FDckNBLGNBQWM7UUFBRUE7S0FBYTtJQUVqQyxJQUFJdkUsS0FBSzBELFFBQVEsQ0FBQ0QsU0FBU0EsS0FBSzNDLE1BQU0sRUFBRTtRQUNwQyxJQUFJMkMsU0FBUyxLQUNULE9BQU8sSUFBSSxDQUFDZ0IsSUFBSTtRQUNwQmhCLE9BQU9BLEtBQUtFLEtBQUssQ0FBQztJQUN0QixPQUFPLElBQUksQ0FBQ0YsS0FBSzNDLE1BQU0sRUFDbkIsT0FBTyxJQUFJO0lBRWYsSUFBSTRELFdBQVdqQixLQUFLa0IsSUFBSSxDQUFDO0lBRXpCLG9DQUFvQztJQUNwQyxJQUFJbEIsSUFBSSxDQUFDLEVBQUUsS0FBSyxJQUNaLE9BQU8sSUFBSSxDQUFDZ0IsSUFBSSxDQUFDSCxNQUFNLENBQUNiLEtBQUttQixLQUFLLENBQUMsSUFBSUw7SUFFM0MseURBQXlEO0lBQ3pELElBQUlNLFFBQVEsSUFBSSxDQUFDSixJQUFJLENBQUNLLHNCQUFzQixDQUFDLE1BQU1KLFNBQVM7SUFDNUQsSUFBSUcsU0FBVSxFQUFDTixlQUFlQSxZQUFZUSxPQUFPLENBQUNGLE1BQU1oRixXQUFXLElBQUksQ0FBQyxJQUFJO1FBQ3hFLE9BQU9nRjtJQUNYO0lBRUEsa0RBQWtEO0lBQ2xEQSxRQUFRLElBQUksQ0FBQ0csV0FBVyxDQUFDdkIsTUFBTWlCO0lBQy9CLElBQUlHLFNBQVUsRUFBQ04sZUFBZUEsWUFBWVEsT0FBTyxDQUFDRixNQUFNaEYsV0FBVyxJQUFJLENBQUMsSUFBSTtRQUN4RSxPQUFPZ0Y7SUFDWDtJQUVBLElBQUlMLHNCQUNBLE9BQU87SUFFWCx1RUFBdUU7SUFDdkUsSUFBSVMsVUFBVSxJQUFJO0lBQ2xCLE1BQU9BLFFBQVFuRCxNQUFNLENBQUU7UUFDbkIrQyxRQUFRSSxRQUFRbkQsTUFBTSxDQUFDa0QsV0FBVyxDQUFDdkIsTUFBTWlCO1FBQ3pDLElBQUlHLFNBQVUsRUFBQ04sZUFBZUEsWUFBWVEsT0FBTyxDQUFDRixNQUFNaEYsV0FBVyxJQUFJLENBQUMsSUFBSTtZQUN4RSxPQUFPZ0Y7UUFDWDtRQUNBSSxVQUFVQSxRQUFRbkQsTUFBTTtJQUM1QjtJQUNBLE9BQU87QUFDWDtBQUVBOzs7Ozs7Q0FNQyxHQUNEdkMsVUFBVUcsU0FBUyxDQUFDc0YsV0FBVyxHQUFHLFNBQVNWLE9BQU9iLElBQUksRUFBRWlCLFFBQVE7SUFDNUQsSUFBRy9FLE9BQU9ELFNBQVMsQ0FBQ3dGLGNBQWMsQ0FBQzNELElBQUksQ0FBQyxJQUFJLENBQUNFLFlBQVksRUFBRWlELFdBQVc7UUFDbEUsT0FBTyxJQUFJLENBQUNqRCxZQUFZLENBQUNpRCxTQUFTO0lBQ3RDO0lBRUEsOEZBQThGO0lBQzlGLElBQUlHLFFBQVEsSUFBSSxDQUFDN0MsR0FBRyxDQUFDeUIsSUFBSSxDQUFDLEVBQUU7SUFDNUIsSUFBSTBCLFFBQVE7SUFDWixJQUFJTixPQUFPO1FBQ1AsSUFBSXBCLEtBQUszQyxNQUFNLEtBQUssR0FBRztZQUNuQnFFLFFBQVFOO1FBQ1osT0FBTyxJQUFJQSxpQkFBaUJ0RixXQUFXO1lBQ25Da0UsT0FBT0EsS0FBS21CLEtBQUssQ0FBQztZQUNsQk8sUUFBUU4sTUFBTUcsV0FBVyxDQUFDdkIsTUFBTUEsS0FBS2tCLElBQUksQ0FBQztRQUM5QztJQUVKLHNDQUFzQztJQUN0QyxPQUFPO1FBQ0gsSUFBSyxJQUFJMUQsSUFBSSxHQUFHQSxJQUFJLElBQUksQ0FBQ2tCLFdBQVcsQ0FBQ3JCLE1BQU0sRUFBRSxFQUFFRyxFQUMzQyxJQUFJLElBQUksQ0FBQ08sWUFBWSxDQUFDUCxFQUFFLFlBQVkxQixhQUFjc0YsQ0FBQUEsUUFBUSxJQUFJLENBQUNyRCxZQUFZLENBQUNQLEVBQUUsQ0FBQytELFdBQVcsQ0FBQ3ZCLE1BQU1pQixTQUFRLEdBQ3JHUyxRQUFRTjtJQUNwQjtJQUVBLDhHQUE4RztJQUM5RyxJQUFJLENBQUNwRCxZQUFZLENBQUNpRCxTQUFTLEdBQUdTO0lBQzlCLE9BQU9BO0FBQ1g7QUFFQTs7Ozs7Ozs7Q0FRQyxHQUNELHdEQUF3RDtBQUV4RDs7Ozs7O0NBTUMsR0FDRDVGLFVBQVVHLFNBQVMsQ0FBQzBGLFVBQVUsR0FBRyxTQUFTQSxXQUFXM0IsSUFBSTtJQUNyRCxJQUFJb0IsUUFBUSxJQUFJLENBQUNQLE1BQU0sQ0FBQ2IsTUFBTTtRQUFFdkQ7S0FBTTtJQUN0QyxJQUFJLENBQUMyRSxPQUNELE1BQU1oQyxNQUFNLG1CQUFtQlk7SUFDbkMsT0FBT29CO0FBQ1g7QUFFQTs7Ozs7O0NBTUMsR0FDRHRGLFVBQVVHLFNBQVMsQ0FBQzJGLFVBQVUsR0FBRyxTQUFTQSxXQUFXNUIsSUFBSTtJQUNyRCxJQUFJb0IsUUFBUSxJQUFJLENBQUNQLE1BQU0sQ0FBQ2IsTUFBTTtRQUFFckQ7S0FBTTtJQUN0QyxJQUFJLENBQUN5RSxPQUNELE1BQU1oQyxNQUFNLG1CQUFtQlksT0FBTyxVQUFVLElBQUk7SUFDeEQsT0FBT29CO0FBQ1g7QUFFQTs7Ozs7O0NBTUMsR0FDRHRGLFVBQVVHLFNBQVMsQ0FBQzRGLGdCQUFnQixHQUFHLFNBQVNBLGlCQUFpQjdCLElBQUk7SUFDakUsSUFBSW9CLFFBQVEsSUFBSSxDQUFDUCxNQUFNLENBQUNiLE1BQU07UUFBRXZEO1FBQU1FO0tBQU07SUFDNUMsSUFBSSxDQUFDeUUsT0FDRCxNQUFNaEMsTUFBTSwyQkFBMkJZLE9BQU8sVUFBVSxJQUFJO0lBQ2hFLE9BQU9vQjtBQUNYO0FBRUE7Ozs7OztDQU1DLEdBQ0R0RixVQUFVRyxTQUFTLENBQUM2RixhQUFhLEdBQUcsU0FBU0EsY0FBYzlCLElBQUk7SUFDM0QsSUFBSW9CLFFBQVEsSUFBSSxDQUFDUCxNQUFNLENBQUNiLE1BQU07UUFBRXREO0tBQVM7SUFDekMsSUFBSSxDQUFDMEUsT0FDRCxNQUFNaEMsTUFBTSxzQkFBc0JZLE9BQU8sVUFBVSxJQUFJO0lBQzNELE9BQU9vQjtBQUNYO0FBRUEsc0RBQXNEO0FBQ3REdEYsVUFBVWlHLFVBQVUsR0FBRyxTQUFTQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsS0FBSztJQUNsRHpGLE9BQVV1RjtJQUNWdEYsVUFBVXVGO0lBQ1Z0RixPQUFVdUY7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL25hbWVzcGFjZS5qcz8wOGMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBOYW1lc3BhY2U7XG5cbi8vIGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxudmFyIFJlZmxlY3Rpb25PYmplY3QgPSByZXF1aXJlKFwiLi9vYmplY3RcIik7XG4oKE5hbWVzcGFjZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBOYW1lc3BhY2UpLmNsYXNzTmFtZSA9IFwiTmFtZXNwYWNlXCI7XG5cbnZhciBGaWVsZCAgICA9IHJlcXVpcmUoXCIuL2ZpZWxkXCIpLFxuICAgIHV0aWwgICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKSxcbiAgICBPbmVPZiAgICA9IHJlcXVpcmUoXCIuL29uZW9mXCIpO1xuXG52YXIgVHlwZSwgICAgLy8gY3ljbGljXG4gICAgU2VydmljZSxcbiAgICBFbnVtO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgbmFtZXNwYWNlIGluc3RhbmNlLlxuICogQG5hbWUgTmFtZXNwYWNlXG4gKiBAY2xhc3NkZXNjIFJlZmxlY3RlZCBuYW1lc3BhY2UuXG4gKiBAZXh0ZW5kcyBOYW1lc3BhY2VCYXNlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWVzcGFjZSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gRGVjbGFyZWQgb3B0aW9uc1xuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5hbWVzcGFjZSBmcm9tIEpTT04uXG4gKiBAbWVtYmVyb2YgTmFtZXNwYWNlXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWVzcGFjZSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBqc29uIEpTT04gb2JqZWN0XG4gKiBAcmV0dXJucyB7TmFtZXNwYWNlfSBDcmVhdGVkIG5hbWVzcGFjZVxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqL1xuTmFtZXNwYWNlLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04obmFtZSwganNvbikge1xuICAgIHJldHVybiBuZXcgTmFtZXNwYWNlKG5hbWUsIGpzb24ub3B0aW9ucykuYWRkSlNPTihqc29uLm5lc3RlZCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIGFycmF5IG9mIHJlZmxlY3Rpb24gb2JqZWN0cyB0byBKU09OLlxuICogQG1lbWJlcm9mIE5hbWVzcGFjZVxuICogQHBhcmFtIHtSZWZsZWN0aW9uT2JqZWN0W119IGFycmF5IE9iamVjdCBhcnJheVxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj58dW5kZWZpbmVkfSBKU09OIG9iamVjdCBvciBgdW5kZWZpbmVkYCB3aGVuIGFycmF5IGlzIGVtcHR5XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9KU09OKGFycmF5LCB0b0pTT05PcHRpb25zKSB7XG4gICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSlcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB2YXIgb2JqID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7ICsraSlcbiAgICAgICAgb2JqW2FycmF5W2ldLm5hbWVdID0gYXJyYXlbaV0udG9KU09OKHRvSlNPTk9wdGlvbnMpO1xuICAgIHJldHVybiBvYmo7XG59XG5cbk5hbWVzcGFjZS5hcnJheVRvSlNPTiA9IGFycmF5VG9KU09OO1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgaWQgaXMgcmVzZXJ2ZWQuXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXJbXXxzdHJpbmc+fHVuZGVmaW5lZH0gcmVzZXJ2ZWQgQXJyYXkgb2YgcmVzZXJ2ZWQgcmFuZ2VzIGFuZCBuYW1lc1xuICogQHBhcmFtIHtudW1iZXJ9IGlkIElkIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgcmVzZXJ2ZWQsIG90aGVyd2lzZSBgZmFsc2VgXG4gKi9cbk5hbWVzcGFjZS5pc1Jlc2VydmVkSWQgPSBmdW5jdGlvbiBpc1Jlc2VydmVkSWQocmVzZXJ2ZWQsIGlkKSB7XG4gICAgaWYgKHJlc2VydmVkKVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc2VydmVkLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNlcnZlZFtpXSAhPT0gXCJzdHJpbmdcIiAmJiByZXNlcnZlZFtpXVswXSA8PSBpZCAmJiByZXNlcnZlZFtpXVsxXSA+IGlkKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBuYW1lIGlzIHJlc2VydmVkLlxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyW118c3RyaW5nPnx1bmRlZmluZWR9IHJlc2VydmVkIEFycmF5IG9mIHJlc2VydmVkIHJhbmdlcyBhbmQgbmFtZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiByZXNlcnZlZCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xuTmFtZXNwYWNlLmlzUmVzZXJ2ZWROYW1lID0gZnVuY3Rpb24gaXNSZXNlcnZlZE5hbWUocmVzZXJ2ZWQsIG5hbWUpIHtcbiAgICBpZiAocmVzZXJ2ZWQpXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzZXJ2ZWQubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBpZiAocmVzZXJ2ZWRbaV0gPT09IG5hbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBOb3QgYW4gYWN0dWFsIGNvbnN0cnVjdG9yLiBVc2Uge0BsaW5rIE5hbWVzcGFjZX0gaW5zdGVhZC5cbiAqIEBjbGFzc2Rlc2MgQmFzZSBjbGFzcyBvZiBhbGwgcmVmbGVjdGlvbiBvYmplY3RzIGNvbnRhaW5pbmcgbmVzdGVkIG9iamVjdHMuIFRoaXMgaXMgbm90IGFuIGFjdHVhbCBjbGFzcyBidXQgaGVyZSBmb3IgdGhlIHNha2Ugb2YgaGF2aW5nIGNvbnNpc3RlbnQgdHlwZSBkZWZpbml0aW9ucy5cbiAqIEBleHBvcnRzIE5hbWVzcGFjZUJhc2VcbiAqIEBleHRlbmRzIFJlZmxlY3Rpb25PYmplY3RcbiAqIEBhYnN0cmFjdFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lc3BhY2UgbmFtZVxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcbiAqIEBzZWUge0BsaW5rIE5hbWVzcGFjZX1cbiAqL1xuZnVuY3Rpb24gTmFtZXNwYWNlKG5hbWUsIG9wdGlvbnMpIHtcbiAgICBSZWZsZWN0aW9uT2JqZWN0LmNhbGwodGhpcywgbmFtZSwgb3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBOZXN0ZWQgb2JqZWN0cyBieSBuYW1lLlxuICAgICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxSZWZsZWN0aW9uT2JqZWN0Pnx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5uZXN0ZWQgPSB1bmRlZmluZWQ7IC8vIHRvSlNPTlxuXG4gICAgLyoqXG4gICAgICogQ2FjaGVkIG5lc3RlZCBvYmplY3RzIGFzIGFuIGFycmF5LlxuICAgICAqIEB0eXBlIHtSZWZsZWN0aW9uT2JqZWN0W118bnVsbH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX25lc3RlZEFycmF5ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENhY2hlIGxvb2t1cCBjYWxscyBmb3IgYW55IG9iamVjdHMgY29udGFpbnMgYW55d2hlcmUgdW5kZXIgdGhpcyBuYW1lc3BhY2UuXG4gICAgICogVGhpcyBkcmFzdGljYWxseSBzcGVlZHMgdXAgcmVzb2x2ZSBmb3IgbGFyZ2UgY3Jvc3MtbGlua2VkIHByb3RvcyB3aGVyZSB0aGUgc2FtZVxuICAgICAqIHR5cGVzIGFyZSBsb29rZWQgdXAgcmVwZWF0ZWRseS5cbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsUmVmbGVjdGlvbk9iamVjdHxudWxsPn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2xvb2t1cENhY2hlID0ge307XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCBvYmplY3RzIGNvbnRhaW5lZCBpbiB0aGlzIG5hbWVzcGFjZSBuZWVkIGZlYXR1cmUgcmVzb2x1dGlvbi5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdGhpcy5fbmVlZHNSZWN1cnNpdmVGZWF0dXJlUmVzb2x1dGlvbiA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCBvYmplY3RzIGNvbnRhaW5lZCBpbiB0aGlzIG5hbWVzcGFjZSBuZWVkIGEgcmVzb2x2ZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdGhpcy5fbmVlZHNSZWN1cnNpdmVSZXNvbHZlID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY2xlYXJDYWNoZShuYW1lc3BhY2UpIHtcbiAgICBuYW1lc3BhY2UuX25lc3RlZEFycmF5ID0gbnVsbDtcbiAgICBuYW1lc3BhY2UuX2xvb2t1cENhY2hlID0ge307XG5cbiAgICAvLyBBbHNvIGNsZWFyIHBhcmVudCBjYWNoZXMsIHNpbmNlIHRoZXkgaW5jbHVkZSBuZXN0ZWQgbG9va3Vwcy5cbiAgICB2YXIgcGFyZW50ID0gbmFtZXNwYWNlO1xuICAgIHdoaWxlKHBhcmVudCA9IHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgcGFyZW50Ll9sb29rdXBDYWNoZSA9IHt9O1xuICAgIH1cbiAgICByZXR1cm4gbmFtZXNwYWNlO1xufVxuXG4vKipcbiAqIE5lc3RlZCBvYmplY3RzIG9mIHRoaXMgbmFtZXNwYWNlIGFzIGFuIGFycmF5IGZvciBpdGVyYXRpb24uXG4gKiBAbmFtZSBOYW1lc3BhY2VCYXNlI25lc3RlZEFycmF5XG4gKiBAdHlwZSB7UmVmbGVjdGlvbk9iamVjdFtdfVxuICogQHJlYWRvbmx5XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShOYW1lc3BhY2UucHJvdG90eXBlLCBcIm5lc3RlZEFycmF5XCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmVzdGVkQXJyYXkgfHwgKHRoaXMuX25lc3RlZEFycmF5ID0gdXRpbC50b0FycmF5KHRoaXMubmVzdGVkKSk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogTmFtZXNwYWNlIGRlc2NyaXB0b3IuXG4gKiBAaW50ZXJmYWNlIElOYW1lc3BhY2VcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBOYW1lc3BhY2Ugb3B0aW9uc1xuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxBbnlOZXN0ZWRPYmplY3Q+fSBbbmVzdGVkXSBOZXN0ZWQgb2JqZWN0IGRlc2NyaXB0b3JzXG4gKi9cblxuLyoqXG4gKiBBbnkgZXh0ZW5zaW9uIGZpZWxkIGRlc2NyaXB0b3IuXG4gKiBAdHlwZWRlZiBBbnlFeHRlbnNpb25GaWVsZFxuICogQHR5cGUge0lFeHRlbnNpb25GaWVsZHxJRXh0ZW5zaW9uTWFwRmllbGR9XG4gKi9cblxuLyoqXG4gKiBBbnkgbmVzdGVkIG9iamVjdCBkZXNjcmlwdG9yLlxuICogQHR5cGVkZWYgQW55TmVzdGVkT2JqZWN0XG4gKiBAdHlwZSB7SUVudW18SVR5cGV8SVNlcnZpY2V8QW55RXh0ZW5zaW9uRmllbGR8SU5hbWVzcGFjZXxJT25lT2Z9XG4gKi9cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIG5hbWVzcGFjZSB0byBhIG5hbWVzcGFjZSBkZXNjcmlwdG9yLlxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7SU5hbWVzcGFjZX0gTmFtZXNwYWNlIGRlc2NyaXB0b3JcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcbiAgICAgICAgXCJvcHRpb25zXCIgLCB0aGlzLm9wdGlvbnMsXG4gICAgICAgIFwibmVzdGVkXCIgICwgYXJyYXlUb0pTT04odGhpcy5uZXN0ZWRBcnJheSwgdG9KU09OT3B0aW9ucylcbiAgICBdKTtcbn07XG5cbi8qKlxuICogQWRkcyBuZXN0ZWQgb2JqZWN0cyB0byB0aGlzIG5hbWVzcGFjZSBmcm9tIG5lc3RlZCBvYmplY3QgZGVzY3JpcHRvcnMuXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLEFueU5lc3RlZE9iamVjdD59IG5lc3RlZEpzb24gQW55IG5lc3RlZCBvYmplY3QgZGVzY3JpcHRvcnNcbiAqIEByZXR1cm5zIHtOYW1lc3BhY2V9IGB0aGlzYFxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLmFkZEpTT04gPSBmdW5jdGlvbiBhZGRKU09OKG5lc3RlZEpzb24pIHtcbiAgICB2YXIgbnMgPSB0aGlzO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKG5lc3RlZEpzb24pIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZXMgPSBPYmplY3Qua2V5cyhuZXN0ZWRKc29uKSwgaSA9IDAsIG5lc3RlZDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRKc29uW25hbWVzW2ldXTtcbiAgICAgICAgICAgIG5zLmFkZCggLy8gbW9zdCB0byBsZWFzdCBsaWtlbHlcbiAgICAgICAgICAgICAgICAoIG5lc3RlZC5maWVsZHMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gVHlwZS5mcm9tSlNPTlxuICAgICAgICAgICAgICAgIDogbmVzdGVkLnZhbHVlcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBFbnVtLmZyb21KU09OXG4gICAgICAgICAgICAgICAgOiBuZXN0ZWQubWV0aG9kcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBTZXJ2aWNlLmZyb21KU09OXG4gICAgICAgICAgICAgICAgOiBuZXN0ZWQuaWQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gRmllbGQuZnJvbUpTT05cbiAgICAgICAgICAgICAgICA6IE5hbWVzcGFjZS5mcm9tSlNPTiApKG5hbWVzW2ldLCBuZXN0ZWQpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuZXN0ZWQgb2JqZWN0IG9mIHRoZSBzcGVjaWZpZWQgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5lc3RlZCBvYmplY3QgbmFtZVxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R8bnVsbH0gVGhlIHJlZmxlY3Rpb24gb2JqZWN0IG9yIGBudWxsYCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5uZXN0ZWQgJiYgdGhpcy5uZXN0ZWRbbmFtZV1cbiAgICAgICAgfHwgbnVsbDtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWVzIG9mIHRoZSBuZXN0ZWQge0BsaW5rIEVudW18ZW51bX0gb2YgdGhlIHNwZWNpZmllZCBuYW1lLlxuICogVGhpcyBtZXRob2RzIGRpZmZlcnMgZnJvbSB7QGxpbmsgTmFtZXNwYWNlI2dldHxnZXR9IGluIHRoYXQgaXQgcmV0dXJucyBhbiBlbnVtJ3MgdmFsdWVzIGRpcmVjdGx5IGFuZCB0aHJvd3MgaW5zdGVhZCBvZiByZXR1cm5pbmcgYG51bGxgLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmVzdGVkIGVudW0gbmFtZVxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLG51bWJlcj59IEVudW0gdmFsdWVzXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgaXMgbm8gc3VjaCBlbnVtXG4gKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUuZ2V0RW51bSA9IGZ1bmN0aW9uIGdldEVudW0obmFtZSkge1xuICAgIGlmICh0aGlzLm5lc3RlZCAmJiB0aGlzLm5lc3RlZFtuYW1lXSBpbnN0YW5jZW9mIEVudW0pXG4gICAgICAgIHJldHVybiB0aGlzLm5lc3RlZFtuYW1lXS52YWx1ZXM7XG4gICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIGVudW06IFwiICsgbmFtZSk7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBuZXN0ZWQgb2JqZWN0IHRvIHRoaXMgbmFtZXNwYWNlLlxuICogQHBhcmFtIHtSZWZsZWN0aW9uT2JqZWN0fSBvYmplY3QgTmVzdGVkIG9iamVjdCB0byBhZGRcbiAqIEByZXR1cm5zIHtOYW1lc3BhY2V9IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgbmVzdGVkIG9iamVjdCB3aXRoIHRoaXMgbmFtZVxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChvYmplY3QpIHtcblxuICAgIGlmICghKG9iamVjdCBpbnN0YW5jZW9mIEZpZWxkICYmIG9iamVjdC5leHRlbmQgIT09IHVuZGVmaW5lZCB8fCBvYmplY3QgaW5zdGFuY2VvZiBUeXBlICB8fCBvYmplY3QgaW5zdGFuY2VvZiBPbmVPZiB8fCBvYmplY3QgaW5zdGFuY2VvZiBFbnVtIHx8IG9iamVjdCBpbnN0YW5jZW9mIFNlcnZpY2UgfHwgb2JqZWN0IGluc3RhbmNlb2YgTmFtZXNwYWNlKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwib2JqZWN0IG11c3QgYmUgYSB2YWxpZCBuZXN0ZWQgb2JqZWN0XCIpO1xuXG4gICAgaWYgKCF0aGlzLm5lc3RlZClcbiAgICAgICAgdGhpcy5uZXN0ZWQgPSB7fTtcbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHByZXYgPSB0aGlzLmdldChvYmplY3QubmFtZSk7XG4gICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICBpZiAocHJldiBpbnN0YW5jZW9mIE5hbWVzcGFjZSAmJiBvYmplY3QgaW5zdGFuY2VvZiBOYW1lc3BhY2UgJiYgIShwcmV2IGluc3RhbmNlb2YgVHlwZSB8fCBwcmV2IGluc3RhbmNlb2YgU2VydmljZSkpIHtcbiAgICAgICAgICAgICAgICAvLyByZXBsYWNlIHBsYWluIG5hbWVzcGFjZSBidXQga2VlcCBleGlzdGluZyBuZXN0ZWQgZWxlbWVudHMgYW5kIG9wdGlvbnNcbiAgICAgICAgICAgICAgICB2YXIgbmVzdGVkID0gcHJldi5uZXN0ZWRBcnJheTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5lc3RlZC5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmFkZChuZXN0ZWRbaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHByZXYpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5uZXN0ZWQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmVzdGVkID0ge307XG4gICAgICAgICAgICAgICAgb2JqZWN0LnNldE9wdGlvbnMocHJldi5vcHRpb25zLCB0cnVlKTtcblxuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJkdXBsaWNhdGUgbmFtZSAnXCIgKyBvYmplY3QubmFtZSArIFwiJyBpbiBcIiArIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMubmVzdGVkW29iamVjdC5uYW1lXSA9IG9iamVjdDtcblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUeXBlIHx8IHRoaXMgaW5zdGFuY2VvZiBTZXJ2aWNlIHx8IHRoaXMgaW5zdGFuY2VvZiBFbnVtIHx8IHRoaXMgaW5zdGFuY2VvZiBGaWVsZCkpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHBhY2thZ2Ugb3IgYSByb290IG5hbWVzcGFjZS5cbiAgICAgICAgaWYgKCFvYmplY3QuX2VkaXRpb24pIHtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHNvbWUgZWRpdGlvbiBpcyBzZXQgaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlbiBzcGVjaWZpZWQuXG4gICAgICAgICAgICBvYmplY3QuX2VkaXRpb24gPSBvYmplY3QuX2RlZmF1bHRFZGl0aW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fbmVlZHNSZWN1cnNpdmVGZWF0dXJlUmVzb2x1dGlvbiA9IHRydWU7XG4gICAgdGhpcy5fbmVlZHNSZWN1cnNpdmVSZXNvbHZlID0gdHJ1ZTtcblxuICAgIC8vIEFsc28gY2xlYXIgcGFyZW50IGNhY2hlcywgc2luY2UgdGhleSBuZWVkIHRvIHJlY3Vyc2UgZG93bi5cbiAgICB2YXIgcGFyZW50ID0gdGhpcztcbiAgICB3aGlsZShwYXJlbnQgPSBwYXJlbnQucGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5fbmVlZHNSZWN1cnNpdmVGZWF0dXJlUmVzb2x1dGlvbiA9IHRydWU7XG4gICAgICAgIHBhcmVudC5fbmVlZHNSZWN1cnNpdmVSZXNvbHZlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBvYmplY3Qub25BZGQodGhpcyk7XG4gICAgcmV0dXJuIGNsZWFyQ2FjaGUodGhpcyk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSBuZXN0ZWQgb2JqZWN0IGZyb20gdGhpcyBuYW1lc3BhY2UuXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IG9iamVjdCBOZXN0ZWQgb2JqZWN0IHRvIHJlbW92ZVxuICogQHJldHVybnMge05hbWVzcGFjZX0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxuICogQHRocm93cyB7RXJyb3J9IElmIGBvYmplY3RgIGlzIG5vdCBhIG1lbWJlciBvZiB0aGlzIG5hbWVzcGFjZVxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShvYmplY3QpIHtcblxuICAgIGlmICghKG9iamVjdCBpbnN0YW5jZW9mIFJlZmxlY3Rpb25PYmplY3QpKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJvYmplY3QgbXVzdCBiZSBhIFJlZmxlY3Rpb25PYmplY3RcIik7XG4gICAgaWYgKG9iamVjdC5wYXJlbnQgIT09IHRoaXMpXG4gICAgICAgIHRocm93IEVycm9yKG9iamVjdCArIFwiIGlzIG5vdCBhIG1lbWJlciBvZiBcIiArIHRoaXMpO1xuXG4gICAgZGVsZXRlIHRoaXMubmVzdGVkW29iamVjdC5uYW1lXTtcbiAgICBpZiAoIU9iamVjdC5rZXlzKHRoaXMubmVzdGVkKS5sZW5ndGgpXG4gICAgICAgIHRoaXMubmVzdGVkID0gdW5kZWZpbmVkO1xuXG4gICAgb2JqZWN0Lm9uUmVtb3ZlKHRoaXMpO1xuICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xufTtcblxuLyoqXG4gKiBEZWZpbmVzIGFkZGl0aWFsIG5hbWVzcGFjZXMgd2l0aGluIHRoaXMgb25lIGlmIG5vdCB5ZXQgZXhpc3RpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0aCBQYXRoIHRvIGNyZWF0ZVxuICogQHBhcmFtIHsqfSBbanNvbl0gTmVzdGVkIHR5cGVzIHRvIGNyZWF0ZSBmcm9tIEpTT05cbiAqIEByZXR1cm5zIHtOYW1lc3BhY2V9IFBvaW50ZXIgdG8gdGhlIGxhc3QgbmFtZXNwYWNlIGNyZWF0ZWQgb3IgYHRoaXNgIGlmIHBhdGggaXMgZW1wdHlcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5kZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUocGF0aCwganNvbikge1xuXG4gICAgaWYgKHV0aWwuaXNTdHJpbmcocGF0aCkpXG4gICAgICAgIHBhdGggPSBwYXRoLnNwbGl0KFwiLlwiKTtcbiAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShwYXRoKSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiaWxsZWdhbCBwYXRoXCIpO1xuICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoICYmIHBhdGhbMF0gPT09IFwiXCIpXG4gICAgICAgIHRocm93IEVycm9yKFwicGF0aCBtdXN0IGJlIHJlbGF0aXZlXCIpO1xuXG4gICAgdmFyIHB0ciA9IHRoaXM7XG4gICAgd2hpbGUgKHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcGFydCA9IHBhdGguc2hpZnQoKTtcbiAgICAgICAgaWYgKHB0ci5uZXN0ZWQgJiYgcHRyLm5lc3RlZFtwYXJ0XSkge1xuICAgICAgICAgICAgcHRyID0gcHRyLm5lc3RlZFtwYXJ0XTtcbiAgICAgICAgICAgIGlmICghKHB0ciBpbnN0YW5jZW9mIE5hbWVzcGFjZSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJwYXRoIGNvbmZsaWN0cyB3aXRoIG5vbi1uYW1lc3BhY2Ugb2JqZWN0c1wiKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBwdHIuYWRkKHB0ciA9IG5ldyBOYW1lc3BhY2UocGFydCkpO1xuICAgIH1cbiAgICBpZiAoanNvbilcbiAgICAgICAgcHRyLmFkZEpTT04oanNvbik7XG4gICAgcmV0dXJuIHB0cjtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhpcyBuYW1lc3BhY2UncyBhbmQgYWxsIGl0cyBuZXN0ZWQgb2JqZWN0cycgdHlwZSByZWZlcmVuY2VzLiBVc2VmdWwgdG8gdmFsaWRhdGUgYSByZWZsZWN0aW9uIHRyZWUsIGJ1dCBjb21lcyBhdCBhIGNvc3QuXG4gKiBAcmV0dXJucyB7TmFtZXNwYWNlfSBgdGhpc2BcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5yZXNvbHZlQWxsID0gZnVuY3Rpb24gcmVzb2x2ZUFsbCgpIHtcbiAgICBpZiAoIXRoaXMuX25lZWRzUmVjdXJzaXZlUmVzb2x2ZSkgcmV0dXJuIHRoaXM7XG5cbiAgICB2YXIgbmVzdGVkID0gdGhpcy5uZXN0ZWRBcnJheSwgaSA9IDA7XG4gICAgdGhpcy5yZXNvbHZlKCk7XG4gICAgd2hpbGUgKGkgPCBuZXN0ZWQubGVuZ3RoKVxuICAgICAgICBpZiAobmVzdGVkW2ldIGluc3RhbmNlb2YgTmFtZXNwYWNlKVxuICAgICAgICAgICAgbmVzdGVkW2krK10ucmVzb2x2ZUFsbCgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBuZXN0ZWRbaSsrXS5yZXNvbHZlKCk7XG4gICAgdGhpcy5fbmVlZHNSZWN1cnNpdmVSZXNvbHZlID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLl9yZXNvbHZlRmVhdHVyZXNSZWN1cnNpdmUgPSBmdW5jdGlvbiBfcmVzb2x2ZUZlYXR1cmVzUmVjdXJzaXZlKGVkaXRpb24pIHtcbiAgICBpZiAoIXRoaXMuX25lZWRzUmVjdXJzaXZlRmVhdHVyZVJlc29sdXRpb24pIHJldHVybiB0aGlzO1xuICAgIHRoaXMuX25lZWRzUmVjdXJzaXZlRmVhdHVyZVJlc29sdXRpb24gPSBmYWxzZTtcblxuICAgIGVkaXRpb24gPSB0aGlzLl9lZGl0aW9uIHx8IGVkaXRpb247XG5cbiAgICBSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5fcmVzb2x2ZUZlYXR1cmVzUmVjdXJzaXZlLmNhbGwodGhpcywgZWRpdGlvbik7XG4gICAgdGhpcy5uZXN0ZWRBcnJheS5mb3JFYWNoKG5lc3RlZCA9PiB7XG4gICAgICAgIG5lc3RlZC5fcmVzb2x2ZUZlYXR1cmVzUmVjdXJzaXZlKGVkaXRpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSBsb29rcyB1cCB0aGUgcmVmbGVjdGlvbiBvYmplY3QgbWF0Y2hpbmcgdGhlIHNwZWNpZmllZCBwYXRoIGluIHRoZSBzY29wZSBvZiB0aGlzIG5hbWVzcGFjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxuICogQHBhcmFtIHsqfEFycmF5LjwqPn0gZmlsdGVyVHlwZXMgRmlsdGVyIHR5cGVzLCBhbnkgY29tYmluYXRpb24gb2YgdGhlIGNvbnN0cnVjdG9ycyBvZiBgcHJvdG9idWYuVHlwZWAsIGBwcm90b2J1Zi5FbnVtYCwgYHByb3RvYnVmLlNlcnZpY2VgIGV0Yy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmVudEFscmVhZHlDaGVja2VkPWZhbHNlXSBJZiBrbm93biwgd2hldGhlciB0aGUgcGFyZW50IGhhcyBhbHJlYWR5IGJlZW4gY2hlY2tlZFxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R8bnVsbH0gTG9va2VkIHVwIG9iamVjdCBvciBgbnVsbGAgaWYgbm9uZSBjb3VsZCBiZSBmb3VuZFxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLmxvb2t1cCA9IGZ1bmN0aW9uIGxvb2t1cChwYXRoLCBmaWx0ZXJUeXBlcywgcGFyZW50QWxyZWFkeUNoZWNrZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0eXBlb2YgZmlsdGVyVHlwZXMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIHBhcmVudEFscmVhZHlDaGVja2VkID0gZmlsdGVyVHlwZXM7XG4gICAgICAgIGZpbHRlclR5cGVzID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoZmlsdGVyVHlwZXMgJiYgIUFycmF5LmlzQXJyYXkoZmlsdGVyVHlwZXMpKVxuICAgICAgICBmaWx0ZXJUeXBlcyA9IFsgZmlsdGVyVHlwZXMgXTtcblxuICAgIGlmICh1dGlsLmlzU3RyaW5nKHBhdGgpICYmIHBhdGgubGVuZ3RoKSB7XG4gICAgICAgIGlmIChwYXRoID09PSBcIi5cIilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJvb3Q7XG4gICAgICAgIHBhdGggPSBwYXRoLnNwbGl0KFwiLlwiKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICB2YXIgZmxhdFBhdGggPSBwYXRoLmpvaW4oXCIuXCIpO1xuXG4gICAgLy8gU3RhcnQgYXQgcm9vdCBpZiBwYXRoIGlzIGFic29sdXRlXG4gICAgaWYgKHBhdGhbMF0gPT09IFwiXCIpXG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QubG9va3VwKHBhdGguc2xpY2UoMSksIGZpbHRlclR5cGVzKTtcblxuICAgIC8vIEVhcmx5IGJhaWxvdXQgZm9yIG9iamVjdHMgd2l0aCBtYXRjaGluZyBhYnNvbHV0ZSBwYXRoc1xuICAgIHZhciBmb3VuZCA9IHRoaXMucm9vdC5fZnVsbHlRdWFsaWZpZWRPYmplY3RzW1wiLlwiICsgZmxhdFBhdGhdO1xuICAgIGlmIChmb3VuZCAmJiAoIWZpbHRlclR5cGVzIHx8IGZpbHRlclR5cGVzLmluZGV4T2YoZm91bmQuY29uc3RydWN0b3IpID4gLTEpKSB7XG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG5cbiAgICAvLyBEbyBhIHJlZ3VsYXIgbG9va3VwIGF0IHRoaXMgbmFtZXNwYWNlIGFuZCBiZWxvd1xuICAgIGZvdW5kID0gdGhpcy5fbG9va3VwSW1wbChwYXRoLCBmbGF0UGF0aCk7XG4gICAgaWYgKGZvdW5kICYmICghZmlsdGVyVHlwZXMgfHwgZmlsdGVyVHlwZXMuaW5kZXhPZihmb3VuZC5jb25zdHJ1Y3RvcikgPiAtMSkpIHtcbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnRBbHJlYWR5Q2hlY2tlZClcbiAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAvLyBJZiB0aGVyZSBoYXNuJ3QgYmVlbiBhIG1hdGNoLCB3YWxrIHVwIHRoZSB0cmVlIGFuZCBsb29rIG1vcmUgYnJvYWRseVxuICAgIHZhciBjdXJyZW50ID0gdGhpcztcbiAgICB3aGlsZSAoY3VycmVudC5wYXJlbnQpIHtcbiAgICAgICAgZm91bmQgPSBjdXJyZW50LnBhcmVudC5fbG9va3VwSW1wbChwYXRoLCBmbGF0UGF0aCk7XG4gICAgICAgIGlmIChmb3VuZCAmJiAoIWZpbHRlclR5cGVzIHx8IGZpbHRlclR5cGVzLmluZGV4T2YoZm91bmQuY29uc3RydWN0b3IpID4gLTEpKSB7XG4gICAgICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogSW50ZXJuYWwgaGVscGVyIGZvciBsb29rdXAgdGhhdCBoYW5kbGVzIHNlYXJjaGluZyBqdXN0IGF0IHRoaXMgbmFtZXNwYWNlIGFuZCBiZWxvdyBhbG9uZyB3aXRoIGNhY2hpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxuICogQHBhcmFtIHtzdHJpbmd9IGZsYXRQYXRoIEZsYXR0ZW5lZCB2ZXJzaW9uIG9mIHRoZSBwYXRoIHRvIHVzZSBhcyBhIGNhY2hlIGtleVxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R8bnVsbH0gTG9va2VkIHVwIG9iamVjdCBvciBgbnVsbGAgaWYgbm9uZSBjb3VsZCBiZSBmb3VuZFxuICogQHByaXZhdGVcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5fbG9va3VwSW1wbCA9IGZ1bmN0aW9uIGxvb2t1cChwYXRoLCBmbGF0UGF0aCkge1xuICAgIGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9sb29rdXBDYWNoZSwgZmxhdFBhdGgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb29rdXBDYWNoZVtmbGF0UGF0aF07XG4gICAgfVxuXG4gICAgLy8gVGVzdCBpZiB0aGUgZmlyc3QgcGFydCBtYXRjaGVzIGFueSBuZXN0ZWQgb2JqZWN0LCBhbmQgaWYgc28sIHRyYXZlcnNlIGlmIHBhdGggY29udGFpbnMgbW9yZVxuICAgIHZhciBmb3VuZCA9IHRoaXMuZ2V0KHBhdGhbMF0pO1xuICAgIHZhciBleGFjdCA9IG51bGw7XG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgZXhhY3QgPSBmb3VuZDtcbiAgICAgICAgfSBlbHNlIGlmIChmb3VuZCBpbnN0YW5jZW9mIE5hbWVzcGFjZSkge1xuICAgICAgICAgICAgcGF0aCA9IHBhdGguc2xpY2UoMSk7XG4gICAgICAgICAgICBleGFjdCA9IGZvdW5kLl9sb29rdXBJbXBsKHBhdGgsIHBhdGguam9pbihcIi5cIikpO1xuICAgICAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UgdHJ5IGVhY2ggbmVzdGVkIG5hbWVzcGFjZVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5uZXN0ZWRBcnJheS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGlmICh0aGlzLl9uZXN0ZWRBcnJheVtpXSBpbnN0YW5jZW9mIE5hbWVzcGFjZSAmJiAoZm91bmQgPSB0aGlzLl9uZXN0ZWRBcnJheVtpXS5fbG9va3VwSW1wbChwYXRoLCBmbGF0UGF0aCkpKVxuICAgICAgICAgICAgICAgIGV4YWN0ID0gZm91bmQ7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoaXMgZXZlbiB3aGVuIG51bGwsIHNvIHRoYXQgd2hlbiB3ZSB3YWxrIHVwIHRoZSB0cmVlIHdlIGNhbiBxdWlja2x5IGJhaWwgb24gcmVwZWF0ZWQgY2hlY2tzIGJhY2sgZG93bi5cbiAgICB0aGlzLl9sb29rdXBDYWNoZVtmbGF0UGF0aF0gPSBleGFjdDtcbiAgICByZXR1cm4gZXhhY3Q7XG59O1xuXG4vKipcbiAqIExvb2tzIHVwIHRoZSByZWZsZWN0aW9uIG9iamVjdCBhdCB0aGUgc3BlY2lmaWVkIHBhdGgsIHJlbGF0aXZlIHRvIHRoaXMgbmFtZXNwYWNlLlxuICogQG5hbWUgTmFtZXNwYWNlQmFzZSNsb29rdXBcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGggUGF0aCB0byBsb29rIHVwXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJlbnRBbHJlYWR5Q2hlY2tlZD1mYWxzZV0gV2hldGhlciB0aGUgcGFyZW50IGhhcyBhbHJlYWR5IGJlZW4gY2hlY2tlZFxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R8bnVsbH0gTG9va2VkIHVwIG9iamVjdCBvciBgbnVsbGAgaWYgbm9uZSBjb3VsZCBiZSBmb3VuZFxuICogQHZhcmlhdGlvbiAyXG4gKi9cbi8vIGxvb2t1cChwYXRoOiBzdHJpbmcsIFtwYXJlbnRBbHJlYWR5Q2hlY2tlZDogYm9vbGVhbl0pXG5cbi8qKlxuICogTG9va3MgdXAgdGhlIHtAbGluayBUeXBlfHR5cGV9IGF0IHRoZSBzcGVjaWZpZWQgcGF0aCwgcmVsYXRpdmUgdG8gdGhpcyBuYW1lc3BhY2UuXG4gKiBCZXNpZGVzIGl0cyBzaWduYXR1cmUsIHRoaXMgbWV0aG9kcyBkaWZmZXJzIGZyb20ge0BsaW5rIE5hbWVzcGFjZSNsb29rdXB8bG9va3VwfSBpbiB0aGF0IGl0IHRocm93cyBpbnN0ZWFkIG9mIHJldHVybmluZyBgbnVsbGAuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGF0aCBQYXRoIHRvIGxvb2sgdXBcbiAqIEByZXR1cm5zIHtUeXBlfSBMb29rZWQgdXAgdHlwZVxuICogQHRocm93cyB7RXJyb3J9IElmIGBwYXRoYCBkb2VzIG5vdCBwb2ludCB0byBhIHR5cGVcbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5sb29rdXBUeXBlID0gZnVuY3Rpb24gbG9va3VwVHlwZShwYXRoKSB7XG4gICAgdmFyIGZvdW5kID0gdGhpcy5sb29rdXAocGF0aCwgWyBUeXBlIF0pO1xuICAgIGlmICghZm91bmQpXG4gICAgICAgIHRocm93IEVycm9yKFwibm8gc3VjaCB0eXBlOiBcIiArIHBhdGgpO1xuICAgIHJldHVybiBmb3VuZDtcbn07XG5cbi8qKlxuICogTG9va3MgdXAgdGhlIHZhbHVlcyBvZiB0aGUge0BsaW5rIEVudW18ZW51bX0gYXQgdGhlIHNwZWNpZmllZCBwYXRoLCByZWxhdGl2ZSB0byB0aGlzIG5hbWVzcGFjZS5cbiAqIEJlc2lkZXMgaXRzIHNpZ25hdHVyZSwgdGhpcyBtZXRob2RzIGRpZmZlcnMgZnJvbSB7QGxpbmsgTmFtZXNwYWNlI2xvb2t1cHxsb29rdXB9IGluIHRoYXQgaXQgdGhyb3dzIGluc3RlYWQgb2YgcmV0dXJuaW5nIGBudWxsYC5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxuICogQHJldHVybnMge0VudW19IExvb2tlZCB1cCBlbnVtXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYHBhdGhgIGRvZXMgbm90IHBvaW50IHRvIGFuIGVudW1cbiAqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5sb29rdXBFbnVtID0gZnVuY3Rpb24gbG9va3VwRW51bShwYXRoKSB7XG4gICAgdmFyIGZvdW5kID0gdGhpcy5sb29rdXAocGF0aCwgWyBFbnVtIF0pO1xuICAgIGlmICghZm91bmQpXG4gICAgICAgIHRocm93IEVycm9yKFwibm8gc3VjaCBFbnVtICdcIiArIHBhdGggKyBcIicgaW4gXCIgKyB0aGlzKTtcbiAgICByZXR1cm4gZm91bmQ7XG59O1xuXG4vKipcbiAqIExvb2tzIHVwIHRoZSB7QGxpbmsgVHlwZXx0eXBlfSBvciB7QGxpbmsgRW51bXxlbnVtfSBhdCB0aGUgc3BlY2lmaWVkIHBhdGgsIHJlbGF0aXZlIHRvIHRoaXMgbmFtZXNwYWNlLlxuICogQmVzaWRlcyBpdHMgc2lnbmF0dXJlLCB0aGlzIG1ldGhvZHMgZGlmZmVycyBmcm9tIHtAbGluayBOYW1lc3BhY2UjbG9va3VwfGxvb2t1cH0gaW4gdGhhdCBpdCB0aHJvd3MgaW5zdGVhZCBvZiByZXR1cm5pbmcgYG51bGxgLlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGggUGF0aCB0byBsb29rIHVwXG4gKiBAcmV0dXJucyB7VHlwZX0gTG9va2VkIHVwIHR5cGUgb3IgZW51bVxuICogQHRocm93cyB7RXJyb3J9IElmIGBwYXRoYCBkb2VzIG5vdCBwb2ludCB0byBhIHR5cGUgb3IgZW51bVxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLmxvb2t1cFR5cGVPckVudW0gPSBmdW5jdGlvbiBsb29rdXBUeXBlT3JFbnVtKHBhdGgpIHtcbiAgICB2YXIgZm91bmQgPSB0aGlzLmxvb2t1cChwYXRoLCBbIFR5cGUsIEVudW0gXSk7XG4gICAgaWYgKCFmb3VuZClcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIFR5cGUgb3IgRW51bSAnXCIgKyBwYXRoICsgXCInIGluIFwiICsgdGhpcyk7XG4gICAgcmV0dXJuIGZvdW5kO1xufTtcblxuLyoqXG4gKiBMb29rcyB1cCB0aGUge0BsaW5rIFNlcnZpY2V8c2VydmljZX0gYXQgdGhlIHNwZWNpZmllZCBwYXRoLCByZWxhdGl2ZSB0byB0aGlzIG5hbWVzcGFjZS5cbiAqIEJlc2lkZXMgaXRzIHNpZ25hdHVyZSwgdGhpcyBtZXRob2RzIGRpZmZlcnMgZnJvbSB7QGxpbmsgTmFtZXNwYWNlI2xvb2t1cHxsb29rdXB9IGluIHRoYXQgaXQgdGhyb3dzIGluc3RlYWQgb2YgcmV0dXJuaW5nIGBudWxsYC5cbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxuICogQHJldHVybnMge1NlcnZpY2V9IExvb2tlZCB1cCBzZXJ2aWNlXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYHBhdGhgIGRvZXMgbm90IHBvaW50IHRvIGEgc2VydmljZVxuICovXG5OYW1lc3BhY2UucHJvdG90eXBlLmxvb2t1cFNlcnZpY2UgPSBmdW5jdGlvbiBsb29rdXBTZXJ2aWNlKHBhdGgpIHtcbiAgICB2YXIgZm91bmQgPSB0aGlzLmxvb2t1cChwYXRoLCBbIFNlcnZpY2UgXSk7XG4gICAgaWYgKCFmb3VuZClcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIFNlcnZpY2UgJ1wiICsgcGF0aCArIFwiJyBpbiBcIiArIHRoaXMpO1xuICAgIHJldHVybiBmb3VuZDtcbn07XG5cbi8vIFNldHMgdXAgY3ljbGljIGRlcGVuZGVuY2llcyAoY2FsbGVkIGluIGluZGV4LWxpZ2h0KVxuTmFtZXNwYWNlLl9jb25maWd1cmUgPSBmdW5jdGlvbihUeXBlXywgU2VydmljZV8sIEVudW1fKSB7XG4gICAgVHlwZSAgICA9IFR5cGVfO1xuICAgIFNlcnZpY2UgPSBTZXJ2aWNlXztcbiAgICBFbnVtICAgID0gRW51bV87XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJOYW1lc3BhY2UiLCJSZWZsZWN0aW9uT2JqZWN0IiwicmVxdWlyZSIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiY2xhc3NOYW1lIiwiRmllbGQiLCJ1dGlsIiwiT25lT2YiLCJUeXBlIiwiU2VydmljZSIsIkVudW0iLCJmcm9tSlNPTiIsIm5hbWUiLCJqc29uIiwib3B0aW9ucyIsImFkZEpTT04iLCJuZXN0ZWQiLCJhcnJheVRvSlNPTiIsImFycmF5IiwidG9KU09OT3B0aW9ucyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm9iaiIsImkiLCJ0b0pTT04iLCJpc1Jlc2VydmVkSWQiLCJyZXNlcnZlZCIsImlkIiwiaXNSZXNlcnZlZE5hbWUiLCJjYWxsIiwiX25lc3RlZEFycmF5IiwiX2xvb2t1cENhY2hlIiwiX25lZWRzUmVjdXJzaXZlRmVhdHVyZVJlc29sdXRpb24iLCJfbmVlZHNSZWN1cnNpdmVSZXNvbHZlIiwiY2xlYXJDYWNoZSIsIm5hbWVzcGFjZSIsInBhcmVudCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwidG9BcnJheSIsInRvT2JqZWN0IiwibmVzdGVkQXJyYXkiLCJuZXN0ZWRKc29uIiwibnMiLCJuYW1lcyIsImtleXMiLCJhZGQiLCJmaWVsZHMiLCJ2YWx1ZXMiLCJtZXRob2RzIiwiZ2V0RW51bSIsIkVycm9yIiwib2JqZWN0IiwiZXh0ZW5kIiwiVHlwZUVycm9yIiwicHJldiIsInJlbW92ZSIsInNldE9wdGlvbnMiLCJfZWRpdGlvbiIsIl9kZWZhdWx0RWRpdGlvbiIsIm9uQWRkIiwib25SZW1vdmUiLCJkZWZpbmUiLCJwYXRoIiwiaXNTdHJpbmciLCJzcGxpdCIsIkFycmF5IiwiaXNBcnJheSIsInB0ciIsInBhcnQiLCJzaGlmdCIsInJlc29sdmVBbGwiLCJyZXNvbHZlIiwiX3Jlc29sdmVGZWF0dXJlc1JlY3Vyc2l2ZSIsImVkaXRpb24iLCJmb3JFYWNoIiwibG9va3VwIiwiZmlsdGVyVHlwZXMiLCJwYXJlbnRBbHJlYWR5Q2hlY2tlZCIsInJvb3QiLCJmbGF0UGF0aCIsImpvaW4iLCJzbGljZSIsImZvdW5kIiwiX2Z1bGx5UXVhbGlmaWVkT2JqZWN0cyIsImluZGV4T2YiLCJfbG9va3VwSW1wbCIsImN1cnJlbnQiLCJoYXNPd25Qcm9wZXJ0eSIsImV4YWN0IiwibG9va3VwVHlwZSIsImxvb2t1cEVudW0iLCJsb29rdXBUeXBlT3JFbnVtIiwibG9va3VwU2VydmljZSIsIl9jb25maWd1cmUiLCJUeXBlXyIsIlNlcnZpY2VfIiwiRW51bV8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/namespace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/object.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/object.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = ReflectionObject;\nReflectionObject.className = \"ReflectionObject\";\nconst OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/oneof.js\");\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\nvar Root; // cyclic\n/* eslint-disable no-warning-comments */ // TODO: Replace with embedded proto.\nvar editions2023Defaults = {\n    enum_type: \"OPEN\",\n    field_presence: \"EXPLICIT\",\n    json_format: \"ALLOW\",\n    message_encoding: \"LENGTH_PREFIXED\",\n    repeated_field_encoding: \"PACKED\",\n    utf8_validation: \"VERIFY\"\n};\nvar proto2Defaults = {\n    enum_type: \"CLOSED\",\n    field_presence: \"EXPLICIT\",\n    json_format: \"LEGACY_BEST_EFFORT\",\n    message_encoding: \"LENGTH_PREFIXED\",\n    repeated_field_encoding: \"EXPANDED\",\n    utf8_validation: \"NONE\"\n};\nvar proto3Defaults = {\n    enum_type: \"OPEN\",\n    field_presence: \"IMPLICIT\",\n    json_format: \"ALLOW\",\n    message_encoding: \"LENGTH_PREFIXED\",\n    repeated_field_encoding: \"PACKED\",\n    utf8_validation: \"VERIFY\"\n};\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */ function ReflectionObject(name, options) {\n    if (!util.isString(name)) throw TypeError(\"name must be a string\");\n    if (options && !util.isObject(options)) throw TypeError(\"options must be an object\");\n    /**\n     * Options.\n     * @type {Object.<string,*>|undefined}\n     */ this.options = options; // toJSON\n    /**\n     * Parsed Options.\n     * @type {Array.<Object.<string,*>>|undefined}\n     */ this.parsedOptions = null;\n    /**\n     * Unique name within its namespace.\n     * @type {string}\n     */ this.name = name;\n    /**\n     * The edition specified for this object.  Only relevant for top-level objects.\n     * @type {string}\n     * @private\n     */ this._edition = null;\n    /**\n     * The default edition to use for this object if none is specified.  For legacy reasons,\n     * this is proto2 except in the JSON parsing case where it was proto3.\n     * @type {string}\n     * @private\n     */ this._defaultEdition = \"proto2\";\n    /**\n     * Resolved Features.\n     * @type {object}\n     * @private\n     */ this._features = {};\n    /**\n     * Whether or not features have been resolved.\n     * @type {boolean}\n     * @private\n     */ this._featuresResolved = false;\n    /**\n     * Parent namespace.\n     * @type {Namespace|null}\n     */ this.parent = null;\n    /**\n     * Whether already resolved or not.\n     * @type {boolean}\n     */ this.resolved = false;\n    /**\n     * Comment text, if any.\n     * @type {string|null}\n     */ this.comment = null;\n    /**\n     * Defining file name.\n     * @type {string|null}\n     */ this.filename = null;\n}\nObject.defineProperties(ReflectionObject.prototype, {\n    /**\n     * Reference to the root namespace.\n     * @name ReflectionObject#root\n     * @type {Root}\n     * @readonly\n     */ root: {\n        get: function() {\n            var ptr = this;\n            while(ptr.parent !== null)ptr = ptr.parent;\n            return ptr;\n        }\n    },\n    /**\n     * Full name including leading dot.\n     * @name ReflectionObject#fullName\n     * @type {string}\n     * @readonly\n     */ fullName: {\n        get: function() {\n            var path = [\n                this.name\n            ], ptr = this.parent;\n            while(ptr){\n                path.unshift(ptr.name);\n                ptr = ptr.parent;\n            }\n            return path.join(\".\");\n        }\n    }\n});\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */ ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\n    throw Error(); // not implemented, shouldn't happen\n};\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */ ReflectionObject.prototype.onAdd = function onAdd(parent) {\n    if (this.parent && this.parent !== parent) this.parent.remove(this);\n    this.parent = parent;\n    this.resolved = false;\n    var root = parent.root;\n    if (root instanceof Root) root._handleAdd(this);\n};\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */ ReflectionObject.prototype.onRemove = function onRemove(parent) {\n    var root = parent.root;\n    if (root instanceof Root) root._handleRemove(this);\n    this.parent = null;\n    this.resolved = false;\n};\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */ ReflectionObject.prototype.resolve = function resolve() {\n    if (this.resolved) return this;\n    if (this.root instanceof Root) this.resolved = true; // only if part of a root\n    return this;\n};\n/**\n * Resolves this objects editions features.\n * @param {string} edition The edition we're currently resolving for.\n * @returns {ReflectionObject} `this`\n */ ReflectionObject.prototype._resolveFeaturesRecursive = function _resolveFeaturesRecursive(edition) {\n    return this._resolveFeatures(this._edition || edition);\n};\n/**\n * Resolves child features from parent features\n * @param {string} edition The edition we're currently resolving for.\n * @returns {undefined}\n */ ReflectionObject.prototype._resolveFeatures = function _resolveFeatures(edition) {\n    if (this._featuresResolved) {\n        return;\n    }\n    var defaults = {};\n    /* istanbul ignore if */ if (!edition) {\n        throw new Error(\"Unknown edition for \" + this.fullName);\n    }\n    var protoFeatures = Object.assign(this.options ? Object.assign({}, this.options.features) : {}, this._inferLegacyProtoFeatures(edition));\n    if (this._edition) {\n        // For a namespace marked with a specific edition, reset defaults.\n        /* istanbul ignore else */ if (edition === \"proto2\") {\n            defaults = Object.assign({}, proto2Defaults);\n        } else if (edition === \"proto3\") {\n            defaults = Object.assign({}, proto3Defaults);\n        } else if (edition === \"2023\") {\n            defaults = Object.assign({}, editions2023Defaults);\n        } else {\n            throw new Error(\"Unknown edition: \" + edition);\n        }\n        this._features = Object.assign(defaults, protoFeatures || {});\n        this._featuresResolved = true;\n        return;\n    }\n    // fields in Oneofs aren't actually children of them, so we have to\n    // special-case it\n    /* istanbul ignore else */ if (this.partOf instanceof OneOf) {\n        var lexicalParentFeaturesCopy = Object.assign({}, this.partOf._features);\n        this._features = Object.assign(lexicalParentFeaturesCopy, protoFeatures || {});\n    } else if (this.declaringField) {\n    // Skip feature resolution of sister fields.\n    } else if (this.parent) {\n        var parentFeaturesCopy = Object.assign({}, this.parent._features);\n        this._features = Object.assign(parentFeaturesCopy, protoFeatures || {});\n    } else {\n        throw new Error(\"Unable to find a parent for \" + this.fullName);\n    }\n    if (this.extensionField) {\n        // Sister fields should have the same features as their extensions.\n        this.extensionField._features = this._features;\n    }\n    this._featuresResolved = true;\n};\n/**\n * Infers features from legacy syntax that may have been specified differently.\n * in older editions.\n * @param {string|undefined} edition The edition this proto is on, or undefined if pre-editions\n * @returns {object} The feature values to override\n */ ReflectionObject.prototype._inferLegacyProtoFeatures = function _inferLegacyProtoFeatures() {\n    return {};\n};\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */ ReflectionObject.prototype.getOption = function getOption(name) {\n    if (this.options) return this.options[name];\n    return undefined;\n};\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean|undefined} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */ ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (!this.options) this.options = {};\n    if (/^features\\./.test(name)) {\n        util.setProperty(this.options, name, value, ifNotSet);\n    } else if (!ifNotSet || this.options[name] === undefined) {\n        if (this.getOption(name) !== value) this.resolved = false;\n        this.options[name] = value;\n    }\n    return this;\n};\n/**\n * Sets a parsed option.\n * @param {string} name parsed Option name\n * @param {*} value Option value\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\n * @returns {ReflectionObject} `this`\n */ ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n    if (!this.parsedOptions) {\n        this.parsedOptions = [];\n    }\n    var parsedOptions = this.parsedOptions;\n    if (propName) {\n        // If setting a sub property of an option then try to merge it\n        // with an existing option\n        var opt = parsedOptions.find(function(opt) {\n            return Object.prototype.hasOwnProperty.call(opt, name);\n        });\n        if (opt) {\n            // If we found an existing option - just merge the property value\n            // (If it's a feature, will just write over)\n            var newValue = opt[name];\n            util.setProperty(newValue, propName, value);\n        } else {\n            // otherwise, create a new option, set its property and add it to the list\n            opt = {};\n            opt[name] = util.setProperty({}, propName, value);\n            parsedOptions.push(opt);\n        }\n    } else {\n        // Always create a new option when setting the value of the option itself\n        var newOpt = {};\n        newOpt[name] = value;\n        parsedOptions.push(newOpt);\n    }\n    return this;\n};\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */ ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n    if (options) for(var keys = Object.keys(options), i = 0; i < keys.length; ++i)this.setOption(keys[i], options[keys[i]], ifNotSet);\n    return this;\n};\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */ ReflectionObject.prototype.toString = function toString() {\n    var className = this.constructor.className, fullName = this.fullName;\n    if (fullName.length) return className + \" \" + fullName;\n    return className;\n};\n/**\n * Converts the edition this object is pinned to for JSON format.\n * @returns {string|undefined} The edition string for JSON representation\n */ ReflectionObject.prototype._editionToJSON = function _editionToJSON() {\n    if (!this._edition || this._edition === \"proto3\") {\n        // Avoid emitting proto3 since we need to default to it for backwards\n        // compatibility anyway.\n        return undefined;\n    }\n    return this._edition;\n};\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function(Root_) {\n    Root = Root_;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/oneof.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/oneof.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = OneOf;\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/object.js\");\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/field.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */ function OneOf(name, fieldNames, options, comment) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n    /* istanbul ignore if */ if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError(\"fieldNames must be an Array\");\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */ this.oneof = fieldNames || []; // toJSON, marker\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */ this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */ this.comment = comment;\n}\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */ /**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */ OneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options, json.comment);\n};\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */ OneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\",\n        this.options,\n        \"oneof\",\n        this.oneof,\n        \"comment\",\n        keepComments ? this.comment : undefined\n    ]);\n};\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */ function addFieldsToParent(oneof) {\n    if (oneof.parent) {\n        for(var i = 0; i < oneof.fieldsArray.length; ++i)if (!oneof.fieldsArray[i].parent) oneof.parent.add(oneof.fieldsArray[i]);\n    }\n}\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */ OneOf.prototype.add = function add(field) {\n    /* istanbul ignore if */ if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n    if (field.parent && field.parent !== this.parent) field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */ OneOf.prototype.remove = function remove(field) {\n    /* istanbul ignore if */ if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n    var index = this.fieldsArray.indexOf(field);\n    /* istanbul ignore if */ if (index < 0) throw Error(field + \" is not a member of \" + this);\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n    /* istanbul ignore else */ if (index > -1) this.oneof.splice(index, 1);\n    field.partOf = null;\n    return this;\n};\n/**\n * @override\n */ OneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for(var i = 0; i < this.oneof.length; ++i){\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n/**\n * @override\n */ OneOf.prototype.onRemove = function onRemove(parent) {\n    for(var i = 0, field; i < this.fieldsArray.length; ++i)if ((field = this.fieldsArray[i]).parent) field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n/**\n * Determines whether this field corresponds to a synthetic oneof created for\n * a proto3 optional field.  No behavioral logic should depend on this, but it\n * can be relevant for reflection.\n * @name OneOf#isProto3Optional\n * @type {boolean}\n * @readonly\n */ Object.defineProperty(OneOf.prototype, \"isProto3Optional\", {\n    get: function() {\n        if (this.fieldsArray == null || this.fieldsArray.length !== 1) {\n            return false;\n        }\n        var field = this.fieldsArray[0];\n        return field.options != null && field.options[\"proto3_optional\"] === true;\n    }\n});\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */ /**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */ OneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length), index = 0;\n    while(index < arguments.length)fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/oneof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/parse.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/parse.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = parse;\nparse.filename = null;\nparse.defaults = {\n    keepCase: false\n};\nvar tokenize = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/tokenize.js\"), Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/root.js\"), Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/type.js\"), Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/field.js\"), MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/mapfield.js\"), OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/oneof.js\"), Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\"), Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/service.js\"), Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/method.js\"), ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/object.js\"), types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/types.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\nvar base10Re = /^[1-9][0-9]*$/, base10NegRe = /^-?[1-9][0-9]*$/, base16Re = /^0[x][0-9a-fA-F]+$/, base16NegRe = /^-?0[x][0-9a-fA-F]+$/, base8Re = /^0[0-7]+$/, base8NegRe = /^-?0[0-7]+$/, numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/, nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/, typeRefRe = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;\n/**\n * Result object returned from {@link parse}.\n * @interface IParserResult\n * @property {string|undefined} package Package name, if declared\n * @property {string[]|undefined} imports Imports, if any\n * @property {string[]|undefined} weakImports Weak imports, if any\n * @property {Root} root Populated root instance\n */ /**\n * Options modifying the behavior of {@link parse}.\n * @interface IParseOptions\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\n */ /**\n * Options modifying the behavior of JSON serialization.\n * @interface IToJSONOptions\n * @property {boolean} [keepComments=false] Serializes comments.\n */ /**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @param {string} source Source contents\n * @param {Root} root Root to populate\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n */ function parse(source, root, options) {\n    /* eslint-disable callback-return */ if (!(root instanceof Root)) {\n        options = root;\n        root = new Root();\n    }\n    if (!options) options = parse.defaults;\n    var preferTrailingComment = options.preferTrailingComment || false;\n    var tn = tokenize(source, options.alternateCommentMode || false), next = tn.next, push = tn.push, peek = tn.peek, skip = tn.skip, cmnt = tn.cmnt;\n    var head = true, pkg, imports, weakImports, edition = \"proto2\";\n    var ptr = root;\n    var topLevelObjects = [];\n    var topLevelOptions = {};\n    var applyCase = options.keepCase ? function(name) {\n        return name;\n    } : util.camelCase;\n    function resolveFileFeatures() {\n        topLevelObjects.forEach((obj)=>{\n            obj._edition = edition;\n            Object.keys(topLevelOptions).forEach((opt)=>{\n                if (obj.getOption(opt) !== undefined) return;\n                obj.setOption(opt, topLevelOptions[opt], true);\n            });\n        });\n    }\n    /* istanbul ignore next */ function illegal(token, name, insideTryCatch) {\n        var filename = parse.filename;\n        if (!insideTryCatch) parse.filename = null;\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n    }\n    function readString() {\n        var values = [], token;\n        do {\n            /* istanbul ignore if */ if ((token = next()) !== '\"' && token !== \"'\") throw illegal(token);\n            values.push(next());\n            skip(token);\n            token = peek();\n        }while (token === '\"' || token === \"'\");\n        return values.join(\"\");\n    }\n    function readValue(acceptTypeRef) {\n        var token = next();\n        switch(token){\n            case \"'\":\n            case '\"':\n                push(token);\n                return readString();\n            case \"true\":\n            case \"TRUE\":\n                return true;\n            case \"false\":\n            case \"FALSE\":\n                return false;\n        }\n        try {\n            return parseNumber(token, /* insideTryCatch */ true);\n        } catch (e) {\n            /* istanbul ignore else */ if (acceptTypeRef && typeRefRe.test(token)) return token;\n            /* istanbul ignore next */ throw illegal(token, \"value\");\n        }\n    }\n    function readRanges(target, acceptStrings) {\n        var token, start;\n        do {\n            if (acceptStrings && ((token = peek()) === '\"' || token === \"'\")) {\n                var str = readString();\n                target.push(str);\n                if (edition >= 2023) {\n                    throw illegal(str, \"id\");\n                }\n            } else {\n                try {\n                    target.push([\n                        start = parseId(next()),\n                        skip(\"to\", true) ? parseId(next()) : start\n                    ]);\n                } catch (err) {\n                    if (acceptStrings && typeRefRe.test(token) && edition >= 2023) {\n                        target.push(token);\n                    } else {\n                        throw err;\n                    }\n                }\n            }\n        }while (skip(\",\", true));\n        var dummy = {\n            options: undefined\n        };\n        dummy.setOption = function(name, value) {\n            if (this.options === undefined) this.options = {};\n            this.options[name] = value;\n        };\n        ifBlock(dummy, function parseRange_block(token) {\n            /* istanbul ignore else */ if (token === \"option\") {\n                parseOption(dummy, token); // skip\n                skip(\";\");\n            } else throw illegal(token);\n        }, function parseRange_line() {\n            parseInlineOptions(dummy); // skip\n        });\n    }\n    function parseNumber(token, insideTryCatch) {\n        var sign = 1;\n        if (token.charAt(0) === \"-\") {\n            sign = -1;\n            token = token.substring(1);\n        }\n        switch(token){\n            case \"inf\":\n            case \"INF\":\n            case \"Inf\":\n                return sign * Infinity;\n            case \"nan\":\n            case \"NAN\":\n            case \"Nan\":\n            case \"NaN\":\n                return NaN;\n            case \"0\":\n                return 0;\n        }\n        if (base10Re.test(token)) return sign * parseInt(token, 10);\n        if (base16Re.test(token)) return sign * parseInt(token, 16);\n        if (base8Re.test(token)) return sign * parseInt(token, 8);\n        /* istanbul ignore else */ if (numberRe.test(token)) return sign * parseFloat(token);\n        /* istanbul ignore next */ throw illegal(token, \"number\", insideTryCatch);\n    }\n    function parseId(token, acceptNegative) {\n        switch(token){\n            case \"max\":\n            case \"MAX\":\n            case \"Max\":\n                return 536870911;\n            case \"0\":\n                return 0;\n        }\n        /* istanbul ignore if */ if (!acceptNegative && token.charAt(0) === \"-\") throw illegal(token, \"id\");\n        if (base10NegRe.test(token)) return parseInt(token, 10);\n        if (base16NegRe.test(token)) return parseInt(token, 16);\n        /* istanbul ignore else */ if (base8NegRe.test(token)) return parseInt(token, 8);\n        /* istanbul ignore next */ throw illegal(token, \"id\");\n    }\n    function parsePackage() {\n        /* istanbul ignore if */ if (pkg !== undefined) throw illegal(\"package\");\n        pkg = next();\n        /* istanbul ignore if */ if (!typeRefRe.test(pkg)) throw illegal(pkg, \"name\");\n        ptr = ptr.define(pkg);\n        skip(\";\");\n    }\n    function parseImport() {\n        var token = peek();\n        var whichImports;\n        switch(token){\n            case \"weak\":\n                whichImports = weakImports || (weakImports = []);\n                next();\n                break;\n            case \"public\":\n                next();\n            // eslint-disable-next-line no-fallthrough\n            default:\n                whichImports = imports || (imports = []);\n                break;\n        }\n        token = readString();\n        skip(\";\");\n        whichImports.push(token);\n    }\n    function parseSyntax() {\n        skip(\"=\");\n        edition = readString();\n        /* istanbul ignore if */ if (edition < 2023) throw illegal(edition, \"syntax\");\n        skip(\";\");\n    }\n    function parseEdition() {\n        skip(\"=\");\n        edition = readString();\n        const supportedEditions = [\n            \"2023\"\n        ];\n        /* istanbul ignore if */ if (!supportedEditions.includes(edition)) throw illegal(edition, \"edition\");\n        skip(\";\");\n    }\n    function parseCommon(parent, token) {\n        switch(token){\n            case \"option\":\n                parseOption(parent, token);\n                skip(\";\");\n                return true;\n            case \"message\":\n                parseType(parent, token);\n                return true;\n            case \"enum\":\n                parseEnum(parent, token);\n                return true;\n            case \"service\":\n                parseService(parent, token);\n                return true;\n            case \"extend\":\n                parseExtension(parent, token);\n                return true;\n        }\n        return false;\n    }\n    function ifBlock(obj, fnIf, fnElse) {\n        var trailingLine = tn.line;\n        if (obj) {\n            if (typeof obj.comment !== \"string\") {\n                obj.comment = cmnt(); // try block-type comment\n            }\n            obj.filename = parse.filename;\n        }\n        if (skip(\"{\", true)) {\n            var token;\n            while((token = next()) !== \"}\")fnIf(token);\n            skip(\";\", true);\n        } else {\n            if (fnElse) fnElse();\n            skip(\";\");\n            if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment)) obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n        }\n    }\n    function parseType(parent, token) {\n        /* istanbul ignore if */ if (!nameRe.test(token = next())) throw illegal(token, \"type name\");\n        var type = new Type(token);\n        ifBlock(type, function parseType_block(token) {\n            if (parseCommon(type, token)) return;\n            switch(token){\n                case \"map\":\n                    parseMapField(type, token);\n                    break;\n                case \"required\":\n                    if (edition !== \"proto2\") throw illegal(token);\n                /* eslint-disable no-fallthrough */ case \"repeated\":\n                    parseField(type, token);\n                    break;\n                case \"optional\":\n                    /* istanbul ignore if */ if (edition === \"proto3\") {\n                        parseField(type, \"proto3_optional\");\n                    } else if (edition !== \"proto2\") {\n                        throw illegal(token);\n                    } else {\n                        parseField(type, \"optional\");\n                    }\n                    break;\n                case \"oneof\":\n                    parseOneOf(type, token);\n                    break;\n                case \"extensions\":\n                    readRanges(type.extensions || (type.extensions = []));\n                    break;\n                case \"reserved\":\n                    readRanges(type.reserved || (type.reserved = []), true);\n                    break;\n                default:\n                    /* istanbul ignore if */ if (edition === \"proto2\" || !typeRefRe.test(token)) {\n                        throw illegal(token);\n                    }\n                    push(token);\n                    parseField(type, \"optional\");\n                    break;\n            }\n        });\n        parent.add(type);\n        if (parent === ptr) {\n            topLevelObjects.push(type);\n        }\n    }\n    function parseField(parent, rule, extend) {\n        var type = next();\n        if (type === \"group\") {\n            parseGroup(parent, rule);\n            return;\n        }\n        // Type names can consume multiple tokens, in multiple variants:\n        //    package.subpackage   field       tokens: \"package.subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        //    package . subpackage field       tokens: \"package\" \".\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        //    package.  subpackage field       tokens: \"package.\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        //    package  .subpackage field       tokens: \"package\" \".subpackage\" [TYPE NAME ENDS HERE] \"field\"\n        // Keep reading tokens until we get a type name with no period at the end,\n        // and the next token does not start with a period.\n        while(type.endsWith(\".\") || peek().startsWith(\".\")){\n            type += next();\n        }\n        /* istanbul ignore if */ if (!typeRefRe.test(type)) throw illegal(type, \"type\");\n        var name = next();\n        /* istanbul ignore if */ if (!nameRe.test(name)) throw illegal(name, \"name\");\n        name = applyCase(name);\n        skip(\"=\");\n        var field = new Field(name, parseId(next()), type, rule, extend);\n        ifBlock(field, function parseField_block(token) {\n            /* istanbul ignore else */ if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else throw illegal(token);\n        }, function parseField_line() {\n            parseInlineOptions(field);\n        });\n        if (rule === \"proto3_optional\") {\n            // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\n            var oneof = new OneOf(\"_\" + name);\n            field.setOption(\"proto3_optional\", true);\n            oneof.add(field);\n            parent.add(oneof);\n        } else {\n            parent.add(field);\n        }\n        if (parent === ptr) {\n            topLevelObjects.push(field);\n        }\n    }\n    function parseGroup(parent, rule) {\n        if (edition >= 2023) {\n            throw illegal(\"group\");\n        }\n        var name = next();\n        /* istanbul ignore if */ if (!nameRe.test(name)) throw illegal(name, \"name\");\n        var fieldName = util.lcFirst(name);\n        if (name === fieldName) name = util.ucFirst(name);\n        skip(\"=\");\n        var id = parseId(next());\n        var type = new Type(name);\n        type.group = true;\n        var field = new Field(fieldName, id, name, rule);\n        field.filename = parse.filename;\n        ifBlock(type, function parseGroup_block(token) {\n            switch(token){\n                case \"option\":\n                    parseOption(type, token);\n                    skip(\";\");\n                    break;\n                case \"required\":\n                case \"repeated\":\n                    parseField(type, token);\n                    break;\n                case \"optional\":\n                    /* istanbul ignore if */ if (edition === \"proto3\") {\n                        parseField(type, \"proto3_optional\");\n                    } else {\n                        parseField(type, \"optional\");\n                    }\n                    break;\n                case \"message\":\n                    parseType(type, token);\n                    break;\n                case \"enum\":\n                    parseEnum(type, token);\n                    break;\n                case \"reserved\":\n                    readRanges(type.reserved || (type.reserved = []), true);\n                    break;\n                /* istanbul ignore next */ default:\n                    throw illegal(token); // there are no groups with proto3 semantics\n            }\n        });\n        parent.add(type).add(field);\n    }\n    function parseMapField(parent) {\n        skip(\"<\");\n        var keyType = next();\n        /* istanbul ignore if */ if (types.mapKey[keyType] === undefined) throw illegal(keyType, \"type\");\n        skip(\",\");\n        var valueType = next();\n        /* istanbul ignore if */ if (!typeRefRe.test(valueType)) throw illegal(valueType, \"type\");\n        skip(\">\");\n        var name = next();\n        /* istanbul ignore if */ if (!nameRe.test(name)) throw illegal(name, \"name\");\n        skip(\"=\");\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n        ifBlock(field, function parseMapField_block(token) {\n            /* istanbul ignore else */ if (token === \"option\") {\n                parseOption(field, token);\n                skip(\";\");\n            } else throw illegal(token);\n        }, function parseMapField_line() {\n            parseInlineOptions(field);\n        });\n        parent.add(field);\n    }\n    function parseOneOf(parent, token) {\n        /* istanbul ignore if */ if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n        var oneof = new OneOf(applyCase(token));\n        ifBlock(oneof, function parseOneOf_block(token) {\n            if (token === \"option\") {\n                parseOption(oneof, token);\n                skip(\";\");\n            } else {\n                push(token);\n                parseField(oneof, \"optional\");\n            }\n        });\n        parent.add(oneof);\n    }\n    function parseEnum(parent, token) {\n        /* istanbul ignore if */ if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n        var enm = new Enum(token);\n        ifBlock(enm, function parseEnum_block(token) {\n            switch(token){\n                case \"option\":\n                    parseOption(enm, token);\n                    skip(\";\");\n                    break;\n                case \"reserved\":\n                    readRanges(enm.reserved || (enm.reserved = []), true);\n                    if (enm.reserved === undefined) enm.reserved = [];\n                    break;\n                default:\n                    parseEnumValue(enm, token);\n            }\n        });\n        parent.add(enm);\n        if (parent === ptr) {\n            topLevelObjects.push(enm);\n        }\n    }\n    function parseEnumValue(parent, token) {\n        /* istanbul ignore if */ if (!nameRe.test(token)) throw illegal(token, \"name\");\n        skip(\"=\");\n        var value = parseId(next(), true), dummy = {\n            options: undefined\n        };\n        dummy.getOption = function(name) {\n            return this.options[name];\n        };\n        dummy.setOption = function(name, value) {\n            ReflectionObject.prototype.setOption.call(dummy, name, value);\n        };\n        dummy.setParsedOption = function() {\n            return undefined;\n        };\n        ifBlock(dummy, function parseEnumValue_block(token) {\n            /* istanbul ignore else */ if (token === \"option\") {\n                parseOption(dummy, token); // skip\n                skip(\";\");\n            } else throw illegal(token);\n        }, function parseEnumValue_line() {\n            parseInlineOptions(dummy); // skip\n        });\n        parent.add(token, value, dummy.comment, dummy.parsedOptions || dummy.options);\n    }\n    function parseOption(parent, token) {\n        var option;\n        var propName;\n        var isOption = true;\n        if (token === \"option\") {\n            token = next();\n        }\n        while(token !== \"=\"){\n            if (token === \"(\") {\n                var parensValue = next();\n                skip(\")\");\n                token = \"(\" + parensValue + \")\";\n            }\n            if (isOption) {\n                isOption = false;\n                if (token.includes(\".\") && !token.includes(\"(\")) {\n                    var tokens = token.split(\".\");\n                    option = tokens[0] + \".\";\n                    token = tokens[1];\n                    continue;\n                }\n                option = token;\n            } else {\n                propName = propName ? propName += token : token;\n            }\n            token = next();\n        }\n        var name = propName ? option.concat(propName) : option;\n        var optionValue = parseOptionValue(parent, name);\n        propName = propName && propName[0] === \".\" ? propName.slice(1) : propName;\n        option = option && option[option.length - 1] === \".\" ? option.slice(0, -1) : option;\n        setParsedOption(parent, option, optionValue, propName);\n    }\n    function parseOptionValue(parent, name) {\n        // { a: \"foo\" b { c: \"bar\" } }\n        if (skip(\"{\", true)) {\n            var objectResult = {};\n            while(!skip(\"}\", true)){\n                /* istanbul ignore if */ if (!nameRe.test(token = next())) {\n                    throw illegal(token, \"name\");\n                }\n                if (token === null) {\n                    throw illegal(token, \"end of input\");\n                }\n                var value;\n                var propName = token;\n                skip(\":\", true);\n                if (peek() === \"{\") {\n                    // option (my_option) = {\n                    //     repeated_value: [ \"foo\", \"bar\" ]\n                    // };\n                    value = parseOptionValue(parent, name + \".\" + token);\n                } else if (peek() === \"[\") {\n                    value = [];\n                    var lastValue;\n                    if (skip(\"[\", true)) {\n                        do {\n                            lastValue = readValue(true);\n                            value.push(lastValue);\n                        }while (skip(\",\", true));\n                        skip(\"]\");\n                        if (typeof lastValue !== \"undefined\") {\n                            setOption(parent, name + \".\" + token, lastValue);\n                        }\n                    }\n                } else {\n                    value = readValue(true);\n                    setOption(parent, name + \".\" + token, value);\n                }\n                var prevValue = objectResult[propName];\n                if (prevValue) value = [].concat(prevValue).concat(value);\n                objectResult[propName] = value;\n                // Semicolons and commas can be optional\n                skip(\",\", true);\n                skip(\";\", true);\n            }\n            return objectResult;\n        }\n        var simpleValue = readValue(true);\n        setOption(parent, name, simpleValue);\n        return simpleValue;\n    // Does not enforce a delimiter to be universal\n    }\n    function setOption(parent, name, value) {\n        if (ptr === parent && /^features\\./.test(name)) {\n            topLevelOptions[name] = value;\n            return;\n        }\n        if (parent.setOption) parent.setOption(name, value);\n    }\n    function setParsedOption(parent, name, value, propName) {\n        if (parent.setParsedOption) parent.setParsedOption(name, value, propName);\n    }\n    function parseInlineOptions(parent) {\n        if (skip(\"[\", true)) {\n            do {\n                parseOption(parent, \"option\");\n            }while (skip(\",\", true));\n            skip(\"]\");\n        }\n        return parent;\n    }\n    function parseService(parent, token) {\n        /* istanbul ignore if */ if (!nameRe.test(token = next())) throw illegal(token, \"service name\");\n        var service = new Service(token);\n        ifBlock(service, function parseService_block(token) {\n            if (parseCommon(service, token)) {\n                return;\n            }\n            /* istanbul ignore else */ if (token === \"rpc\") parseMethod(service, token);\n            else throw illegal(token);\n        });\n        parent.add(service);\n        if (parent === ptr) {\n            topLevelObjects.push(service);\n        }\n    }\n    function parseMethod(parent, token) {\n        // Get the comment of the preceding line now (if one exists) in case the\n        // method is defined across multiple lines.\n        var commentText = cmnt();\n        var type = token;\n        /* istanbul ignore if */ if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n        var name = token, requestType, requestStream, responseType, responseStream;\n        skip(\"(\");\n        if (skip(\"stream\", true)) requestStream = true;\n        /* istanbul ignore if */ if (!typeRefRe.test(token = next())) throw illegal(token);\n        requestType = token;\n        skip(\")\");\n        skip(\"returns\");\n        skip(\"(\");\n        if (skip(\"stream\", true)) responseStream = true;\n        /* istanbul ignore if */ if (!typeRefRe.test(token = next())) throw illegal(token);\n        responseType = token;\n        skip(\")\");\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n        method.comment = commentText;\n        ifBlock(method, function parseMethod_block(token) {\n            /* istanbul ignore else */ if (token === \"option\") {\n                parseOption(method, token);\n                skip(\";\");\n            } else throw illegal(token);\n        });\n        parent.add(method);\n    }\n    function parseExtension(parent, token) {\n        /* istanbul ignore if */ if (!typeRefRe.test(token = next())) throw illegal(token, \"reference\");\n        var reference = token;\n        ifBlock(null, function parseExtension_block(token) {\n            switch(token){\n                case \"required\":\n                case \"repeated\":\n                    parseField(parent, token, reference);\n                    break;\n                case \"optional\":\n                    /* istanbul ignore if */ if (edition === \"proto3\") {\n                        parseField(parent, \"proto3_optional\", reference);\n                    } else {\n                        parseField(parent, \"optional\", reference);\n                    }\n                    break;\n                default:\n                    /* istanbul ignore if */ if (edition === \"proto2\" || !typeRefRe.test(token)) throw illegal(token);\n                    push(token);\n                    parseField(parent, \"optional\", reference);\n                    break;\n            }\n        });\n    }\n    var token;\n    while((token = next()) !== null){\n        switch(token){\n            case \"package\":\n                /* istanbul ignore if */ if (!head) throw illegal(token);\n                parsePackage();\n                break;\n            case \"import\":\n                /* istanbul ignore if */ if (!head) throw illegal(token);\n                parseImport();\n                break;\n            case \"syntax\":\n                /* istanbul ignore if */ if (!head) throw illegal(token);\n                parseSyntax();\n                break;\n            case \"edition\":\n                /* istanbul ignore if */ if (!head) throw illegal(token);\n                parseEdition();\n                break;\n            case \"option\":\n                parseOption(ptr, token);\n                skip(\";\", true);\n                break;\n            default:\n                /* istanbul ignore else */ if (parseCommon(ptr, token)) {\n                    head = false;\n                    continue;\n                }\n                /* istanbul ignore next */ throw illegal(token);\n        }\n    }\n    resolveFileFeatures();\n    parse.filename = null;\n    return {\n        \"package\": pkg,\n        \"imports\": imports,\n        weakImports: weakImports,\n        root: root\n    };\n} /**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @name parse\n * @function\n * @param {string} source Source contents\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n * @variation 2\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/reader.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/reader.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Reader;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js\");\nvar BufferReader; // cyclic\nvar LongBits = util.LongBits, utf8 = util.utf8;\n/* istanbul ignore next */ function indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */ function Reader(buffer) {\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */ this.buf = buffer;\n    /**\n     * Read buffer position.\n     * @type {number}\n     */ this.pos = 0;\n    /**\n     * Read buffer length.\n     * @type {number}\n     */ this.len = buffer.length;\n}\nvar create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n} : function create_array(buffer) {\n    if (Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n};\nvar create = function create() {\n    return util.Buffer ? function create_buffer_setup(buffer) {\n        return (Reader.create = function create_buffer(buffer) {\n            return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer) : create_array(buffer);\n        })(buffer);\n    } : create_array;\n};\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */ Reader.create = create();\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */ Reader.prototype.uint32 = function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (this.buf[this.pos] & 127) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        /* istanbul ignore if */ if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n}();\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */ Reader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */ Reader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n/* eslint-disable no-invalid-this */ function readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) {\n        for(; i < 4; ++i){\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n        i = 0;\n    } else {\n        for(; i < 3; ++i){\n            /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) {\n        for(; i < 5; ++i){\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n    } else {\n        for(; i < 5; ++i){\n            /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n    }\n    /* istanbul ignore next */ throw Error(\"invalid varint encoding\");\n}\n/* eslint-enable no-invalid-this */ /**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */ /**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */ /**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */ /**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */ Reader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\nfunction readFixed32_end(buf, end) {\n    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n}\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */ Reader.prototype.fixed32 = function read_fixed32() {\n    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */ Reader.prototype.sfixed32 = function read_sfixed32() {\n    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n/* eslint-disable no-invalid-this */ function readFixed64() {\n    /* istanbul ignore if */ if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n/* eslint-enable no-invalid-this */ /**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */ /**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */ /**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */ Reader.prototype.float = function read_float() {\n    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */ Reader.prototype.double = function read_double() {\n    /* istanbul ignore if */ if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */ Reader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(), start = this.pos, end = this.pos + length;\n    /* istanbul ignore if */ if (end > this.len) throw indexOutOfRange(this, length);\n    this.pos += length;\n    if (Array.isArray(this.buf)) return this.buf.slice(start, end);\n    if (start === end) {\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */ Reader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */ Reader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */ if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);\n        }while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */ Reader.prototype.skipType = function(wireType) {\n    switch(wireType){\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while((wireType = this.uint32() & 7) !== 4){\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n        /* istanbul ignore next */ default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/reader_buffer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/reader_buffer.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = BufferReader;\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js\");\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */ function BufferReader(buffer) {\n    Reader.call(this, buffer);\n/**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */ }\nBufferReader._configure = function() {\n    /* istanbul ignore else */ if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n/**\n * @override\n */ BufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */ BufferReader._configure();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcmVhZGVyX2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLGlCQUFpQjtBQUNqQixJQUFJQyxTQUFTQyxtQkFBT0EsQ0FBQywwRkFBVTtBQUM5QkYsQ0FBQUEsYUFBYUcsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNKLE9BQU9FLFNBQVMsR0FBR0csV0FBVyxHQUFHTjtBQUV6RSxJQUFJTyxPQUFPTCxtQkFBT0EsQ0FBQyxzR0FBZ0I7QUFFbkM7Ozs7OztDQU1DLEdBQ0QsU0FBU0YsYUFBYVEsTUFBTTtJQUN4QlAsT0FBT1EsSUFBSSxDQUFDLElBQUksRUFBRUQ7QUFFbEI7Ozs7S0FJQyxHQUNMO0FBRUFSLGFBQWFVLFVBQVUsR0FBRztJQUN0Qix3QkFBd0IsR0FDeEIsSUFBSUgsS0FBS0ksTUFBTSxFQUNYWCxhQUFhRyxTQUFTLENBQUNTLE1BQU0sR0FBR0wsS0FBS0ksTUFBTSxDQUFDUixTQUFTLENBQUNVLEtBQUs7QUFDbkU7QUFHQTs7Q0FFQyxHQUNEYixhQUFhRyxTQUFTLENBQUNXLE1BQU0sR0FBRyxTQUFTQztJQUNyQyxJQUFJQyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxJQUFJLGVBQWU7SUFDeEMsT0FBTyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0MsU0FBUyxHQUNuQixJQUFJLENBQUNELEdBQUcsQ0FBQ0MsU0FBUyxDQUFDLElBQUksQ0FBQ0MsR0FBRyxFQUFFLElBQUksQ0FBQ0EsR0FBRyxHQUFHQyxLQUFLQyxHQUFHLENBQUMsSUFBSSxDQUFDRixHQUFHLEdBQUdKLEtBQUssSUFBSSxDQUFDQSxHQUFHLEtBQ3pFLElBQUksQ0FBQ0UsR0FBRyxDQUFDSyxRQUFRLENBQUMsU0FBUyxJQUFJLENBQUNILEdBQUcsRUFBRSxJQUFJLENBQUNBLEdBQUcsR0FBR0MsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ0YsR0FBRyxHQUFHSixLQUFLLElBQUksQ0FBQ0EsR0FBRztBQUMzRjtBQUVBOzs7OztDQUtDLEdBRURoQixhQUFhVSxVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZjLW5leHRqcy1zaGFkY24vLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcmVhZGVyX2J1ZmZlci5qcz80ZTVmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJSZWFkZXI7XG5cbi8vIGV4dGVuZHMgUmVhZGVyXG52YXIgUmVhZGVyID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xuKEJ1ZmZlclJlYWRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlYWRlci5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEJ1ZmZlclJlYWRlcjtcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgcmVhZGVyIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCByZWFkZXIgdXNpbmcgbm9kZSBidWZmZXJzLlxuICogQGV4dGVuZHMgUmVhZGVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxuICovXG5mdW5jdGlvbiBCdWZmZXJSZWFkZXIoYnVmZmVyKSB7XG4gICAgUmVhZGVyLmNhbGwodGhpcywgYnVmZmVyKTtcblxuICAgIC8qKlxuICAgICAqIFJlYWQgYnVmZmVyLlxuICAgICAqIEBuYW1lIEJ1ZmZlclJlYWRlciNidWZcbiAgICAgKiBAdHlwZSB7QnVmZmVyfVxuICAgICAqL1xufVxuXG5CdWZmZXJSZWFkZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh1dGlsLkJ1ZmZlcilcbiAgICAgICAgQnVmZmVyUmVhZGVyLnByb3RvdHlwZS5fc2xpY2UgPSB1dGlsLkJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlclJlYWRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gcmVhZF9zdHJpbmdfYnVmZmVyKCkge1xuICAgIHZhciBsZW4gPSB0aGlzLnVpbnQzMigpOyAvLyBtb2RpZmllcyBwb3NcbiAgICByZXR1cm4gdGhpcy5idWYudXRmOFNsaWNlXG4gICAgICAgID8gdGhpcy5idWYudXRmOFNsaWNlKHRoaXMucG9zLCB0aGlzLnBvcyA9IE1hdGgubWluKHRoaXMucG9zICsgbGVuLCB0aGlzLmxlbikpXG4gICAgICAgIDogdGhpcy5idWYudG9TdHJpbmcoXCJ1dGYtOFwiLCB0aGlzLnBvcywgdGhpcy5wb3MgPSBNYXRoLm1pbih0aGlzLnBvcyArIGxlbiwgdGhpcy5sZW4pKTtcbn07XG5cbi8qKlxuICogUmVhZHMgYSBzZXF1ZW5jZSBvZiBieXRlcyBwcmVjZWVkZWQgYnkgaXRzIGxlbmd0aCBhcyBhIHZhcmludC5cbiAqIEBuYW1lIEJ1ZmZlclJlYWRlciNieXRlc1xuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBWYWx1ZSByZWFkXG4gKi9cblxuQnVmZmVyUmVhZGVyLl9jb25maWd1cmUoKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQnVmZmVyUmVhZGVyIiwiUmVhZGVyIiwicmVxdWlyZSIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidXRpbCIsImJ1ZmZlciIsImNhbGwiLCJfY29uZmlndXJlIiwiQnVmZmVyIiwiX3NsaWNlIiwic2xpY2UiLCJzdHJpbmciLCJyZWFkX3N0cmluZ19idWZmZXIiLCJsZW4iLCJ1aW50MzIiLCJidWYiLCJ1dGY4U2xpY2UiLCJwb3MiLCJNYXRoIiwibWluIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/reader_buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/root.js":
/*!************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/root.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Root;\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/namespace.js\");\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/field.js\"), Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\"), OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/oneof.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\nvar Type, parse, common; // \"\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */ function Root(options) {\n    Namespace.call(this, \"\", options);\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */ this.deferred = [];\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */ this.files = [];\n    /**\n     * Edition, defaults to proto2 if unspecified.\n     * @type {string}\n     * @private\n     */ this._edition = \"proto2\";\n    /**\n     * Global lookup cache of fully qualified names.\n     * @type {Object.<string,ReflectionObject>}\n     * @private\n     */ this._fullyQualifiedObjects = {};\n}\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Namespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */ Root.fromJSON = function fromJSON(json, root) {\n    if (!root) root = new Root();\n    if (json.options) root.setOptions(json.options);\n    return root.addJSON(json.nested).resolveAll();\n};\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */ Root.prototype.resolvePath = util.path.resolve;\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */ Root.prototype.fetch = util.fetch;\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */ function SYNC() {} // eslint-disable-line no-empty-function\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */ Root.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback) {\n        return util.asPromise(load, self, filename, options);\n    }\n    var sync = callback === SYNC; // undocumented\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        if (root) {\n            root.resolveAll();\n        }\n        /* istanbul ignore if */ if (!callback) {\n            return;\n        }\n        if (sync) {\n            throw err;\n        }\n        var cb = callback;\n        callback = null;\n        cb(err, root);\n    }\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common) return altname;\n        }\n        return null;\n    }\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\") source = JSON.parse(source);\n            if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options), resolved, i = 0;\n                if (parsed.imports) {\n                    for(; i < parsed.imports.length; ++i)if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i])) fetch(resolved);\n                }\n                if (parsed.weakImports) {\n                    for(i = 0; i < parsed.weakImports.length; ++i)if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);\n                }\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued) {\n            finish(null, self); // only once anyway\n        }\n    }\n    // Fetches a single file\n    function fetch(filename, weak) {\n        filename = getBundledFileName(filename) || filename;\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1) {\n            return;\n        }\n        self.files.push(filename);\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync) {\n                process(filename, common[filename]);\n            } else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak) finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            self.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */ if (!callback) {\n                    return; // terminated meanwhile\n                }\n                if (err) {\n                    /* istanbul ignore else */ if (!weak) finish(err);\n                    else if (!queued) finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename)) {\n        filename = [\n            filename\n        ];\n    }\n    for(var i = 0, resolved; i < filename.length; ++i)if (resolved = self.resolvePath(\"\", filename[i])) fetch(resolved);\n    if (sync) {\n        self.resolveAll();\n        return self;\n    }\n    if (!queued) {\n        finish(null, self);\n    }\n    return self;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */ // function load(filename:string, callback:LoadCallback):undefined\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */ // function load(filename:string, [options:IParseOptions]):Promise<Root>\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */ Root.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode) throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n/**\n * @override\n */ Root.prototype.resolveAll = function resolveAll() {\n    if (!this._needsRecursiveResolve) return this;\n    if (this.deferred.length) throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n        return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n    }).join(\", \"));\n    this._resolveFeaturesRecursive(this._edition);\n    return Namespace.prototype.resolveAll.call(this);\n};\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */ function tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        //do not allow to extend same field twice to prevent the error\n        if (extendedType.get(sisterField.name)) {\n            return true;\n        }\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */ Root.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField) {\n            if (!tryHandleExtension(this, object)) this.deferred.push(object);\n        }\n    } else if (object instanceof Enum) {\n        if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n        if (object instanceof Type) for(var i = 0; i < this.deferred.length;)if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);\n        else ++i;\n        for(var j = 0; j < /* initializes */ object.nestedArray.length; ++j)this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n    if (object instanceof Type || object instanceof Enum || object instanceof Field) {\n        // Only store types and enums for quick lookup during resolve.\n        this._fullyQualifiedObjects[object.fullName] = object;\n    }\n// The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n// properties of namespaces just like static code does. This allows using a .d.ts generated for\n// a static module with reflection-based solutions where the condition is met.\n};\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */ Root.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) {\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else {\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */ if (index > -1) this.deferred.splice(index, 1);\n            }\n        }\n    } else if (object instanceof Enum) {\n        if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n    } else if (object instanceof Namespace) {\n        for(var i = 0; i < /* initializes */ object.nestedArray.length; ++i)this._handleRemove(object._nestedArray[i]);\n        if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n    }\n    delete this._fullyQualifiedObjects[object.fullName];\n};\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function(Type_, parse_, common_) {\n    Type = Type_;\n    parse = parse_;\n    common = common_;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/root.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/roots.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/roots.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {}; /**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcm9vdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsT0FBT0MsT0FBTyxHQUFHLENBQUMsR0FFbEI7Ozs7Ozs7Ozs7Ozs7O0NBY0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZmMtbmV4dGpzLXNoYWRjbi8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yb290cy5qcz82NjdjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLyoqXG4gKiBOYW1lZCByb290cy5cbiAqIFRoaXMgaXMgd2hlcmUgcGJqcyBzdG9yZXMgZ2VuZXJhdGVkIHN0cnVjdHVyZXMgKHRoZSBvcHRpb24gYC1yLCAtLXJvb3RgIHNwZWNpZmllcyBhIG5hbWUpLlxuICogQ2FuIGFsc28gYmUgdXNlZCBtYW51YWxseSB0byBtYWtlIHJvb3RzIGF2YWlsYWJsZSBhY3Jvc3MgbW9kdWxlcy5cbiAqIEBuYW1lIHJvb3RzXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsUm9vdD59XG4gKiBAZXhhbXBsZVxuICogLy8gcGJqcyAtciBteXJvb3QgLW8gY29tcGlsZWQuanMgLi4uXG4gKlxuICogLy8gaW4gYW5vdGhlciBtb2R1bGU6XG4gKiByZXF1aXJlKFwiLi9jb21waWxlZC5qc1wiKTtcbiAqXG4gKiAvLyBpbiBhbnkgc3Vic2VxdWVudCBtb2R1bGU6XG4gKiB2YXIgcm9vdCA9IHByb3RvYnVmLnJvb3RzW1wibXlyb290XCJdO1xuICovXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/roots.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/rpc.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/rpc.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Streaming RPC helpers.\n * @namespace\n */ var rpc = exports;\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */ /**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */ rpc.Service = __webpack_require__(/*! ./rpc/service */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/rpc/service.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWI7OztDQUdDLEdBQ0QsSUFBSUEsTUFBTUM7QUFFVjs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUVEOzs7Ozs7O0NBT0MsR0FFREQsSUFBSUUsT0FBTyxHQUFHQyxtQkFBT0EsQ0FBQyxvR0FBZSIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JwYy5qcz82NzhlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFN0cmVhbWluZyBSUEMgaGVscGVycy5cbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIHJwYyA9IGV4cG9ydHM7XG5cbi8qKlxuICogUlBDIGltcGxlbWVudGF0aW9uIHBhc3NlZCB0byB7QGxpbmsgU2VydmljZSNjcmVhdGV9IHBlcmZvcm1pbmcgYSBzZXJ2aWNlIHJlcXVlc3Qgb24gbmV0d29yayBsZXZlbCwgaS5lLiBieSB1dGlsaXppbmcgaHR0cCByZXF1ZXN0cyBvciB3ZWJzb2NrZXRzLlxuICogQHR5cGVkZWYgUlBDSW1wbFxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtNZXRob2R8cnBjLlNlcnZpY2VNZXRob2Q8TWVzc2FnZTx7fT4sTWVzc2FnZTx7fT4+fSBtZXRob2QgUmVmbGVjdGVkIG9yIHN0YXRpYyBtZXRob2QgYmVpbmcgY2FsbGVkXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHJlcXVlc3REYXRhIFJlcXVlc3QgZGF0YVxuICogQHBhcmFtIHtSUENJbXBsQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQGV4YW1wbGVcbiAqIGZ1bmN0aW9uIHJwY0ltcGwobWV0aG9kLCByZXF1ZXN0RGF0YSwgY2FsbGJhY2spIHtcbiAqICAgICBpZiAocHJvdG9idWYudXRpbC5sY0ZpcnN0KG1ldGhvZC5uYW1lKSAhPT0gXCJteU1ldGhvZFwiKSAvLyBjb21wYXRpYmxlIHdpdGggc3RhdGljIGNvZGVcbiAqICAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIG1ldGhvZFwiKTtcbiAqICAgICBhc3luY2hyb25vdXNseU9idGFpbkFSZXNwb25zZShyZXF1ZXN0RGF0YSwgZnVuY3Rpb24oZXJyLCByZXNwb25zZURhdGEpIHtcbiAqICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwb25zZURhdGEpO1xuICogICAgIH0pO1xuICogfVxuICovXG5cbi8qKlxuICogTm9kZS1zdHlsZSBjYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayBSUENJbXBsfS5cbiAqIEB0eXBlZGVmIFJQQ0ltcGxDYWxsYmFja1xuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55LCBvdGhlcndpc2UgYG51bGxgXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl8bnVsbH0gW3Jlc3BvbnNlXSBSZXNwb25zZSBkYXRhIG9yIGBudWxsYCB0byBzaWduYWwgZW5kIG9mIHN0cmVhbSwgaWYgdGhlcmUgaGFzbid0IGJlZW4gYW4gZXJyb3JcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxucnBjLlNlcnZpY2UgPSByZXF1aXJlKFwiLi9ycGMvc2VydmljZVwiKTtcbiJdLCJuYW1lcyI6WyJycGMiLCJleHBvcnRzIiwiU2VydmljZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/rpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/rpc/service.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/rpc/service.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Service;\nvar util = __webpack_require__(/*! ../util/minimal */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js\");\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */ /**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */ /**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */ function Service(rpcImpl, requestDelimited, responseDelimited) {\n    if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n    util.EventEmitter.call(this);\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */ this.rpcImpl = rpcImpl;\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */ this.requestDelimited = Boolean(requestDelimited);\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */ this.responseDelimited = Boolean(responseDelimited);\n}\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */ Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n    if (!request) throw TypeError(\"request must be specified\");\n    var self = this;\n    if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n    if (!self.rpcImpl) {\n        setTimeout(function() {\n            callback(Error(\"already ended\"));\n        }, 0);\n        return undefined;\n    }\n    try {\n        return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n            if (err) {\n                self.emit(\"error\", err, method);\n                return callback(err);\n            }\n            if (response === null) {\n                self.end(/* endedByRPC */ true);\n                return undefined;\n            }\n            if (!(response instanceof responseCtor)) {\n                try {\n                    response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                } catch (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n            }\n            self.emit(\"data\", response, method);\n            return callback(null, response);\n        });\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() {\n            callback(err);\n        }, 0);\n        return undefined;\n    }\n};\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */ Service.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/rpc/service.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/service.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/service.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Service;\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/namespace.js\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\nvar Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/method.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\"), rpc = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/rpc.js\");\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */ function Service(name, options) {\n    Namespace.call(this, name, options);\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */ this.methods = {}; // toJSON, marker\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */ this._methodsArray = null;\n}\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */ /**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */ Service.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */ if (json.methods) for(var names = Object.keys(json.methods), i = 0; i < names.length; ++i)service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested) service.addJSON(json.nested);\n    if (json.edition) service._edition = json.edition;\n    service.comment = json.comment;\n    service._defaultEdition = \"proto3\"; // For backwards-compatibility.\n    return service;\n};\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */ Service.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"edition\",\n        this._editionToJSON(),\n        \"options\",\n        inherited && inherited.options || undefined,\n        \"methods\",\n        Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\",\n        inherited && inherited.nested || undefined,\n        \"comment\",\n        keepComments ? this.comment : undefined\n    ]);\n};\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */ Object.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n/**\n * @override\n */ Service.prototype.get = function get(name) {\n    return this.methods[name] || Namespace.prototype.get.call(this, name);\n};\n/**\n * @override\n */ Service.prototype.resolveAll = function resolveAll() {\n    if (!this._needsRecursiveResolve) return this;\n    Namespace.prototype.resolve.call(this);\n    var methods = this.methodsArray;\n    for(var i = 0; i < methods.length; ++i)methods[i].resolve();\n    return this;\n};\n/**\n * @override\n */ Service.prototype._resolveFeaturesRecursive = function _resolveFeaturesRecursive(edition) {\n    if (!this._needsRecursiveFeatureResolution) return this;\n    edition = this._edition || edition;\n    Namespace.prototype._resolveFeaturesRecursive.call(this, edition);\n    this.methodsArray.forEach((method)=>{\n        method._resolveFeaturesRecursive(edition);\n    });\n    return this;\n};\n/**\n * @override\n */ Service.prototype.add = function add(object) {\n    /* istanbul ignore if */ if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n/**\n * @override\n */ Service.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n        /* istanbul ignore if */ if (this.methods[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */ Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for(var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i){\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\n            \"r\",\n            \"c\"\n        ], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/service.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/tokenize.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/tokenize.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = tokenize;\nvar delimRe = /[\\s{}=;:[\\],'\"()<>]/g, stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g, stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\nvar setCommentRe = /^ *[*/]+ */, setCommentAltRe = /^\\s*\\*?\\/*/, setCommentSplitRe = /\\n/g, whitespaceRe = /\\s/, unescapeRe = /\\\\(.?)/g;\nvar unescapeMap = {\n    \"0\": \"\\x00\",\n    \"r\": \"\\r\",\n    \"n\": \"\\n\",\n    \"t\": \"\t\"\n};\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */ function unescape(str) {\n    return str.replace(unescapeRe, function($0, $1) {\n        switch($1){\n            case \"\\\\\":\n            case \"\":\n                return $1;\n            default:\n                return unescapeMap[$1] || \"\";\n        }\n    });\n}\ntokenize.unescape = unescape;\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */ /**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */ /**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */ /**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */ /**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */ /**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */ /**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */ function tokenize(source, alternateCommentMode) {\n    /* eslint-disable callback-return */ source = source.toString();\n    var offset = 0, length = source.length, line = 1, lastCommentLine = 0, comments = {};\n    var stack = [];\n    var stringDelim = null;\n    /* istanbul ignore next */ /**\n     * Creates an error for illegal syntax.\n     * @param {string} subject Subject\n     * @returns {Error} Error created\n     * @inner\n     */ function illegal(subject) {\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n    }\n    /**\n     * Reads a string till its end.\n     * @returns {string} String read\n     * @inner\n     */ function readString() {\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n        re.lastIndex = offset - 1;\n        var match = re.exec(source);\n        if (!match) throw illegal(\"string\");\n        offset = re.lastIndex;\n        push(stringDelim);\n        stringDelim = null;\n        return unescape(match[1]);\n    }\n    /**\n     * Gets the character at `pos` within the source.\n     * @param {number} pos Position\n     * @returns {string} Character\n     * @inner\n     */ function charAt(pos) {\n        return source.charAt(pos);\n    }\n    /**\n     * Sets the current comment text.\n     * @param {number} start Start offset\n     * @param {number} end End offset\n     * @param {boolean} isLeading set if a leading comment\n     * @returns {undefined}\n     * @inner\n     */ function setComment(start, end, isLeading) {\n        var comment = {\n            type: source.charAt(start++),\n            lineEmpty: false,\n            leading: isLeading\n        };\n        var lookback;\n        if (alternateCommentMode) {\n            lookback = 2; // alternate comment parsing: \"//\" or \"/*\"\n        } else {\n            lookback = 3; // \"///\" or \"/**\"\n        }\n        var commentOffset = start - lookback, c;\n        do {\n            if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === \"\\n\") {\n                comment.lineEmpty = true;\n                break;\n            }\n        }while (c === \" \" || c === \"\t\");\n        var lines = source.substring(start, end).split(setCommentSplitRe);\n        for(var i = 0; i < lines.length; ++i)lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\").trim();\n        comment.text = lines.join(\"\\n\").trim();\n        comments[line] = comment;\n        lastCommentLine = line;\n    }\n    function isDoubleSlashCommentLine(startOffset) {\n        var endOffset = findEndOfLine(startOffset);\n        // see if remaining line matches comment pattern\n        var lineText = source.substring(startOffset, endOffset);\n        var isComment = /^\\s*\\/\\//.test(lineText);\n        return isComment;\n    }\n    function findEndOfLine(cursor) {\n        // find end of cursor's line\n        var endOffset = cursor;\n        while(endOffset < length && charAt(endOffset) !== \"\\n\"){\n            endOffset++;\n        }\n        return endOffset;\n    }\n    /**\n     * Obtains the next token.\n     * @returns {string|null} Next token or `null` on eof\n     * @inner\n     */ function next() {\n        if (stack.length > 0) return stack.shift();\n        if (stringDelim) return readString();\n        var repeat, prev, curr, start, isDoc, isLeadingComment = offset === 0;\n        do {\n            if (offset === length) return null;\n            repeat = false;\n            while(whitespaceRe.test(curr = charAt(offset))){\n                if (curr === \"\\n\") {\n                    isLeadingComment = true;\n                    ++line;\n                }\n                if (++offset === length) return null;\n            }\n            if (charAt(offset) === \"/\") {\n                if (++offset === length) {\n                    throw illegal(\"comment\");\n                }\n                if (charAt(offset) === \"/\") {\n                    if (!alternateCommentMode) {\n                        // check for triple-slash comment\n                        isDoc = charAt(start = offset + 1) === \"/\";\n                        while(charAt(++offset) !== \"\\n\"){\n                            if (offset === length) {\n                                return null;\n                            }\n                        }\n                        ++offset;\n                        if (isDoc) {\n                            setComment(start, offset - 1, isLeadingComment);\n                            // Trailing comment cannot not be multi-line,\n                            // so leading comment state should be reset to handle potential next comments\n                            isLeadingComment = true;\n                        }\n                        ++line;\n                        repeat = true;\n                    } else {\n                        // check for double-slash comments, consolidating consecutive lines\n                        start = offset;\n                        isDoc = false;\n                        if (isDoubleSlashCommentLine(offset - 1)) {\n                            isDoc = true;\n                            do {\n                                offset = findEndOfLine(offset);\n                                if (offset === length) {\n                                    break;\n                                }\n                                offset++;\n                                if (!isLeadingComment) {\n                                    break;\n                                }\n                            }while (isDoubleSlashCommentLine(offset));\n                        } else {\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\n                        }\n                        if (isDoc) {\n                            setComment(start, offset, isLeadingComment);\n                            isLeadingComment = true;\n                        }\n                        line++;\n                        repeat = true;\n                    }\n                } else if ((curr = charAt(offset)) === \"*\") {\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\n                    start = offset + 1;\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\n                    do {\n                        if (curr === \"\\n\") {\n                            ++line;\n                        }\n                        if (++offset === length) {\n                            throw illegal(\"comment\");\n                        }\n                        prev = curr;\n                        curr = charAt(offset);\n                    }while (prev !== \"*\" || curr !== \"/\");\n                    ++offset;\n                    if (isDoc) {\n                        setComment(start, offset - 2, isLeadingComment);\n                        isLeadingComment = true;\n                    }\n                    repeat = true;\n                } else {\n                    return \"/\";\n                }\n            }\n        }while (repeat);\n        // offset !== length if we got here\n        var end = offset;\n        delimRe.lastIndex = 0;\n        var delim = delimRe.test(charAt(end++));\n        if (!delim) while(end < length && !delimRe.test(charAt(end)))++end;\n        var token = source.substring(offset, offset = end);\n        if (token === '\"' || token === \"'\") stringDelim = token;\n        return token;\n    }\n    /**\n     * Pushes a token back to the stack.\n     * @param {string} token Token\n     * @returns {undefined}\n     * @inner\n     */ function push(token) {\n        stack.push(token);\n    }\n    /**\n     * Peeks for the next token.\n     * @returns {string|null} Token or `null` on eof\n     * @inner\n     */ function peek() {\n        if (!stack.length) {\n            var token = next();\n            if (token === null) return null;\n            push(token);\n        }\n        return stack[0];\n    }\n    /**\n     * Skips a token.\n     * @param {string} expected Expected token\n     * @param {boolean} [optional=false] Whether the token is optional\n     * @returns {boolean} `true` when skipped, `false` if not\n     * @throws {Error} When a required token is not present\n     * @inner\n     */ function skip(expected, optional) {\n        var actual = peek(), equals = actual === expected;\n        if (equals) {\n            next();\n            return true;\n        }\n        if (!optional) throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n        return false;\n    }\n    /**\n     * Gets a comment.\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\n     * @returns {string|null} Comment text\n     * @inner\n     */ function cmnt(trailingLine) {\n        var ret = null;\n        var comment;\n        if (trailingLine === undefined) {\n            comment = comments[line - 1];\n            delete comments[line - 1];\n            if (comment && (alternateCommentMode || comment.type === \"*\" || comment.lineEmpty)) {\n                ret = comment.leading ? comment.text : null;\n            }\n        } else {\n            /* istanbul ignore else */ if (lastCommentLine < trailingLine) {\n                peek();\n            }\n            comment = comments[trailingLine];\n            delete comments[trailingLine];\n            if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === \"/\")) {\n                ret = comment.leading ? null : comment.text;\n            }\n        }\n        return ret;\n    }\n    return Object.defineProperty({\n        next: next,\n        peek: peek,\n        push: push,\n        skip: skip,\n        cmnt: cmnt\n    }, \"line\", {\n        get: function() {\n            return line;\n        }\n    });\n/* eslint-enable callback-return */ }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/tokenize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/type.js":
/*!************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/type.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Type;\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/namespace.js\");\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\"), OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/oneof.js\"), Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/field.js\"), MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/mapfield.js\"), Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/service.js\"), Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/message.js\"), Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/reader.js\"), Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/writer.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\"), encoder = __webpack_require__(/*! ./encoder */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/encoder.js\"), decoder = __webpack_require__(/*! ./decoder */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/decoder.js\"), verifier = __webpack_require__(/*! ./verifier */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/verifier.js\"), converter = __webpack_require__(/*! ./converter */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/converter.js\"), wrappers = __webpack_require__(/*! ./wrappers */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/wrappers.js\");\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */ function Type(name, options) {\n    Namespace.call(this, name, options);\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */ this.fields = {}; // toJSON, marker\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */ this.oneofs = undefined; // toJSON\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */ this.extensions = undefined; // toJSON\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */ this.reserved = undefined; // toJSON\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */ this.group = undefined; // toJSON\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */ this._fieldsById = null;\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */ this._fieldsArray = null;\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */ this._oneofsArray = null;\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */ this._ctor = null;\n}\nObject.defineProperties(Type.prototype, {\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */ fieldsById: {\n        get: function() {\n            /* istanbul ignore if */ if (this._fieldsById) return this._fieldsById;\n            this._fieldsById = {};\n            for(var names = Object.keys(this.fields), i = 0; i < names.length; ++i){\n                var field = this.fields[names[i]], id = field.id;\n                /* istanbul ignore if */ if (this._fieldsById[id]) throw Error(\"duplicate id \" + id + \" in \" + this);\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */ fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */ oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */ ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n            this._ctor = ctor;\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for(; i < /* initializes */ this.fieldsArray.length; ++i)this._fieldsArray[i].resolve(); // ensures a proper value\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for(i = 0; i < /* initializes */ this.oneofsArray.length; ++i)ctorProperties[this._oneofsArray[i].resolve().name] = {\n                get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                set: util.oneOfSetter(this._oneofsArray[i].oneof)\n            };\n            if (i) Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ Type.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */ var gen = util.codegen([\n        \"p\"\n    ], mtype.name);\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    for(var i = 0, field; i < mtype.fieldsArray.length; ++i)if ((field = mtype._fieldsArray[i]).map) gen(\"this%s={}\", util.safeProp(field.name));\n    else if (field.repeated) gen(\"this%s=[]\", util.safeProp(field.name));\n    return gen(\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n    (\"this[ks[i]]=p[ks[i]]\");\n/* eslint-enable no-unexpected-multiline */ };\nfunction clearCache(type) {\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n    delete type.encode;\n    delete type.decode;\n    delete type.verify;\n    return type;\n}\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {Array.<number[]|string>} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */ /**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */ Type.fromJSON = function fromJSON(name, json) {\n    var type = new Type(name, json.options);\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields), i = 0;\n    for(; i < names.length; ++i)type.add((typeof json.fields[names[i]].keyType !== \"undefined\" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));\n    if (json.oneofs) for(names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n    if (json.nested) for(names = Object.keys(json.nested), i = 0; i < names.length; ++i){\n        var nested = json.nested[names[i]];\n        type.add((nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));\n    }\n    if (json.extensions && json.extensions.length) type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length) type.reserved = json.reserved;\n    if (json.group) type.group = true;\n    if (json.comment) type.comment = json.comment;\n    if (json.edition) type._edition = json.edition;\n    type._defaultEdition = \"proto3\"; // For backwards-compatibility.\n    return type;\n};\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */ Type.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"edition\",\n        this._editionToJSON(),\n        \"options\",\n        inherited && inherited.options || undefined,\n        \"oneofs\",\n        Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\n        \"fields\",\n        Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) {\n            return !obj.declaringField;\n        }), toJSONOptions) || {},\n        \"extensions\",\n        this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\",\n        this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\",\n        this.group || undefined,\n        \"nested\",\n        inherited && inherited.nested || undefined,\n        \"comment\",\n        keepComments ? this.comment : undefined\n    ]);\n};\n/**\n * @override\n */ Type.prototype.resolveAll = function resolveAll() {\n    if (!this._needsRecursiveResolve) return this;\n    Namespace.prototype.resolveAll.call(this);\n    var oneofs = this.oneofsArray;\n    i = 0;\n    while(i < oneofs.length)oneofs[i++].resolve();\n    var fields = this.fieldsArray, i = 0;\n    while(i < fields.length)fields[i++].resolve();\n    return this;\n};\n/**\n * @override\n */ Type.prototype._resolveFeaturesRecursive = function _resolveFeaturesRecursive(edition) {\n    if (!this._needsRecursiveFeatureResolution) return this;\n    edition = this._edition || edition;\n    Namespace.prototype._resolveFeaturesRecursive.call(this, edition);\n    this.oneofsArray.forEach((oneof)=>{\n        oneof._resolveFeatures(edition);\n    });\n    this.fieldsArray.forEach((field)=>{\n        field._resolveFeatures(edition);\n    });\n    return this;\n};\n/**\n * @override\n */ Type.prototype.get = function get(name) {\n    return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;\n};\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */ Type.prototype.add = function add(object) {\n    if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id)) throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name)) throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n        if (object.parent) object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs) this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */ Type.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n        /* istanbul ignore if */ if (!this.fields || this.fields[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        /* istanbul ignore if */ if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Type.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ Type.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */ Type.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */ Type.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n    var fullName = this.fullName, types = [];\n    for(var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)types.push(this._fieldsArray[i].resolve().resolvedType);\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer: Writer,\n        types: types,\n        util: util\n    });\n    this.decode = decoder(this)({\n        Reader: Reader,\n        types: types,\n        util: util\n    });\n    this.verify = verifier(this)({\n        types: types,\n        util: util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types: types,\n        util: util\n    });\n    this.toObject = converter.toObject(this)({\n        types: types,\n        util: util\n    });\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n        originalThis.fromObject = this.fromObject;\n        this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n        originalThis.toObject = this.toObject;\n        this.toObject = wrapper.toObject.bind(originalThis);\n    // }\n    }\n    return this;\n};\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */ Type.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */ Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */ Type.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */ Type.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader)) reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */ Type.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */ Type.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */ /**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */ Type.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */ /**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */ Type.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/types.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/types.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Common type constants.\n * @namespace\n */ var types = exports;\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\nvar s = [\n    \"double\",\n    \"float\",\n    \"int32\",\n    \"uint32\",\n    \"sint32\",\n    \"fixed32\",\n    \"sfixed32\",\n    \"int64\",\n    \"uint64\",\n    \"sint64\",\n    \"fixed64\",\n    \"sfixed64\",\n    \"bool\",\n    \"string\",\n    \"bytes\" // 14\n];\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while(i < values.length)o[s[i + offset]] = values[i++];\n    return o;\n}\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */ types.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */ types.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */ types.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */ types.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */ types.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Various utility functions.\n * @namespace\n */ var util = module.exports = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js\");\nvar roots = __webpack_require__(/*! ./roots */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/roots.js\");\nvar Type, Enum;\nutil.codegen = __webpack_require__(/*! @protobufjs/codegen */ \"(ssr)/./node_modules/@protobufjs/codegen/index.js\");\nutil.fetch = __webpack_require__(/*! @protobufjs/fetch */ \"(ssr)/./node_modules/@protobufjs/fetch/index.js\");\nutil.path = __webpack_require__(/*! @protobufjs/path */ \"(ssr)/./node_modules/@protobufjs/path/index.js\");\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */ util.fs = util.inquire(\"fs\");\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */ util.toArray = function toArray(object) {\n    if (object) {\n        var keys = Object.keys(object), array = new Array(keys.length), index = 0;\n        while(index < keys.length)array[index] = object[keys[index++]];\n        return array;\n    }\n    return [];\n};\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */ util.toObject = function toObject(array) {\n    var object = {}, index = 0;\n    while(index < array.length){\n        var key = array[index++], val = array[index++];\n        if (val !== undefined) object[key] = val;\n    }\n    return object;\n};\nvar safePropBackslashRe = /\\\\/g, safePropQuoteRe = /\"/g;\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */ util.isReserved = function isReserved(name) {\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */ util.safeProp = function safeProp(prop) {\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop)) return '[\"' + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, '\\\\\"') + '\"]';\n    return \".\" + prop;\n};\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */ util.ucFirst = function ucFirst(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n};\nvar camelCaseRe = /_([a-z])/g;\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */ util.camelCase = function camelCase(str) {\n    return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {\n        return $1.toUpperCase();\n    });\n};\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */ util.compareFieldsById = function compareFieldsById(a, b) {\n    return a.id - b.id;\n};\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */ util.decorateType = function decorateType(ctor, typeName) {\n    /* istanbul ignore if */ if (ctor.$type) {\n        if (typeName && ctor.$type.name !== typeName) {\n            util.decorateRoot.remove(ctor.$type);\n            ctor.$type.name = typeName;\n            util.decorateRoot.add(ctor.$type);\n        }\n        return ctor.$type;\n    }\n    /* istanbul ignore next */ if (!Type) Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/type.js\");\n    var type = new Type(typeName || ctor.name);\n    util.decorateRoot.add(type);\n    type.ctor = ctor; // sets up .encode, .decode etc.\n    Object.defineProperty(ctor, \"$type\", {\n        value: type,\n        enumerable: false\n    });\n    Object.defineProperty(ctor.prototype, \"$type\", {\n        value: type,\n        enumerable: false\n    });\n    return type;\n};\nvar decorateEnumIndex = 0;\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */ util.decorateEnum = function decorateEnum(object) {\n    /* istanbul ignore if */ if (object.$type) return object.$type;\n    /* istanbul ignore next */ if (!Enum) Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\");\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n    util.decorateRoot.add(enm);\n    Object.defineProperty(object, \"$type\", {\n        value: enm,\n        enumerable: false\n    });\n    return enm;\n};\n/**\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\n * @param {Object.<string,*>} dst Destination object\n * @param {string} path dot '.' delimited path of the property to set\n * @param {Object} value the value to set\n * @param {boolean|undefined} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {Object.<string,*>} Destination object\n */ util.setProperty = function setProperty(dst, path, value, ifNotSet) {\n    function setProp(dst, path, value) {\n        var part = path.shift();\n        if (part === \"__proto__\" || part === \"prototype\") {\n            return dst;\n        }\n        if (path.length > 0) {\n            dst[part] = setProp(dst[part] || {}, path, value);\n        } else {\n            var prevValue = dst[part];\n            if (prevValue && ifNotSet) return dst;\n            if (prevValue) value = [].concat(prevValue).concat(value);\n            dst[part] = value;\n        }\n        return dst;\n    }\n    if (typeof dst !== \"object\") throw TypeError(\"dst must be an object\");\n    if (!path) throw TypeError(\"path must be specified\");\n    path = path.split(\".\");\n    return setProp(dst, path, value);\n};\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */ Object.defineProperty(util, \"decorateRoot\", {\n    get: function() {\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (__webpack_require__(/*! ./root */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/root.js\"))());\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/longbits.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/longbits.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = LongBits;\nvar util = __webpack_require__(/*! ../util/minimal */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js\");\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */ function LongBits(lo, hi) {\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n    /**\n     * Low bits.\n     * @type {number}\n     */ this.lo = lo >>> 0;\n    /**\n     * High bits.\n     * @type {number}\n     */ this.hi = hi >>> 0;\n}\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */ var zero = LongBits.zero = new LongBits(0, 0);\nzero.toNumber = function() {\n    return 0;\n};\nzero.zzEncode = zero.zzDecode = function() {\n    return this;\n};\nzero.length = function() {\n    return 1;\n};\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */ var zeroHash = LongBits.zeroHash = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */ LongBits.fromNumber = function fromNumber(value) {\n    if (value === 0) return zero;\n    var sign = value < 0;\n    if (sign) value = -value;\n    var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295) hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */ LongBits.from = function from(value) {\n    if (typeof value === \"number\") return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */ if (util.Long) value = util.Long.fromString(value);\n        else return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */ LongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;\n        if (!lo) hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */ LongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : {\n        low: this.lo | 0,\n        high: this.hi | 0,\n        unsigned: Boolean(unsigned)\n    };\n};\nvar charCodeAt = String.prototype.charCodeAt;\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */ LongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash) return zero;\n    return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);\n};\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */ LongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n};\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */ LongBits.prototype.zzEncode = function zzEncode() {\n    var mask = this.hi >> 31;\n    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo = (this.lo << 1 ^ mask) >>> 0;\n    return this;\n};\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */ LongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n    return this;\n};\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */ LongBits.prototype.length = function length() {\n    var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;\n    return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/longbits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar util = exports;\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"(ssr)/./node_modules/@protobufjs/aspromise/index.js\");\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"(ssr)/./node_modules/@protobufjs/base64/index.js\");\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"(ssr)/./node_modules/@protobufjs/eventemitter/index.js\");\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"(ssr)/./node_modules/@protobufjs/float/index.js\");\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"(ssr)/./node_modules/@protobufjs/inquire/index.js\");\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"(ssr)/./node_modules/@protobufjs/utf8/index.js\");\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"(ssr)/./node_modules/@protobufjs/pool/index.js\");\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/longbits.js\");\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */ util.isNode = Boolean(typeof global !== \"undefined\" && global && global.process && global.process.versions && global.process.versions.node);\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */ util.global = util.isNode && global ||  false && 0 || typeof self !== \"undefined\" && self || this; // eslint-disable-line no-invalid-this\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */ util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */ util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */ util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */ util.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */ util.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */ util.isset = /**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */ util.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */ /**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */ util.Buffer = function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */ return null;\n    }\n}();\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */ util.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */ return typeof sizeOrArray === \"number\" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === \"undefined\" ? sizeOrArray : new Uint8Array(sizeOrArray);\n};\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */ util.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */  : Array;\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */ /**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */ util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long || /* istanbul ignore next */ util.global.Long || util.inquire(\"long\");\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */ util.key2Re = /^true|false|0|1$/;\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */ util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */ util.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */ util.longToHash = function longToHash(value) {\n    return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;\n};\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */ util.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */ function merge(dst, src, ifNotSet) {\n    for(var keys = Object.keys(src), i = 0; i < keys.length; ++i)if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];\n    return dst;\n}\nutil.merge = merge;\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */ util.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */ function newError(name) {\n    function CustomError(message, properties) {\n        if (!(this instanceof CustomError)) return new CustomError(message, properties);\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n        Object.defineProperty(this, \"message\", {\n            get: function() {\n                return message;\n            }\n        });\n        /* istanbul ignore next */ if (Error.captureStackTrace) Error.captureStackTrace(this, CustomError);\n        else Object.defineProperty(this, \"stack\", {\n            value: new Error().stack || \"\"\n        });\n        if (properties) merge(this, properties);\n    }\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        },\n        name: {\n            get: function get() {\n                return name;\n            },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true\n        },\n        toString: {\n            value: function value() {\n                return this.name + \": \" + this.message;\n            },\n            writable: true,\n            enumerable: false,\n            configurable: true\n        }\n    });\n    return CustomError;\n}\nutil.newError = newError;\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */ util.ProtocolError = newError(\"ProtocolError\");\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */ /**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */ /**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */ util.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for(var i = 0; i < fieldNames.length; ++i)fieldMap[fieldNames[i]] = 1;\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */ return function() {\n        for(var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];\n    };\n};\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */ /**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */ util.oneOfSetter = function setOneOf(fieldNames) {\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */ return function(name) {\n        for(var i = 0; i < fieldNames.length; ++i)if (fieldNames[i] !== name) delete this[fieldNames[i]];\n    };\n};\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */ util.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */ if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */ function Buffer_from(value, encoding) {\n        return new Buffer(value, encoding);\n    };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */ function Buffer_allocUnsafe(size) {\n        return new Buffer(size);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/verifier.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/verifier.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = verifier;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/enum.js\"), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util.js\");\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\" + field.keyType + \"}\" : \"\") + \" expected\";\n}\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */ function genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */ if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) {\n            gen(\"switch(%s){\", ref)(\"default:\")(\"return%j\", invalid(field, \"enum value\"));\n            for(var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j)gen(\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen(\"break\")(\"}\");\n        } else {\n            gen(\"{\")(\"var e=types[%i].verify(%s);\", fieldIndex, ref)(\"if(e)\")(\"return%j+e\", field.name + \".\")(\"}\");\n        }\n    } else {\n        switch(field.type){\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\":\n                gen(\"if(!util.isInteger(%s))\", ref)(\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\":\n                gen(\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)(\"return%j\", invalid(field, \"integer|Long\"));\n                break;\n            case \"float\":\n            case \"double\":\n                gen('if(typeof %s!==\"number\")', ref)(\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\":\n                gen('if(typeof %s!==\"boolean\")', ref)(\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\":\n                gen(\"if(!util.isString(%s))\", ref)(\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\":\n                gen('if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))', ref, ref, ref)(\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n/* eslint-enable no-unexpected-multiline */ }\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */ function genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */ switch(field.keyType){\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\":\n            gen(\"if(!util.key32Re.test(%s))\", ref)(\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\":\n            gen(\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n            (\"return%j\", invalid(field, \"integer|Long key\"));\n            break;\n        case \"bool\":\n            gen(\"if(!util.key2Re.test(%s))\", ref)(\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n/* eslint-enable no-unexpected-multiline */ }\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */ function verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */ var gen = util.codegen([\n        \"m\"\n    ], mtype.name + \"$verify\")('if(typeof m!==\"object\"||m===null)')(\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray, seenFirstField = {};\n    if (oneofs.length) gen(\"var p={}\");\n    for(var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i){\n        var field = mtype._fieldsArray[i].resolve(), ref = \"m\" + util.safeProp(field.name);\n        if (field.optional) gen(\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n        // map fields\n        if (field.map) {\n            gen(\"if(!util.isObject(%s))\", ref)(\"return%j\", invalid(field, \"object\"))(\"var k=Object.keys(%s)\", ref)(\"for(var i=0;i<k.length;++i){\");\n            genVerifyKey(gen, field, \"k[i]\");\n            genVerifyValue(gen, field, i, ref + \"[k[i]]\")(\"}\");\n        // repeated fields\n        } else if (field.repeated) {\n            gen(\"if(!Array.isArray(%s))\", ref)(\"return%j\", invalid(field, \"array\"))(\"for(var i=0;i<%s.length;++i){\", ref);\n            genVerifyValue(gen, field, i, ref + \"[i]\")(\"}\");\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen(\"if(p%s===1)\", oneofProp)(\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen(\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen(\"}\");\n    }\n    return gen(\"return null\");\n/* eslint-enable no-unexpected-multiline */ }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdmVyaWZpZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixJQUFJQyxPQUFZQyxtQkFBT0EsQ0FBQyxzRkFBUSxHQUM1QkMsT0FBWUQsbUJBQU9BLENBQUMsc0ZBQVE7QUFFaEMsU0FBU0UsUUFBUUMsS0FBSyxFQUFFQyxRQUFRO0lBQzVCLE9BQU9ELE1BQU1FLElBQUksR0FBRyxPQUFPRCxXQUFZRCxDQUFBQSxNQUFNRyxRQUFRLElBQUlGLGFBQWEsVUFBVSxPQUFPRCxNQUFNSSxHQUFHLElBQUlILGFBQWEsV0FBVyxRQUFNRCxNQUFNSyxPQUFPLEdBQUMsTUFBTSxFQUFDLElBQUs7QUFDaEs7QUFFQTs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNDLGVBQWVDLEdBQUcsRUFBRVAsS0FBSyxFQUFFUSxVQUFVLEVBQUVDLEdBQUc7SUFDL0MsMENBQTBDLEdBQzFDLElBQUlULE1BQU1VLFlBQVksRUFBRTtRQUNwQixJQUFJVixNQUFNVSxZQUFZLFlBQVlkLE1BQU07WUFBRVcsSUFDckMsZUFBZUUsS0FDWCxZQUNJLFlBQVlWLFFBQVFDLE9BQU87WUFDcEMsSUFBSyxJQUFJVyxPQUFPQyxPQUFPRCxJQUFJLENBQUNYLE1BQU1VLFlBQVksQ0FBQ0csTUFBTSxHQUFHQyxJQUFJLEdBQUdBLElBQUlILEtBQUtJLE1BQU0sRUFBRSxFQUFFRCxFQUFHUCxJQUNoRixZQUFZUCxNQUFNVSxZQUFZLENBQUNHLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDRyxFQUFFLENBQUM7WUFDbkRQLElBQ1MsU0FDUjtRQUNMLE9BQU87WUFDSEEsSUFDQyxLQUNJLCtCQUErQkMsWUFBWUMsS0FDM0MsU0FDSSxjQUFjVCxNQUFNRSxJQUFJLEdBQUcsS0FDbkM7UUFDTDtJQUNKLE9BQU87UUFDSCxPQUFRRixNQUFNZ0IsSUFBSTtZQUNkLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7WUFDTCxLQUFLO2dCQUFZVCxJQUNaLDJCQUEyQkUsS0FDdkIsWUFBWVYsUUFBUUMsT0FBTztnQkFDaEM7WUFDSixLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztnQkFBWU8sSUFDWixtRkFBbUZFLEtBQUtBLEtBQUtBLEtBQUtBLEtBQzlGLFlBQVlWLFFBQVFDLE9BQU87Z0JBQ2hDO1lBQ0osS0FBSztZQUNMLEtBQUs7Z0JBQVVPLElBQ1YsNEJBQThCRSxLQUMxQixZQUFZVixRQUFRQyxPQUFPO2dCQUNoQztZQUNKLEtBQUs7Z0JBQVFPLElBQ1IsNkJBQStCRSxLQUMzQixZQUFZVixRQUFRQyxPQUFPO2dCQUNoQztZQUNKLEtBQUs7Z0JBQVVPLElBQ1YsMEJBQTBCRSxLQUN0QixZQUFZVixRQUFRQyxPQUFPO2dCQUNoQztZQUNKLEtBQUs7Z0JBQVNPLElBQ1QsNkRBQStERSxLQUFLQSxLQUFLQSxLQUNyRSxZQUFZVixRQUFRQyxPQUFPO2dCQUNoQztRQUNSO0lBQ0o7SUFDQSxPQUFPTztBQUNQLHlDQUF5QyxHQUM3QztBQUVBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTVSxhQUFhVixHQUFHLEVBQUVQLEtBQUssRUFBRVMsR0FBRztJQUNqQywwQ0FBMEMsR0FDMUMsT0FBUVQsTUFBTUssT0FBTztRQUNqQixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUFZRSxJQUNaLDhCQUE4QkUsS0FDMUIsWUFBWVYsUUFBUUMsT0FBTztZQUNoQztRQUNKLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQVlPLElBQ1osOEJBQThCRSxLQUFLLHVDQUF1QzthQUN0RSxZQUFZVixRQUFRQyxPQUFPO1lBQ2hDO1FBQ0osS0FBSztZQUFRTyxJQUNSLDZCQUE2QkUsS0FDekIsWUFBWVYsUUFBUUMsT0FBTztZQUNoQztJQUNSO0lBQ0EsT0FBT087QUFDUCx5Q0FBeUMsR0FDN0M7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU1osU0FBU3VCLEtBQUs7SUFDbkIsMENBQTBDLEdBRTFDLElBQUlYLE1BQU1ULEtBQUtxQixPQUFPLENBQUM7UUFBQztLQUFJLEVBQUVELE1BQU1oQixJQUFJLEdBQUcsV0FDMUMscUNBQ0ksWUFBWTtJQUNqQixJQUFJa0IsU0FBU0YsTUFBTUcsV0FBVyxFQUMxQkMsaUJBQWlCLENBQUM7SUFDdEIsSUFBSUYsT0FBT0wsTUFBTSxFQUFFUixJQUNsQjtJQUVELElBQUssSUFBSWdCLElBQUksR0FBR0EsSUFBSSxlQUFlLEdBQUdMLE1BQU1NLFdBQVcsQ0FBQ1QsTUFBTSxFQUFFLEVBQUVRLEVBQUc7UUFDakUsSUFBSXZCLFFBQVFrQixNQUFNTyxZQUFZLENBQUNGLEVBQUUsQ0FBQ0csT0FBTyxJQUNyQ2pCLE1BQVEsTUFBTVgsS0FBSzZCLFFBQVEsQ0FBQzNCLE1BQU1FLElBQUk7UUFFMUMsSUFBSUYsTUFBTTRCLFFBQVEsRUFBRXJCLElBQ25CLHVDQUF1Q0UsS0FBS1QsTUFBTUUsSUFBSSxHQUFHLDRCQUE0QjtRQUV0RixhQUFhO1FBQ2IsSUFBSUYsTUFBTUksR0FBRyxFQUFFO1lBQUVHLElBQ1osMEJBQTBCRSxLQUN0QixZQUFZVixRQUFRQyxPQUFPLFdBQy9CLHlCQUF5QlMsS0FDekI7WUFDR1EsYUFBYVYsS0FBS1AsT0FBTztZQUN6Qk0sZUFBZUMsS0FBS1AsT0FBT3VCLEdBQUdkLE1BQU0sVUFDdkM7UUFFTCxrQkFBa0I7UUFDbEIsT0FBTyxJQUFJVCxNQUFNRyxRQUFRLEVBQUU7WUFBRUksSUFDeEIsMEJBQTBCRSxLQUN0QixZQUFZVixRQUFRQyxPQUFPLFVBQy9CLGlDQUFpQ1M7WUFDOUJILGVBQWVDLEtBQUtQLE9BQU91QixHQUFHZCxNQUFNLE9BQ3ZDO1FBRUwsNkJBQTZCO1FBQzdCLE9BQU87WUFDSCxJQUFJVCxNQUFNNkIsTUFBTSxFQUFFO2dCQUNkLElBQUlDLFlBQVloQyxLQUFLNkIsUUFBUSxDQUFDM0IsTUFBTTZCLE1BQU0sQ0FBQzNCLElBQUk7Z0JBQy9DLElBQUlvQixjQUFjLENBQUN0QixNQUFNNkIsTUFBTSxDQUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBR0ssSUFDaEQsZUFBZXVCLFdBQ1gsWUFBWTlCLE1BQU02QixNQUFNLENBQUMzQixJQUFJLEdBQUc7Z0JBQ2pDb0IsY0FBYyxDQUFDdEIsTUFBTTZCLE1BQU0sQ0FBQzNCLElBQUksQ0FBQyxHQUFHO2dCQUNwQ0ssSUFDSCxTQUFTdUI7WUFDVjtZQUNBeEIsZUFBZUMsS0FBS1AsT0FBT3VCLEdBQUdkO1FBQ2xDO1FBQ0EsSUFBSVQsTUFBTTRCLFFBQVEsRUFBRXJCLElBQ25CO0lBQ0w7SUFDQSxPQUFPQSxJQUNOO0FBQ0QseUNBQXlDLEdBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZjLW5leHRqcy1zaGFkY24vLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdmVyaWZpZXIuanM/NWFkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gdmVyaWZpZXI7XG5cbnZhciBFbnVtICAgICAgPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxuICAgIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbmZ1bmN0aW9uIGludmFsaWQoZmllbGQsIGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIGZpZWxkLm5hbWUgKyBcIjogXCIgKyBleHBlY3RlZCArIChmaWVsZC5yZXBlYXRlZCAmJiBleHBlY3RlZCAhPT0gXCJhcnJheVwiID8gXCJbXVwiIDogZmllbGQubWFwICYmIGV4cGVjdGVkICE9PSBcIm9iamVjdFwiID8gXCJ7azpcIitmaWVsZC5rZXlUeXBlK1wifVwiIDogXCJcIikgKyBcIiBleHBlY3RlZFwiO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHBhcnRpYWwgdmFsdWUgdmVyaWZpZXIuXG4gKiBAcGFyYW0ge0NvZGVnZW59IGdlbiBDb2RlZ2VuIGluc3RhbmNlXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBSZWZsZWN0ZWQgZmllbGRcbiAqIEBwYXJhbSB7bnVtYmVyfSBmaWVsZEluZGV4IEZpZWxkIGluZGV4XG4gKiBAcGFyYW0ge3N0cmluZ30gcmVmIFZhcmlhYmxlIHJlZmVyZW5jZVxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gZ2VuVmVyaWZ5VmFsdWUoZ2VuLCBmaWVsZCwgZmllbGRJbmRleCwgcmVmKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbiAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlKSB7XG4gICAgICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSB7IGdlblxuICAgICAgICAgICAgKFwic3dpdGNoKCVzKXtcIiwgcmVmKVxuICAgICAgICAgICAgICAgIChcImRlZmF1bHQ6XCIpXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiZW51bSB2YWx1ZVwiKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMoZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlcyksIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7ICsraikgZ2VuXG4gICAgICAgICAgICAgICAgKFwiY2FzZSAlaTpcIiwgZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlc1trZXlzW2pdXSk7XG4gICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAgICAgKFwiYnJlYWtcIilcbiAgICAgICAgICAgIChcIn1cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZW5cbiAgICAgICAgICAgIChcIntcIilcbiAgICAgICAgICAgICAgICAoXCJ2YXIgZT10eXBlc1slaV0udmVyaWZ5KCVzKTtcIiwgZmllbGRJbmRleCwgcmVmKVxuICAgICAgICAgICAgICAgIChcImlmKGUpXCIpXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqK2VcIiwgZmllbGQubmFtZSArIFwiLlwiKVxuICAgICAgICAgICAgKFwifVwiKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImludDMyXCI6XG4gICAgICAgICAgICBjYXNlIFwidWludDMyXCI6XG4gICAgICAgICAgICBjYXNlIFwic2ludDMyXCI6XG4gICAgICAgICAgICBjYXNlIFwiZml4ZWQzMlwiOlxuICAgICAgICAgICAgY2FzZSBcInNmaXhlZDMyXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKCF1dGlsLmlzSW50ZWdlciglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJpbnRlZ2VyXCIpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJpbnQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcInVpbnQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcInNpbnQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcImZpeGVkNjRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzZml4ZWQ2NFwiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJpZighdXRpbC5pc0ludGVnZXIoJXMpJiYhKCVzJiZ1dGlsLmlzSW50ZWdlciglcy5sb3cpJiZ1dGlsLmlzSW50ZWdlciglcy5oaWdoKSkpXCIsIHJlZiwgcmVmLCByZWYsIHJlZilcbiAgICAgICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJpbnRlZ2VyfExvbmdcIikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImZsb2F0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZG91YmxlXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKHR5cGVvZiAlcyE9PVxcXCJudW1iZXJcXFwiKVwiLCByZWYpXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwibnVtYmVyXCIpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJib29sXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKHR5cGVvZiAlcyE9PVxcXCJib29sZWFuXFxcIilcIiwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImJvb2xlYW5cIikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJpZighdXRpbC5pc1N0cmluZyglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJzdHJpbmdcIikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJ5dGVzXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKCEoJXMmJnR5cGVvZiAlcy5sZW5ndGg9PT1cXFwibnVtYmVyXFxcInx8dXRpbC5pc1N0cmluZyglcykpKVwiLCByZWYsIHJlZiwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImJ1ZmZlclwiKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGdlbjtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcGFydGlhbCBrZXkgdmVyaWZpZXIuXG4gKiBAcGFyYW0ge0NvZGVnZW59IGdlbiBDb2RlZ2VuIGluc3RhbmNlXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBSZWZsZWN0ZWQgZmllbGRcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWYgVmFyaWFibGUgcmVmZXJlbmNlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICogQGlnbm9yZVxuICovXG5mdW5jdGlvbiBnZW5WZXJpZnlLZXkoZ2VuLCBmaWVsZCwgcmVmKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbiAgICBzd2l0Y2ggKGZpZWxkLmtleVR5cGUpIHtcbiAgICAgICAgY2FzZSBcImludDMyXCI6XG4gICAgICAgIGNhc2UgXCJ1aW50MzJcIjpcbiAgICAgICAgY2FzZSBcInNpbnQzMlwiOlxuICAgICAgICBjYXNlIFwiZml4ZWQzMlwiOlxuICAgICAgICBjYXNlIFwic2ZpeGVkMzJcIjogZ2VuXG4gICAgICAgICAgICAoXCJpZighdXRpbC5rZXkzMlJlLnRlc3QoJXMpKVwiLCByZWYpXG4gICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJpbnRlZ2VyIGtleVwiKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgIGNhc2UgXCJ1aW50NjRcIjpcbiAgICAgICAgY2FzZSBcInNpbnQ2NFwiOlxuICAgICAgICBjYXNlIFwiZml4ZWQ2NFwiOlxuICAgICAgICBjYXNlIFwic2ZpeGVkNjRcIjogZ2VuXG4gICAgICAgICAgICAoXCJpZighdXRpbC5rZXk2NFJlLnRlc3QoJXMpKVwiLCByZWYpIC8vIHNlZSBjb21tZW50IGFib3ZlOiB4IGlzIG9rLCBkIGlzIG5vdFxuICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiaW50ZWdlcnxMb25nIGtleVwiKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJvb2xcIjogZ2VuXG4gICAgICAgICAgICAoXCJpZighdXRpbC5rZXkyUmUudGVzdCglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImJvb2xlYW4ga2V5XCIpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gZ2VuO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSB2ZXJpZmllciBzcGVjaWZpYyB0byB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UgdHlwZS5cbiAqIEBwYXJhbSB7VHlwZX0gbXR5cGUgTWVzc2FnZSB0eXBlXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiB2ZXJpZmllcihtdHlwZSkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXG5cbiAgICB2YXIgZ2VuID0gdXRpbC5jb2RlZ2VuKFtcIm1cIl0sIG10eXBlLm5hbWUgKyBcIiR2ZXJpZnlcIilcbiAgICAoXCJpZih0eXBlb2YgbSE9PVxcXCJvYmplY3RcXFwifHxtPT09bnVsbClcIilcbiAgICAgICAgKFwicmV0dXJuJWpcIiwgXCJvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgdmFyIG9uZW9mcyA9IG10eXBlLm9uZW9mc0FycmF5LFxuICAgICAgICBzZWVuRmlyc3RGaWVsZCA9IHt9O1xuICAgIGlmIChvbmVvZnMubGVuZ3RoKSBnZW5cbiAgICAoXCJ2YXIgcD17fVwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gbXR5cGUuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGZpZWxkID0gbXR5cGUuX2ZpZWxkc0FycmF5W2ldLnJlc29sdmUoKSxcbiAgICAgICAgICAgIHJlZiAgID0gXCJtXCIgKyB1dGlsLnNhZmVQcm9wKGZpZWxkLm5hbWUpO1xuXG4gICAgICAgIGlmIChmaWVsZC5vcHRpb25hbCkgZ2VuXG4gICAgICAgIChcImlmKCVzIT1udWxsJiZtLmhhc093blByb3BlcnR5KCVqKSl7XCIsIHJlZiwgZmllbGQubmFtZSk7IC8vICE9PSB1bmRlZmluZWQgJiYgIT09IG51bGxcblxuICAgICAgICAvLyBtYXAgZmllbGRzXG4gICAgICAgIGlmIChmaWVsZC5tYXApIHsgZ2VuXG4gICAgICAgICAgICAoXCJpZighdXRpbC5pc09iamVjdCglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcIm9iamVjdFwiKSlcbiAgICAgICAgICAgIChcInZhciBrPU9iamVjdC5rZXlzKCVzKVwiLCByZWYpXG4gICAgICAgICAgICAoXCJmb3IodmFyIGk9MDtpPGsubGVuZ3RoOysraSl7XCIpO1xuICAgICAgICAgICAgICAgIGdlblZlcmlmeUtleShnZW4sIGZpZWxkLCBcImtbaV1cIik7XG4gICAgICAgICAgICAgICAgZ2VuVmVyaWZ5VmFsdWUoZ2VuLCBmaWVsZCwgaSwgcmVmICsgXCJba1tpXV1cIilcbiAgICAgICAgICAgIChcIn1cIik7XG5cbiAgICAgICAgLy8gcmVwZWF0ZWQgZmllbGRzXG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQucmVwZWF0ZWQpIHsgZ2VuXG4gICAgICAgICAgICAoXCJpZighQXJyYXkuaXNBcnJheSglcykpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImFycmF5XCIpKVxuICAgICAgICAgICAgKFwiZm9yKHZhciBpPTA7aTwlcy5sZW5ndGg7KytpKXtcIiwgcmVmKTtcbiAgICAgICAgICAgICAgICBnZW5WZXJpZnlWYWx1ZShnZW4sIGZpZWxkLCBpLCByZWYgKyBcIltpXVwiKVxuICAgICAgICAgICAgKFwifVwiKTtcblxuICAgICAgICAvLyByZXF1aXJlZCBvciBwcmVzZW50IGZpZWxkc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZpZWxkLnBhcnRPZikge1xuICAgICAgICAgICAgICAgIHZhciBvbmVvZlByb3AgPSB1dGlsLnNhZmVQcm9wKGZpZWxkLnBhcnRPZi5uYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VlbkZpcnN0RmllbGRbZmllbGQucGFydE9mLm5hbWVdID09PSAxKSBnZW5cbiAgICAgICAgICAgIChcImlmKHAlcz09PTEpXCIsIG9uZW9mUHJvcClcbiAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBmaWVsZC5wYXJ0T2YubmFtZSArIFwiOiBtdWx0aXBsZSB2YWx1ZXNcIik7XG4gICAgICAgICAgICAgICAgc2VlbkZpcnN0RmllbGRbZmllbGQucGFydE9mLm5hbWVdID0gMTtcbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgICAgIChcInAlcz0xXCIsIG9uZW9mUHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZW5WZXJpZnlWYWx1ZShnZW4sIGZpZWxkLCBpLCByZWYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZC5vcHRpb25hbCkgZ2VuXG4gICAgICAgIChcIn1cIik7XG4gICAgfVxuICAgIHJldHVybiBnZW5cbiAgICAoXCJyZXR1cm4gbnVsbFwiKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXG59Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ2ZXJpZmllciIsIkVudW0iLCJyZXF1aXJlIiwidXRpbCIsImludmFsaWQiLCJmaWVsZCIsImV4cGVjdGVkIiwibmFtZSIsInJlcGVhdGVkIiwibWFwIiwia2V5VHlwZSIsImdlblZlcmlmeVZhbHVlIiwiZ2VuIiwiZmllbGRJbmRleCIsInJlZiIsInJlc29sdmVkVHlwZSIsImtleXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJqIiwibGVuZ3RoIiwidHlwZSIsImdlblZlcmlmeUtleSIsIm10eXBlIiwiY29kZWdlbiIsIm9uZW9mcyIsIm9uZW9mc0FycmF5Iiwic2VlbkZpcnN0RmllbGQiLCJpIiwiZmllbGRzQXJyYXkiLCJfZmllbGRzQXJyYXkiLCJyZXNvbHZlIiwic2FmZVByb3AiLCJvcHRpb25hbCIsInBhcnRPZiIsIm9uZW9mUHJvcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/verifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/wrappers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/wrappers.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */ var wrappers = exports;\nvar Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/message.js\");\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */ /**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */ /**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */ // Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n    fromObject: function(object) {\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n            // Only use fully qualified type name after the last '/'\n            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */ if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ? object[\"@type\"].slice(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                if (type_url.indexOf(\"/\") === -1) {\n                    type_url = \"/\" + type_url;\n                }\n                return this.create({\n                    type_url: type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n        return this.fromObject(object);\n    },\n    toObject: function(message, options) {\n        // Default prefix\n        var googleApi = \"type.googleapis.com/\";\n        var prefix = \"\";\n        var name = \"\";\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            // Separate the prefix used\n            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */ if (type) message = type.decode(message.value);\n        }\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            var messageName = message.$type.fullName[0] === \".\" ? message.$type.fullName.slice(1) : message.$type.fullName;\n            // Default to type.googleapis.com prefix if no prefix is used\n            if (prefix === \"\") {\n                prefix = googleApi;\n            }\n            name = prefix + messageName;\n            object[\"@type\"] = name;\n            return object;\n        }\n        return this.toObject(message, options);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7OztDQUlDLEdBQ0QsSUFBSUEsV0FBV0M7QUFFZixJQUFJQyxVQUFVQyxtQkFBT0EsQ0FBQyw0RkFBVztBQUVqQzs7Ozs7OztDQU9DLEdBRUQ7Ozs7Ozs7O0NBUUMsR0FFRDs7Ozs7Q0FLQyxHQUVELHlCQUF5QjtBQUN6QkgsUUFBUSxDQUFDLHVCQUF1QixHQUFHO0lBRS9CSSxZQUFZLFNBQVNDLE1BQU07UUFFdkIsOEJBQThCO1FBQzlCLElBQUlBLFVBQVVBLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDMUIsd0RBQXdEO1lBQ3pELElBQUlDLE9BQU9ELE1BQU0sQ0FBQyxRQUFRLENBQUNFLFNBQVMsQ0FBQ0YsTUFBTSxDQUFDLFFBQVEsQ0FBQ0csV0FBVyxDQUFDLE9BQU87WUFDeEUsSUFBSUMsT0FBTyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0o7WUFDdkIsd0JBQXdCLEdBQ3hCLElBQUlHLE1BQU07Z0JBQ04sdUNBQXVDO2dCQUN2QyxJQUFJRSxXQUFXTixNQUFNLENBQUMsUUFBUSxDQUFDTyxNQUFNLENBQUMsT0FBTyxNQUN6Q1AsTUFBTSxDQUFDLFFBQVEsQ0FBQ1EsS0FBSyxDQUFDLEtBQUtSLE1BQU0sQ0FBQyxRQUFRO2dCQUM5Qyw4REFBOEQ7Z0JBQzlELElBQUlNLFNBQVNHLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRztvQkFDOUJILFdBQVcsTUFBTUE7Z0JBQ3JCO2dCQUNBLE9BQU8sSUFBSSxDQUFDSSxNQUFNLENBQUM7b0JBQ2ZKLFVBQVVBO29CQUNWSyxPQUFPUCxLQUFLUSxNQUFNLENBQUNSLEtBQUtMLFVBQVUsQ0FBQ0MsU0FBU2EsTUFBTTtnQkFDdEQ7WUFDSjtRQUNKO1FBRUEsT0FBTyxJQUFJLENBQUNkLFVBQVUsQ0FBQ0M7SUFDM0I7SUFFQWMsVUFBVSxTQUFTQyxPQUFPLEVBQUVDLE9BQU87UUFFL0IsaUJBQWlCO1FBQ2pCLElBQUlDLFlBQVk7UUFDaEIsSUFBSUMsU0FBUztRQUNiLElBQUlqQixPQUFPO1FBRVgseUNBQXlDO1FBQ3pDLElBQUllLFdBQVdBLFFBQVFHLElBQUksSUFBSUosUUFBUVQsUUFBUSxJQUFJUyxRQUFRSixLQUFLLEVBQUU7WUFDOUQsd0RBQXdEO1lBQ3hEVixPQUFPYyxRQUFRVCxRQUFRLENBQUNKLFNBQVMsQ0FBQ2EsUUFBUVQsUUFBUSxDQUFDSCxXQUFXLENBQUMsT0FBTztZQUN0RSwyQkFBMkI7WUFDM0JlLFNBQVNILFFBQVFULFFBQVEsQ0FBQ0osU0FBUyxDQUFDLEdBQUdhLFFBQVFULFFBQVEsQ0FBQ0gsV0FBVyxDQUFDLE9BQU87WUFDM0UsSUFBSUMsT0FBTyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0o7WUFDdkIsd0JBQXdCLEdBQ3hCLElBQUlHLE1BQ0FXLFVBQVVYLEtBQUtnQixNQUFNLENBQUNMLFFBQVFKLEtBQUs7UUFDM0M7UUFFQSx5QkFBeUI7UUFDekIsSUFBSSxDQUFFSSxDQUFBQSxtQkFBbUIsSUFBSSxDQUFDTSxJQUFJLEtBQUtOLG1CQUFtQmxCLFNBQVM7WUFDL0QsSUFBSUcsU0FBU2UsUUFBUU8sS0FBSyxDQUFDUixRQUFRLENBQUNDLFNBQVNDO1lBQzdDLElBQUlPLGNBQWNSLFFBQVFPLEtBQUssQ0FBQ0UsUUFBUSxDQUFDLEVBQUUsS0FBSyxNQUM1Q1QsUUFBUU8sS0FBSyxDQUFDRSxRQUFRLENBQUNoQixLQUFLLENBQUMsS0FBS08sUUFBUU8sS0FBSyxDQUFDRSxRQUFRO1lBQzVELDZEQUE2RDtZQUM3RCxJQUFJTixXQUFXLElBQUk7Z0JBQ2ZBLFNBQVNEO1lBQ2I7WUFDQWhCLE9BQU9pQixTQUFTSztZQUNoQnZCLE1BQU0sQ0FBQyxRQUFRLEdBQUdDO1lBQ2xCLE9BQU9EO1FBQ1g7UUFFQSxPQUFPLElBQUksQ0FBQ2MsUUFBUSxDQUFDQyxTQUFTQztJQUNsQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmZjLW5leHRqcy1zaGFkY24vLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JhcHBlcnMuanM/NWQ1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBXcmFwcGVycyBmb3IgY29tbW9uIHR5cGVzLlxuICogQHR5cGUge09iamVjdC48c3RyaW5nLElXcmFwcGVyPn1cbiAqIEBjb25zdFxuICovXG52YXIgd3JhcHBlcnMgPSBleHBvcnRzO1xuXG52YXIgTWVzc2FnZSA9IHJlcXVpcmUoXCIuL21lc3NhZ2VcIik7XG5cbi8qKlxuICogRnJvbSBvYmplY3QgY29udmVydGVyIHBhcnQgb2YgYW4ge0BsaW5rIElXcmFwcGVyfS5cbiAqIEB0eXBlZGVmIFdyYXBwZXJGcm9tT2JqZWN0Q29udmVydGVyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBvYmplY3QgUGxhaW4gb2JqZWN0XG4gKiBAcmV0dXJucyB7TWVzc2FnZTx7fT59IE1lc3NhZ2UgaW5zdGFuY2VcbiAqIEB0aGlzIFR5cGVcbiAqL1xuXG4vKipcbiAqIFRvIG9iamVjdCBjb252ZXJ0ZXIgcGFydCBvZiBhbiB7QGxpbmsgSVdyYXBwZXJ9LlxuICogQHR5cGVkZWYgV3JhcHBlclRvT2JqZWN0Q29udmVydGVyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge01lc3NhZ2U8e30+fSBtZXNzYWdlIE1lc3NhZ2UgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICogQHRoaXMgVHlwZVxuICovXG5cbi8qKlxuICogQ29tbW9uIHR5cGUgd3JhcHBlciBwYXJ0IG9mIHtAbGluayB3cmFwcGVyc30uXG4gKiBAaW50ZXJmYWNlIElXcmFwcGVyXG4gKiBAcHJvcGVydHkge1dyYXBwZXJGcm9tT2JqZWN0Q29udmVydGVyfSBbZnJvbU9iamVjdF0gRnJvbSBvYmplY3QgY29udmVydGVyXG4gKiBAcHJvcGVydHkge1dyYXBwZXJUb09iamVjdENvbnZlcnRlcn0gW3RvT2JqZWN0XSBUbyBvYmplY3QgY29udmVydGVyXG4gKi9cblxuLy8gQ3VzdG9tIHdyYXBwZXIgZm9yIEFueVxud3JhcHBlcnNbXCIuZ29vZ2xlLnByb3RvYnVmLkFueVwiXSA9IHtcblxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uKG9iamVjdCkge1xuXG4gICAgICAgIC8vIHVud3JhcCB2YWx1ZSB0eXBlIGlmIG1hcHBlZFxuICAgICAgICBpZiAob2JqZWN0ICYmIG9iamVjdFtcIkB0eXBlXCJdKSB7XG4gICAgICAgICAgICAgLy8gT25seSB1c2UgZnVsbHkgcXVhbGlmaWVkIHR5cGUgbmFtZSBhZnRlciB0aGUgbGFzdCAnLydcbiAgICAgICAgICAgIHZhciBuYW1lID0gb2JqZWN0W1wiQHR5cGVcIl0uc3Vic3RyaW5nKG9iamVjdFtcIkB0eXBlXCJdLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSB0aGlzLmxvb2t1cChuYW1lKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgICAgIC8vIHR5cGVfdXJsIGRvZXMgbm90IGFjY2VwdCBsZWFkaW5nIFwiLlwiXG4gICAgICAgICAgICAgICAgdmFyIHR5cGVfdXJsID0gb2JqZWN0W1wiQHR5cGVcIl0uY2hhckF0KDApID09PSBcIi5cIiA/XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdFtcIkB0eXBlXCJdLnNsaWNlKDEpIDogb2JqZWN0W1wiQHR5cGVcIl07XG4gICAgICAgICAgICAgICAgLy8gdHlwZV91cmwgcHJlZml4IGlzIG9wdGlvbmFsLCBidXQgcGF0aCBzZXBlcmF0b3IgaXMgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICBpZiAodHlwZV91cmwuaW5kZXhPZihcIi9cIikgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVfdXJsID0gXCIvXCIgKyB0eXBlX3VybDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZV91cmw6IHR5cGVfdXJsLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHlwZS5lbmNvZGUodHlwZS5mcm9tT2JqZWN0KG9iamVjdCkpLmZpbmlzaCgpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tT2JqZWN0KG9iamVjdCk7XG4gICAgfSxcblxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihtZXNzYWdlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgLy8gRGVmYXVsdCBwcmVmaXhcbiAgICAgICAgdmFyIGdvb2dsZUFwaSA9IFwidHlwZS5nb29nbGVhcGlzLmNvbS9cIjtcbiAgICAgICAgdmFyIHByZWZpeCA9IFwiXCI7XG4gICAgICAgIHZhciBuYW1lID0gXCJcIjtcblxuICAgICAgICAvLyBkZWNvZGUgdmFsdWUgaWYgcmVxdWVzdGVkIGFuZCB1bm1hcHBlZFxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmpzb24gJiYgbWVzc2FnZS50eXBlX3VybCAmJiBtZXNzYWdlLnZhbHVlKSB7XG4gICAgICAgICAgICAvLyBPbmx5IHVzZSBmdWxseSBxdWFsaWZpZWQgdHlwZSBuYW1lIGFmdGVyIHRoZSBsYXN0ICcvJ1xuICAgICAgICAgICAgbmFtZSA9IG1lc3NhZ2UudHlwZV91cmwuc3Vic3RyaW5nKG1lc3NhZ2UudHlwZV91cmwubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XG4gICAgICAgICAgICAvLyBTZXBhcmF0ZSB0aGUgcHJlZml4IHVzZWRcbiAgICAgICAgICAgIHByZWZpeCA9IG1lc3NhZ2UudHlwZV91cmwuc3Vic3RyaW5nKDAsIG1lc3NhZ2UudHlwZV91cmwubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMubG9va3VwKG5hbWUpO1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmICh0eXBlKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB0eXBlLmRlY29kZShtZXNzYWdlLnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdyYXAgdmFsdWUgaWYgdW5tYXBwZWRcbiAgICAgICAgaWYgKCEobWVzc2FnZSBpbnN0YW5jZW9mIHRoaXMuY3RvcikgJiYgbWVzc2FnZSBpbnN0YW5jZW9mIE1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBtZXNzYWdlLiR0eXBlLnRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2VOYW1lID0gbWVzc2FnZS4kdHlwZS5mdWxsTmFtZVswXSA9PT0gXCIuXCIgP1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuJHR5cGUuZnVsbE5hbWUuc2xpY2UoMSkgOiBtZXNzYWdlLiR0eXBlLmZ1bGxOYW1lO1xuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byB0eXBlLmdvb2dsZWFwaXMuY29tIHByZWZpeCBpZiBubyBwcmVmaXggaXMgdXNlZFxuICAgICAgICAgICAgaWYgKHByZWZpeCA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIHByZWZpeCA9IGdvb2dsZUFwaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5hbWUgPSBwcmVmaXggKyBtZXNzYWdlTmFtZTtcbiAgICAgICAgICAgIG9iamVjdFtcIkB0eXBlXCJdID0gbmFtZTtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy50b09iamVjdChtZXNzYWdlLCBvcHRpb25zKTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbIndyYXBwZXJzIiwiZXhwb3J0cyIsIk1lc3NhZ2UiLCJyZXF1aXJlIiwiZnJvbU9iamVjdCIsIm9iamVjdCIsIm5hbWUiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsInR5cGUiLCJsb29rdXAiLCJ0eXBlX3VybCIsImNoYXJBdCIsInNsaWNlIiwiaW5kZXhPZiIsImNyZWF0ZSIsInZhbHVlIiwiZW5jb2RlIiwiZmluaXNoIiwidG9PYmplY3QiLCJtZXNzYWdlIiwib3B0aW9ucyIsImdvb2dsZUFwaSIsInByZWZpeCIsImpzb24iLCJkZWNvZGUiLCJjdG9yIiwiJHR5cGUiLCJtZXNzYWdlTmFtZSIsImZ1bGxOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/wrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/writer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/writer.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Writer;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js\");\nvar BufferWriter; // cyclic\nvar LongBits = util.LongBits, base64 = util.base64, utf8 = util.utf8;\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */ function Op(fn, len, val) {\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */ this.fn = fn;\n    /**\n     * Value byte length.\n     * @type {number}\n     */ this.len = len;\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */ this.next = undefined;\n    /**\n     * Value to write.\n     * @type {*}\n     */ this.val = val; // type varies\n}\n/* istanbul ignore next */ function noop() {} // eslint-disable-line no-empty-function\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */ function State(writer) {\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */ this.head = writer.head;\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */ this.tail = writer.tail;\n    /**\n     * Current buffer length.\n     * @type {number}\n     */ this.len = writer.len;\n    /**\n     * Next state.\n     * @type {State|null}\n     */ this.next = writer.states;\n}\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */ function Writer() {\n    /**\n     * Current length.\n     * @type {number}\n     */ this.len = 0;\n    /**\n     * Operations head.\n     * @type {Object}\n     */ this.head = new Op(noop, 0, 0);\n    /**\n     * Operations tail\n     * @type {Object}\n     */ this.tail = this.head;\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */ this.states = null;\n// When a value is written, the writer calculates its byte length and puts it into a linked\n// list of operations to perform when finish() is called. This both allows us to allocate\n// buffers of the exact required size and reduces the amount of work we have to do compared\n// to first calculating over objects and then encoding over objects. In our case, the encoding\n// part is just a linked list walk calling operations with already prepared values.\n}\nvar create = function create() {\n    return util.Buffer ? function create_buffer_setup() {\n        return (Writer.create = function create_buffer() {\n            return new BufferWriter();\n        })();\n    } : function create_array() {\n        return new Writer();\n    };\n};\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */ Writer.create = create();\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */ Writer.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */ if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */ Writer.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\nfunction writeVarint32(val, buf, pos) {\n    while(val > 127){\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */ function VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n    return this;\n};\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.int32 = function write_int32(value) {\n    return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n     : this.uint32(value);\n};\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\nfunction writeVarint64(val, buf, pos) {\n    while(val.hi){\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while(val.lo > 127){\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */ Writer.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */ Writer.prototype.int64 = Writer.prototype.uint64;\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */ Writer.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\nfunction writeFixed32(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = val >>> 8 & 255;\n    buf[pos + 2] = val >>> 16 & 255;\n    buf[pos + 3] = val >>> 24;\n}\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.sfixed32 = Writer.prototype.fixed32;\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */ Writer.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */ Writer.prototype.sfixed64 = Writer.prototype.fixed64;\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\nvar writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {\n    buf.set(val, pos); // also works for plain array values\n} : function writeBytes_for(val, buf, pos) {\n    for(var i = 0; i < val.length; ++i)buf[pos + i] = val[i];\n};\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */ Writer.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len) return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */ Writer.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);\n};\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */ Writer.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */ Writer.prototype.reset = function reset() {\n    if (this.states) {\n        this.head = this.states.head;\n        this.tail = this.states.tail;\n        this.len = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len = 0;\n    }\n    return this;\n};\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */ Writer.prototype.ldelim = function ldelim() {\n    var head = this.head, tail = this.tail, len = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */ Writer.prototype.finish = function finish() {\n    var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;\n    while(head){\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/writer_buffer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/writer_buffer.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = BufferWriter;\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/util/minimal.js\");\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */ function BufferWriter() {\n    Writer.call(this);\n}\nBufferWriter._configure = function() {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */ BufferWriter.alloc = util._Buffer_allocUnsafe;\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n    // also works for plain array values\n    } : function writeBytesBuffer_copy(val, buf, pos) {\n        if (val.copy) val.copy(buf, pos, 0, val.length);\n        else for(var i = 0; i < val.length;)buf[pos++] = val[i++];\n    };\n};\n/**\n * @override\n */ BufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len) this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write) buf.utf8Write(val, pos);\n    else buf.write(val, pos);\n}\n/**\n * @override\n */ BufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len) this._push(writeStringBuffer, len, value);\n    return this;\n};\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */ BufferWriter._configure();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JpdGVyX2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLGlCQUFpQjtBQUNqQixJQUFJQyxTQUFTQyxtQkFBT0EsQ0FBQywwRkFBVTtBQUM5QkYsQ0FBQUEsYUFBYUcsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNKLE9BQU9FLFNBQVMsR0FBR0csV0FBVyxHQUFHTjtBQUV6RSxJQUFJTyxPQUFPTCxtQkFBT0EsQ0FBQyxzR0FBZ0I7QUFFbkM7Ozs7O0NBS0MsR0FDRCxTQUFTRjtJQUNMQyxPQUFPTyxJQUFJLENBQUMsSUFBSTtBQUNwQjtBQUVBUixhQUFhUyxVQUFVLEdBQUc7SUFDdEI7Ozs7O0tBS0MsR0FDRFQsYUFBYVUsS0FBSyxHQUFHSCxLQUFLSSxtQkFBbUI7SUFFN0NYLGFBQWFZLGdCQUFnQixHQUFHTCxLQUFLTSxNQUFNLElBQUlOLEtBQUtNLE1BQU0sQ0FBQ1YsU0FBUyxZQUFZVyxjQUFjUCxLQUFLTSxNQUFNLENBQUNWLFNBQVMsQ0FBQ1ksR0FBRyxDQUFDQyxJQUFJLEtBQUssUUFDM0gsU0FBU0MscUJBQXFCQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRztRQUMzQ0QsSUFBSUosR0FBRyxDQUFDRyxLQUFLRSxNQUFNLHNHQUFzRztJQUN6SCxvQ0FBb0M7SUFDdEMsSUFFRSxTQUFTQyxzQkFBc0JILEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHO1FBQzVDLElBQUlGLElBQUlJLElBQUksRUFDVkosSUFBSUksSUFBSSxDQUFDSCxLQUFLQyxLQUFLLEdBQUdGLElBQUlLLE1BQU07YUFDN0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlOLElBQUlLLE1BQU0sRUFDakNKLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHRixHQUFHLENBQUNNLElBQUk7SUFDekI7QUFDUjtBQUdBOztDQUVDLEdBQ0R4QixhQUFhRyxTQUFTLENBQUNzQixLQUFLLEdBQUcsU0FBU0MsbUJBQW1CQyxLQUFLO0lBQzVELElBQUlwQixLQUFLcUIsUUFBUSxDQUFDRCxRQUNkQSxRQUFRcEIsS0FBS3NCLFlBQVksQ0FBQ0YsT0FBTztJQUNyQyxJQUFJRyxNQUFNSCxNQUFNSixNQUFNLEtBQUs7SUFDM0IsSUFBSSxDQUFDUSxNQUFNLENBQUNEO0lBQ1osSUFBSUEsS0FDQSxJQUFJLENBQUNFLEtBQUssQ0FBQ2hDLGFBQWFZLGdCQUFnQixFQUFFa0IsS0FBS0g7SUFDbkQsT0FBTyxJQUFJO0FBQ2Y7QUFFQSxTQUFTTSxrQkFBa0JmLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHO0lBQ3BDLElBQUlGLElBQUlLLE1BQU0sR0FBRyxJQUNiaEIsS0FBSzJCLElBQUksQ0FBQ0MsS0FBSyxDQUFDakIsS0FBS0MsS0FBS0M7U0FDekIsSUFBSUQsSUFBSWlCLFNBQVMsRUFDbEJqQixJQUFJaUIsU0FBUyxDQUFDbEIsS0FBS0U7U0FFbkJELElBQUlnQixLQUFLLENBQUNqQixLQUFLRTtBQUN2QjtBQUVBOztDQUVDLEdBQ0RwQixhQUFhRyxTQUFTLENBQUNrQyxNQUFNLEdBQUcsU0FBU0Msb0JBQW9CWCxLQUFLO0lBQzlELElBQUlHLE1BQU12QixLQUFLTSxNQUFNLENBQUMwQixVQUFVLENBQUNaO0lBQ2pDLElBQUksQ0FBQ0ksTUFBTSxDQUFDRDtJQUNaLElBQUlBLEtBQ0EsSUFBSSxDQUFDRSxLQUFLLENBQUNDLG1CQUFtQkgsS0FBS0g7SUFDdkMsT0FBTyxJQUFJO0FBQ2Y7QUFHQTs7Ozs7Q0FLQyxHQUVEM0IsYUFBYVMsVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL25mYy1uZXh0anMtc2hhZGNuLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyaXRlcl9idWZmZXIuanM/OTBhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyV3JpdGVyO1xuXG4vLyBleHRlbmRzIFdyaXRlclxudmFyIFdyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKTtcbihCdWZmZXJXcml0ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShXcml0ZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBCdWZmZXJXcml0ZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHdyaXRlciBpbnN0YW5jZS5cbiAqIEBjbGFzc2Rlc2MgV2lyZSBmb3JtYXQgd3JpdGVyIHVzaW5nIG5vZGUgYnVmZmVycy5cbiAqIEBleHRlbmRzIFdyaXRlclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlcldyaXRlcigpIHtcbiAgICBXcml0ZXIuY2FsbCh0aGlzKTtcbn1cblxuQnVmZmVyV3JpdGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQWxsb2NhdGVzIGEgYnVmZmVyIG9mIHRoZSBzcGVjaWZpZWQgc2l6ZS5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IEJ1ZmZlclxuICAgICAqL1xuICAgIEJ1ZmZlcldyaXRlci5hbGxvYyA9IHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZTtcblxuICAgIEJ1ZmZlcldyaXRlci53cml0ZUJ5dGVzQnVmZmVyID0gdXRpbC5CdWZmZXIgJiYgdXRpbC5CdWZmZXIucHJvdG90eXBlIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiB1dGlsLkJ1ZmZlci5wcm90b3R5cGUuc2V0Lm5hbWUgPT09IFwic2V0XCJcbiAgICAgICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgICAgYnVmLnNldCh2YWwsIHBvcyk7IC8vIGZhc3RlciB0aGFuIGNvcHkgKHJlcXVpcmVzIG5vZGUgPj0gNCB3aGVyZSBCdWZmZXJzIGV4dGVuZCBVaW50OEFycmF5IGFuZCBzZXQgaXMgcHJvcGVybHkgaW5oZXJpdGVkKVxuICAgICAgICAgIC8vIGFsc28gd29ya3MgZm9yIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIDogZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9jb3B5KHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgICBpZiAodmFsLmNvcHkpIC8vIEJ1ZmZlciB2YWx1ZXNcbiAgICAgICAgICAgIHZhbC5jb3B5KGJ1ZiwgcG9zLCAwLCB2YWwubGVuZ3RoKTtcbiAgICAgICAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDspIC8vIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgYnVmW3BvcysrXSA9IHZhbFtpKytdO1xuICAgICAgICB9O1xufTtcblxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gd3JpdGVfYnl0ZXNfYnVmZmVyKHZhbHVlKSB7XG4gICAgaWYgKHV0aWwuaXNTdHJpbmcodmFsdWUpKVxuICAgICAgICB2YWx1ZSA9IHV0aWwuX0J1ZmZlcl9mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoID4+PiAwO1xuICAgIHRoaXMudWludDMyKGxlbik7XG4gICAgaWYgKGxlbilcbiAgICAgICAgdGhpcy5fcHVzaChCdWZmZXJXcml0ZXIud3JpdGVCeXRlc0J1ZmZlciwgbGVuLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiB3cml0ZVN0cmluZ0J1ZmZlcih2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgaWYgKHZhbC5sZW5ndGggPCA0MCkgLy8gcGxhaW4ganMgaXMgZmFzdGVyIGZvciBzaG9ydCBzdHJpbmdzIChwcm9iYWJseSBkdWUgdG8gcmVkdW5kYW50IGFzc2VydGlvbnMpXG4gICAgICAgIHV0aWwudXRmOC53cml0ZSh2YWwsIGJ1ZiwgcG9zKTtcbiAgICBlbHNlIGlmIChidWYudXRmOFdyaXRlKVxuICAgICAgICBidWYudXRmOFdyaXRlKHZhbCwgcG9zKTtcbiAgICBlbHNlXG4gICAgICAgIGJ1Zi53cml0ZSh2YWwsIHBvcyk7XG59XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gd3JpdGVfc3RyaW5nX2J1ZmZlcih2YWx1ZSkge1xuICAgIHZhciBsZW4gPSB1dGlsLkJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xuICAgIGlmIChsZW4pXG4gICAgICAgIHRoaXMuX3B1c2god3JpdGVTdHJpbmdCdWZmZXIsIGxlbiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXG4gKiBAbmFtZSBCdWZmZXJXcml0ZXIjZmluaXNoXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IEZpbmlzaGVkIGJ1ZmZlclxuICovXG5cbkJ1ZmZlcldyaXRlci5fY29uZmlndXJlKCk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkJ1ZmZlcldyaXRlciIsIldyaXRlciIsInJlcXVpcmUiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInV0aWwiLCJjYWxsIiwiX2NvbmZpZ3VyZSIsImFsbG9jIiwiX0J1ZmZlcl9hbGxvY1Vuc2FmZSIsIndyaXRlQnl0ZXNCdWZmZXIiLCJCdWZmZXIiLCJVaW50OEFycmF5Iiwic2V0IiwibmFtZSIsIndyaXRlQnl0ZXNCdWZmZXJfc2V0IiwidmFsIiwiYnVmIiwicG9zIiwid3JpdGVCeXRlc0J1ZmZlcl9jb3B5IiwiY29weSIsImxlbmd0aCIsImkiLCJieXRlcyIsIndyaXRlX2J5dGVzX2J1ZmZlciIsInZhbHVlIiwiaXNTdHJpbmciLCJfQnVmZmVyX2Zyb20iLCJsZW4iLCJ1aW50MzIiLCJfcHVzaCIsIndyaXRlU3RyaW5nQnVmZmVyIiwidXRmOCIsIndyaXRlIiwidXRmOFdyaXRlIiwic3RyaW5nIiwid3JpdGVfc3RyaW5nX2J1ZmZlciIsImJ5dGVMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/src/writer_buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/proto-loader/build/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/proto-loader/build/src/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst camelCase = __webpack_require__(/*! lodash.camelcase */ \"(ssr)/./node_modules/lodash.camelcase/index.js\");\nconst Protobuf = __webpack_require__(/*! protobufjs */ \"(ssr)/./node_modules/protobufjs/index.js\");\nconst descriptor = __webpack_require__(/*! protobufjs/ext/descriptor */ \"(ssr)/./node_modules/protobufjs/ext/descriptor/index.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/proto-loader/build/src/util.js\");\nconst Long = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/src/long.js\");\nexports.Long = Long;\nfunction isAnyExtension(obj) {\n    return \"@type\" in obj && typeof obj[\"@type\"] === \"string\";\n}\nexports.isAnyExtension = isAnyExtension;\nconst descriptorOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    defaults: true,\n    oneofs: true,\n    json: true\n};\nfunction joinName(baseName, name) {\n    if (baseName === \"\") {\n        return name;\n    } else {\n        return baseName + \".\" + name;\n    }\n}\nfunction isHandledReflectionObject(obj) {\n    return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;\n}\nfunction isNamespaceBase(obj) {\n    return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;\n}\nfunction getAllHandledReflectionObjects(obj, parentName) {\n    const objName = joinName(parentName, obj.name);\n    if (isHandledReflectionObject(obj)) {\n        return [\n            [\n                objName,\n                obj\n            ]\n        ];\n    } else {\n        if (isNamespaceBase(obj) && typeof obj.nested !== \"undefined\") {\n            return Object.keys(obj.nested).map((name)=>{\n                return getAllHandledReflectionObjects(obj.nested[name], objName);\n            }).reduce((accumulator, currentValue)=>accumulator.concat(currentValue), []);\n        }\n    }\n    return [];\n}\nfunction createDeserializer(cls, options) {\n    return function deserialize(argBuf) {\n        return cls.toObject(cls.decode(argBuf), options);\n    };\n}\nfunction createSerializer(cls) {\n    return function serialize(arg) {\n        if (Array.isArray(arg)) {\n            throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);\n        }\n        const message = cls.fromObject(arg);\n        return cls.encode(message).finish();\n    };\n}\nfunction createMethodDefinition(method, serviceName, options, fileDescriptors) {\n    /* This is only ever called after the corresponding root.resolveAll(), so we\n     * can assume that the resolved request and response types are non-null */ const requestType = method.resolvedRequestType;\n    const responseType = method.resolvedResponseType;\n    return {\n        path: \"/\" + serviceName + \"/\" + method.name,\n        requestStream: !!method.requestStream,\n        responseStream: !!method.responseStream,\n        requestSerialize: createSerializer(requestType),\n        requestDeserialize: createDeserializer(requestType, options),\n        responseSerialize: createSerializer(responseType),\n        responseDeserialize: createDeserializer(responseType, options),\n        // TODO(murgatroid99): Find a better way to handle this\n        originalName: camelCase(method.name),\n        requestType: createMessageDefinition(requestType, fileDescriptors),\n        responseType: createMessageDefinition(responseType, fileDescriptors)\n    };\n}\nfunction createServiceDefinition(service, name, options, fileDescriptors) {\n    const def = {};\n    for (const method of service.methodsArray){\n        def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);\n    }\n    return def;\n}\nfunction createMessageDefinition(message, fileDescriptors) {\n    const messageDescriptor = message.toDescriptor(\"proto3\");\n    return {\n        format: \"Protocol Buffer 3 DescriptorProto\",\n        type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),\n        fileDescriptorProtos: fileDescriptors\n    };\n}\nfunction createEnumDefinition(enumType, fileDescriptors) {\n    const enumDescriptor = enumType.toDescriptor(\"proto3\");\n    return {\n        format: \"Protocol Buffer 3 EnumDescriptorProto\",\n        type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),\n        fileDescriptorProtos: fileDescriptors\n    };\n}\n/**\n * function createDefinition(obj: Protobuf.Service, name: string, options:\n * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,\n * name: string, options: Options): MessageTypeDefinition; function\n * createDefinition(obj: Protobuf.Enum, name: string, options: Options):\n * EnumTypeDefinition;\n */ function createDefinition(obj, name, options, fileDescriptors) {\n    if (obj instanceof Protobuf.Service) {\n        return createServiceDefinition(obj, name, options, fileDescriptors);\n    } else if (obj instanceof Protobuf.Type) {\n        return createMessageDefinition(obj, fileDescriptors);\n    } else if (obj instanceof Protobuf.Enum) {\n        return createEnumDefinition(obj, fileDescriptors);\n    } else {\n        throw new Error(\"Type mismatch in reflection object handling\");\n    }\n}\nfunction createPackageDefinition(root, options) {\n    const def = {};\n    root.resolveAll();\n    const descriptorList = root.toDescriptor(\"proto3\").file;\n    const bufferList = descriptorList.map((value)=>Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));\n    for (const [name, obj] of getAllHandledReflectionObjects(root, \"\")){\n        def[name] = createDefinition(obj, name, options, bufferList);\n    }\n    return def;\n}\nfunction createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {\n    options = options || {};\n    const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);\n    root.resolveAll();\n    return createPackageDefinition(root, options);\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename One or multiple file paths to load. Can be an absolute path\n *     or relative to an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.json Represent Infinity and NaN as strings in float fields,\n *     and automatically decode google.protobuf.Any values.\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */ function load(filename, options) {\n    return util_1.loadProtosWithOptions(filename, options).then((loadedRoot)=>{\n        return createPackageDefinition(loadedRoot, options);\n    });\n}\nexports.load = load;\nfunction loadSync(filename, options) {\n    const loadedRoot = util_1.loadProtosWithOptionsSync(filename, options);\n    return createPackageDefinition(loadedRoot, options);\n}\nexports.loadSync = loadSync;\nfunction fromJSON(json, options) {\n    options = options || {};\n    const loadedRoot = Protobuf.Root.fromJSON(json);\n    loadedRoot.resolveAll();\n    return createPackageDefinition(loadedRoot, options);\n}\nexports.fromJSON = fromJSON;\nfunction loadFileDescriptorSetFromBuffer(descriptorSet, options) {\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;\nfunction loadFileDescriptorSetFromObject(descriptorSet, options) {\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;\nutil_1.addCommonProtos(); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/proto-loader/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/proto-loader/build/src/util.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/proto-loader/build/src/util.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst Protobuf = __webpack_require__(/*! protobufjs */ \"(ssr)/./node_modules/protobufjs/index.js\");\nfunction addIncludePathResolver(root, includePaths) {\n    const originalResolvePath = root.resolvePath;\n    root.resolvePath = (origin, target)=>{\n        if (path.isAbsolute(target)) {\n            return target;\n        }\n        for (const directory of includePaths){\n            const fullPath = path.join(directory, target);\n            try {\n                fs.accessSync(fullPath, fs.constants.R_OK);\n                return fullPath;\n            } catch (err) {\n                continue;\n            }\n        }\n        process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);\n        return originalResolvePath(origin, target);\n    };\n}\nasync function loadProtosWithOptions(filename, options) {\n    const root = new Protobuf.Root();\n    options = options || {};\n    if (!!options.includeDirs) {\n        if (!Array.isArray(options.includeDirs)) {\n            return Promise.reject(new Error(\"The includeDirs option must be an array\"));\n        }\n        addIncludePathResolver(root, options.includeDirs);\n    }\n    const loadedRoot = await root.load(filename, options);\n    loadedRoot.resolveAll();\n    return loadedRoot;\n}\nexports.loadProtosWithOptions = loadProtosWithOptions;\nfunction loadProtosWithOptionsSync(filename, options) {\n    const root = new Protobuf.Root();\n    options = options || {};\n    if (!!options.includeDirs) {\n        if (!Array.isArray(options.includeDirs)) {\n            throw new Error(\"The includeDirs option must be an array\");\n        }\n        addIncludePathResolver(root, options.includeDirs);\n    }\n    const loadedRoot = root.loadSync(filename, options);\n    loadedRoot.resolveAll();\n    return loadedRoot;\n}\nexports.loadProtosWithOptionsSync = loadProtosWithOptionsSync;\n/**\n * Load Google's well-known proto files that aren't exposed by Protobuf.js.\n */ function addCommonProtos() {\n    // Protobuf.js exposes: any, duration, empty, field_mask, struct, timestamp,\n    // and wrappers. compiler/plugin is excluded in Protobuf.js and here.\n    // Using constant strings for compatibility with tools like Webpack\n    const apiDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/api.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/api.json\");\n    const descriptorDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/descriptor.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/descriptor.json\");\n    const sourceContextDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/source_context.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/source_context.json\");\n    const typeDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/type.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/type.json\");\n    Protobuf.common(\"api\", apiDescriptor.nested.google.nested.protobuf.nested);\n    Protobuf.common(\"descriptor\", descriptorDescriptor.nested.google.nested.protobuf.nested);\n    Protobuf.common(\"source_context\", sourceContextDescriptor.nested.google.nested.protobuf.nested);\n    Protobuf.common(\"type\", typeDescriptor.nested.google.nested.protobuf.nested);\n}\nexports.addCommonProtos = addCommonProtos; //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/proto-loader/build/src/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/long/umd/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/long/umd/index.js ***!
  \*******************************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n// GENERATED FILE. DO NOT EDIT.\n(function(global, factory) {\n    function preferDefault(exports1) {\n        return exports1.default || exports1;\n    }\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            var exports1 = {};\n            factory(exports1);\n            return preferDefault(exports1);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : void 0, function(_exports) {\n    \"use strict\";\n    Object.defineProperty(_exports, \"__esModule\", {\n        value: true\n    });\n    _exports.default = void 0;\n    /**\n     * @license\n     * Copyright 2009 The Closure Library Authors\n     * Copyright 2020 Daniel Wirtz / The long.js Authors.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *     http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     *\n     * SPDX-License-Identifier: Apache-2.0\n     */ // WebAssembly optimizations to do native i64 multiplication and divide\n    var wasm = null;\n    try {\n        wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n            // \\0asm\n            0,\n            97,\n            115,\n            109,\n            // version 1\n            1,\n            0,\n            0,\n            0,\n            // section \"type\"\n            1,\n            13,\n            2,\n            // 0, () => i32\n            96,\n            0,\n            1,\n            127,\n            // 1, (i32, i32, i32, i32) => i32\n            96,\n            4,\n            127,\n            127,\n            127,\n            127,\n            1,\n            127,\n            // section \"function\"\n            3,\n            7,\n            6,\n            // 0, type 0\n            0,\n            // 1, type 1\n            1,\n            // 2, type 1\n            1,\n            // 3, type 1\n            1,\n            // 4, type 1\n            1,\n            // 5, type 1\n            1,\n            // section \"global\"\n            6,\n            6,\n            1,\n            // 0, \"high\", mutable i32\n            127,\n            1,\n            65,\n            0,\n            11,\n            // section \"export\"\n            7,\n            50,\n            6,\n            // 0, \"mul\"\n            3,\n            109,\n            117,\n            108,\n            0,\n            1,\n            // 1, \"div_s\"\n            5,\n            100,\n            105,\n            118,\n            95,\n            115,\n            0,\n            2,\n            // 2, \"div_u\"\n            5,\n            100,\n            105,\n            118,\n            95,\n            117,\n            0,\n            3,\n            // 3, \"rem_s\"\n            5,\n            114,\n            101,\n            109,\n            95,\n            115,\n            0,\n            4,\n            // 4, \"rem_u\"\n            5,\n            114,\n            101,\n            109,\n            95,\n            117,\n            0,\n            5,\n            // 5, \"get_high\"\n            8,\n            103,\n            101,\n            116,\n            95,\n            104,\n            105,\n            103,\n            104,\n            0,\n            0,\n            // section \"code\"\n            10,\n            191,\n            1,\n            6,\n            // 0, \"get_high\"\n            4,\n            0,\n            35,\n            0,\n            11,\n            // 1, \"mul\"\n            36,\n            1,\n            1,\n            126,\n            32,\n            0,\n            173,\n            32,\n            1,\n            173,\n            66,\n            32,\n            134,\n            132,\n            32,\n            2,\n            173,\n            32,\n            3,\n            173,\n            66,\n            32,\n            134,\n            132,\n            126,\n            34,\n            4,\n            66,\n            32,\n            135,\n            167,\n            36,\n            0,\n            32,\n            4,\n            167,\n            11,\n            // 2, \"div_s\"\n            36,\n            1,\n            1,\n            126,\n            32,\n            0,\n            173,\n            32,\n            1,\n            173,\n            66,\n            32,\n            134,\n            132,\n            32,\n            2,\n            173,\n            32,\n            3,\n            173,\n            66,\n            32,\n            134,\n            132,\n            127,\n            34,\n            4,\n            66,\n            32,\n            135,\n            167,\n            36,\n            0,\n            32,\n            4,\n            167,\n            11,\n            // 3, \"div_u\"\n            36,\n            1,\n            1,\n            126,\n            32,\n            0,\n            173,\n            32,\n            1,\n            173,\n            66,\n            32,\n            134,\n            132,\n            32,\n            2,\n            173,\n            32,\n            3,\n            173,\n            66,\n            32,\n            134,\n            132,\n            128,\n            34,\n            4,\n            66,\n            32,\n            135,\n            167,\n            36,\n            0,\n            32,\n            4,\n            167,\n            11,\n            // 4, \"rem_s\"\n            36,\n            1,\n            1,\n            126,\n            32,\n            0,\n            173,\n            32,\n            1,\n            173,\n            66,\n            32,\n            134,\n            132,\n            32,\n            2,\n            173,\n            32,\n            3,\n            173,\n            66,\n            32,\n            134,\n            132,\n            129,\n            34,\n            4,\n            66,\n            32,\n            135,\n            167,\n            36,\n            0,\n            32,\n            4,\n            167,\n            11,\n            // 5, \"rem_u\"\n            36,\n            1,\n            1,\n            126,\n            32,\n            0,\n            173,\n            32,\n            1,\n            173,\n            66,\n            32,\n            134,\n            132,\n            32,\n            2,\n            173,\n            32,\n            3,\n            173,\n            66,\n            32,\n            134,\n            132,\n            130,\n            34,\n            4,\n            66,\n            32,\n            135,\n            167,\n            36,\n            0,\n            32,\n            4,\n            167,\n            11\n        ])), {}).exports;\n    } catch  {\n    // no wasm support :(\n    }\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *  See the from* functions below for more convenient ways of constructing Longs.\n     * @exports Long\n     * @class A Long class for representing a 64 bit two's-complement integer value.\n     * @param {number} low The low (signed) 32 bits of the long\n     * @param {number} high The high (signed) 32 bits of the long\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @constructor\n     */ function Long(low, high, unsigned) {\n        /**\n       * The low 32 bits as a signed value.\n       * @type {number}\n       */ this.low = low | 0;\n        /**\n       * The high 32 bits as a signed value.\n       * @type {number}\n       */ this.high = high | 0;\n        /**\n       * Whether unsigned or not.\n       * @type {boolean}\n       */ this.unsigned = !!unsigned;\n    }\n    // The internal representation of a long is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // Javascript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within Javascript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n    /**\n     * An indicator used to reliably determine if an object is a Long or not.\n     * @type {boolean}\n     * @const\n     * @private\n     */ Long.prototype.__isLong__;\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\n        value: true\n    });\n    /**\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @inner\n     */ function isLong(obj) {\n        return (obj && obj[\"__isLong__\"]) === true;\n    }\n    /**\n     * @function\n     * @param {*} value number\n     * @returns {number}\n     * @inner\n     */ function ctz32(value) {\n        var c = Math.clz32(value & -value);\n        return value ? 31 - c : c;\n    }\n    /**\n     * Tests if the specified object is a Long.\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     */ Long.isLong = isLong;\n    /**\n     * A cache of the Long representations of small integer values.\n     * @type {!Object}\n     * @inner\n     */ var INT_CACHE = {};\n    /**\n     * A cache of the Long representations of small unsigned integer values.\n     * @type {!Object}\n     * @inner\n     */ var UINT_CACHE = {};\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */ function fromInt(value, unsigned) {\n        var obj, cachedObj, cache;\n        if (unsigned) {\n            value >>>= 0;\n            if (cache = 0 <= value && value < 256) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = fromBits(value, 0, true);\n            if (cache) UINT_CACHE[value] = obj;\n            return obj;\n        } else {\n            value |= 0;\n            if (cache = -128 <= value && value < 128) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = fromBits(value, value < 0 ? -1 : 0, false);\n            if (cache) INT_CACHE[value] = obj;\n            return obj;\n        }\n    }\n    /**\n     * Returns a Long representing the given 32 bit integer value.\n     * @function\n     * @param {number} value The 32 bit integer in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */ Long.fromInt = fromInt;\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */ function fromNumber(value, unsigned) {\n        if (isNaN(value)) return unsigned ? UZERO : ZERO;\n        if (unsigned) {\n            if (value < 0) return UZERO;\n            if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n        } else {\n            if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n            if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n        }\n        if (value < 0) return fromNumber(-value, unsigned).neg();\n        return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n    }\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @function\n     * @param {number} value The number in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */ Long.fromNumber = fromNumber;\n    /**\n     * @param {number} lowBits\n     * @param {number} highBits\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */ function fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    }\n    /**\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @function\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long} The corresponding Long value\n     */ Long.fromBits = fromBits;\n    /**\n     * @function\n     * @param {number} base\n     * @param {number} exponent\n     * @returns {number}\n     * @inner\n     */ var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n    /**\n     * @param {string} str\n     * @param {(boolean|number)=} unsigned\n     * @param {number=} radix\n     * @returns {!Long}\n     * @inner\n     */ function fromString(str, unsigned, radix) {\n        if (str.length === 0) throw Error(\"empty string\");\n        if (typeof unsigned === \"number\") {\n            // For goog.math.long compatibility\n            radix = unsigned;\n            unsigned = false;\n        } else {\n            unsigned = !!unsigned;\n        }\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n        var p;\n        if ((p = str.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");\n        else if (p === 0) {\n            return fromString(str.substring(1), unsigned, radix).neg();\n        }\n        // Do several (8) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = fromNumber(pow_dbl(radix, 8));\n        var result = ZERO;\n        for(var i = 0; i < str.length; i += 8){\n            var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                var power = fromNumber(pow_dbl(radix, size));\n                result = result.mul(power).add(fromNumber(value));\n            } else {\n                result = result.mul(radixToPower);\n                result = result.add(fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    }\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     * @function\n     * @param {string} str The textual representation of the Long\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @returns {!Long} The corresponding Long value\n     */ Long.fromString = fromString;\n    /**\n     * @function\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */ function fromValue(val, unsigned) {\n        if (typeof val === \"number\") return fromNumber(val, unsigned);\n        if (typeof val === \"string\") return fromString(val, unsigned);\n        // Throws for non-objects, converts non-instanceof Long:\n        return fromBits(val.low, val.high, typeof unsigned === \"boolean\" ? unsigned : val.unsigned);\n    }\n    /**\n     * Converts the specified value to a Long using the appropriate from* function for its type.\n     * @function\n     * @param {!Long|number|bigint|string|!{low: number, high: number, unsigned: boolean}} val Value\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {!Long}\n     */ Long.fromValue = fromValue;\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n    // no runtime penalty for these.\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */ var TWO_PWR_16_DBL = 1 << 16;\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */ var TWO_PWR_24_DBL = 1 << 24;\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */ var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */ var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */ var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n    /**\n     * @type {!Long}\n     * @const\n     * @inner\n     */ var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n    /**\n     * @type {!Long}\n     * @inner\n     */ var ZERO = fromInt(0);\n    /**\n     * Signed zero.\n     * @type {!Long}\n     */ Long.ZERO = ZERO;\n    /**\n     * @type {!Long}\n     * @inner\n     */ var UZERO = fromInt(0, true);\n    /**\n     * Unsigned zero.\n     * @type {!Long}\n     */ Long.UZERO = UZERO;\n    /**\n     * @type {!Long}\n     * @inner\n     */ var ONE = fromInt(1);\n    /**\n     * Signed one.\n     * @type {!Long}\n     */ Long.ONE = ONE;\n    /**\n     * @type {!Long}\n     * @inner\n     */ var UONE = fromInt(1, true);\n    /**\n     * Unsigned one.\n     * @type {!Long}\n     */ Long.UONE = UONE;\n    /**\n     * @type {!Long}\n     * @inner\n     */ var NEG_ONE = fromInt(-1);\n    /**\n     * Signed negative one.\n     * @type {!Long}\n     */ Long.NEG_ONE = NEG_ONE;\n    /**\n     * @type {!Long}\n     * @inner\n     */ var MAX_VALUE = fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n    /**\n     * Maximum signed value.\n     * @type {!Long}\n     */ Long.MAX_VALUE = MAX_VALUE;\n    /**\n     * @type {!Long}\n     * @inner\n     */ var MAX_UNSIGNED_VALUE = fromBits(0xffffffff | 0, 0xffffffff | 0, true);\n    /**\n     * Maximum unsigned value.\n     * @type {!Long}\n     */ Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n    /**\n     * @type {!Long}\n     * @inner\n     */ var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n    /**\n     * Minimum signed value.\n     * @type {!Long}\n     */ Long.MIN_VALUE = MIN_VALUE;\n    /**\n     * @alias Long.prototype\n     * @inner\n     */ var LongPrototype = Long.prototype;\n    /**\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n     * @this {!Long}\n     * @returns {number}\n     */ LongPrototype.toInt = function toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    };\n    /**\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @this {!Long}\n     * @returns {number}\n     */ LongPrototype.toNumber = function toNumber() {\n        if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @this {!Long}\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     */ LongPrototype.toString = function toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\n        if (this.isZero()) return \"0\";\n        if (this.isNegative()) {\n            // Unsigned Longs are never negative\n            if (this.eq(MIN_VALUE)) {\n                // We need to change the Long value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem1.toInt().toString(radix);\n            } else return \"-\" + this.neg().toString(radix);\n        }\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;\n        var result = \"\";\n        while(true){\n            var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) return digits + result;\n            else {\n                while(digits.length < 6)digits = \"0\" + digits;\n                result = \"\" + digits + result;\n            }\n        }\n    };\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @this {!Long}\n     * @returns {number} Signed high bits\n     */ LongPrototype.getHighBits = function getHighBits() {\n        return this.high;\n    };\n    /**\n     * Gets the high 32 bits as an unsigned integer.\n     * @this {!Long}\n     * @returns {number} Unsigned high bits\n     */ LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n        return this.high >>> 0;\n    };\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @this {!Long}\n     * @returns {number} Signed low bits\n     */ LongPrototype.getLowBits = function getLowBits() {\n        return this.low;\n    };\n    /**\n     * Gets the low 32 bits as an unsigned integer.\n     * @this {!Long}\n     * @returns {number} Unsigned low bits\n     */ LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n        return this.low >>> 0;\n    };\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Long.\n     * @this {!Long}\n     * @returns {number}\n     */ LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n        if (this.isNegative()) // Unsigned Longs are never negative\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        var val = this.high != 0 ? this.high : this.low;\n        for(var bit = 31; bit > 0; bit--)if ((val & 1 << bit) != 0) break;\n        return this.high != 0 ? bit + 33 : bit + 1;\n    };\n    /**\n     * Tests if this Long can be safely represented as a JavaScript number.\n     * @this {!Long}\n     * @returns {boolean}\n     */ LongPrototype.isSafeInteger = function isSafeInteger() {\n        // 2^53-1 is the maximum safe value\n        var top11Bits = this.high >> 21;\n        // [0, 2^53-1]\n        if (!top11Bits) return true;\n        // > 2^53-1\n        if (this.unsigned) return false;\n        // [-2^53, -1] except -2^53\n        return top11Bits === -1 && !(this.low === 0 && this.high === -0x200000);\n    };\n    /**\n     * Tests if this Long's value equals zero.\n     * @this {!Long}\n     * @returns {boolean}\n     */ LongPrototype.isZero = function isZero() {\n        return this.high === 0 && this.low === 0;\n    };\n    /**\n     * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n     * @returns {boolean}\n     */ LongPrototype.eqz = LongPrototype.isZero;\n    /**\n     * Tests if this Long's value is negative.\n     * @this {!Long}\n     * @returns {boolean}\n     */ LongPrototype.isNegative = function isNegative() {\n        return !this.unsigned && this.high < 0;\n    };\n    /**\n     * Tests if this Long's value is positive or zero.\n     * @this {!Long}\n     * @returns {boolean}\n     */ LongPrototype.isPositive = function isPositive() {\n        return this.unsigned || this.high >= 0;\n    };\n    /**\n     * Tests if this Long's value is odd.\n     * @this {!Long}\n     * @returns {boolean}\n     */ LongPrototype.isOdd = function isOdd() {\n        return (this.low & 1) === 1;\n    };\n    /**\n     * Tests if this Long's value is even.\n     * @this {!Long}\n     * @returns {boolean}\n     */ LongPrototype.isEven = function isEven() {\n        return (this.low & 1) === 0;\n    };\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.equals = function equals(other) {\n        if (!isLong(other)) other = fromValue(other);\n        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n        return this.high === other.high && this.low === other.low;\n    };\n    /**\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.eq = LongPrototype.equals;\n    /**\n     * Tests if this Long's value differs from the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.notEquals = function notEquals(other) {\n        return !this.eq(/* validates */ other);\n    };\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.neq = LongPrototype.notEquals;\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.ne = LongPrototype.notEquals;\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.lessThan = function lessThan(other) {\n        return this.comp(/* validates */ other) < 0;\n    };\n    /**\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.lt = LongPrototype.lessThan;\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n        return this.comp(/* validates */ other) <= 0;\n    };\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.lte = LongPrototype.lessThanOrEqual;\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.le = LongPrototype.lessThanOrEqual;\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.greaterThan = function greaterThan(other) {\n        return this.comp(/* validates */ other) > 0;\n    };\n    /**\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.gt = LongPrototype.greaterThan;\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n        return this.comp(/* validates */ other) >= 0;\n    };\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {boolean}\n     */ LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n    /**\n     * Compares this Long's value with the specified's.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */ LongPrototype.compare = function compare(other) {\n        if (!isLong(other)) other = fromValue(other);\n        if (this.eq(other)) return 0;\n        var thisNeg = this.isNegative(), otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg) return -1;\n        if (!thisNeg && otherNeg) return 1;\n        // At this point the sign bits are the same\n        if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n        // Both are positive if at least one is unsigned\n        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    };\n    /**\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n     * @function\n     * @param {!Long|number|bigint|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     */ LongPrototype.comp = LongPrototype.compare;\n    /**\n     * Negates this Long's value.\n     * @this {!Long}\n     * @returns {!Long} Negated Long\n     */ LongPrototype.negate = function negate() {\n        if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n        return this.not().add(ONE);\n    };\n    /**\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\n     * @function\n     * @returns {!Long} Negated Long\n     */ LongPrototype.neg = LongPrototype.negate;\n    /**\n     * Returns the sum of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} addend Addend\n     * @returns {!Long} Sum\n     */ LongPrototype.add = function add(addend) {\n        if (!isLong(addend)) addend = fromValue(addend);\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xffff;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xffff;\n        var b48 = addend.high >>> 16;\n        var b32 = addend.high & 0xffff;\n        var b16 = addend.low >>> 16;\n        var b00 = addend.low & 0xffff;\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 + b48;\n        c48 &= 0xffff;\n        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    };\n    /**\n     * Returns the difference of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */ LongPrototype.subtract = function subtract(subtrahend) {\n        if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    };\n    /**\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n     * @function\n     * @param {!Long|number|bigint|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     */ LongPrototype.sub = LongPrototype.subtract;\n    /**\n     * Returns the product of this and the specified Long.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */ LongPrototype.multiply = function multiply(multiplier) {\n        if (this.isZero()) return this;\n        if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n        // use wasm support if present\n        if (wasm) {\n            var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n            return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n        }\n        if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n        if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n        if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n        if (this.isNegative()) {\n            if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());\n            else return this.neg().mul(multiplier).neg();\n        } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n        // If both longs are small, use float multiplication\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xffff;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xffff;\n        var b48 = multiplier.high >>> 16;\n        var b32 = multiplier.high & 0xffff;\n        var b16 = multiplier.low >>> 16;\n        var b00 = multiplier.low & 0xffff;\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xffff;\n        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    };\n    /**\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n     * @function\n     * @param {!Long|number|bigint|string} multiplier Multiplier\n     * @returns {!Long} Product\n     */ LongPrototype.mul = LongPrototype.multiply;\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\n     *  unsigned if this Long is unsigned.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */ LongPrototype.divide = function divide(divisor) {\n        if (!isLong(divisor)) divisor = fromValue(divisor);\n        if (divisor.isZero()) throw Error(\"division by zero\");\n        // use wasm support if present\n        if (wasm) {\n            // guard against signed division overflow: the largest\n            // negative number / -1 would be 1 larger than the largest\n            // positive number, due to two's complement.\n            if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n                // be consistent with non-wasm code path\n                return this;\n            }\n            var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n            return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n        }\n        if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n        var approx, rem, res;\n        if (!this.unsigned) {\n            // This section is only relevant for signed longs and is derived from the\n            // closure library as a whole.\n            if (this.eq(MIN_VALUE)) {\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n                else if (divisor.eq(MIN_VALUE)) return ONE;\n                else {\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                    var halfThis = this.shr(1);\n                    approx = halfThis.div(divisor).shl(1);\n                    if (approx.eq(ZERO)) {\n                        return divisor.isNegative() ? ONE : NEG_ONE;\n                    } else {\n                        rem = this.sub(divisor.mul(approx));\n                        res = approx.add(rem.div(divisor));\n                        return res;\n                    }\n                }\n            } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n            if (this.isNegative()) {\n                if (divisor.isNegative()) return this.neg().div(divisor.neg());\n                return this.neg().div(divisor).neg();\n            } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n            res = ZERO;\n        } else {\n            // The algorithm below has not been made for unsigned longs. It's therefore\n            // required to take special care of the MSB prior to running it.\n            if (!divisor.unsigned) divisor = divisor.toUnsigned();\n            if (divisor.gt(this)) return UZERO;\n            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n            res = UZERO;\n        }\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        rem = this;\n        while(rem.gte(divisor)){\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n            approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);\n            while(approxRem.isNegative() || approxRem.gt(rem)){\n                approx -= delta;\n                approxRes = fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero()) approxRes = ONE;\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    };\n    /**\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Quotient\n     */ LongPrototype.div = LongPrototype.divide;\n    /**\n     * Returns this Long modulo the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */ LongPrototype.modulo = function modulo(divisor) {\n        if (!isLong(divisor)) divisor = fromValue(divisor);\n        // use wasm support if present\n        if (wasm) {\n            var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n            return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n        }\n        return this.sub(this.div(divisor).mul(divisor));\n    };\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */ LongPrototype.mod = LongPrototype.modulo;\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|bigint|string} divisor Divisor\n     * @returns {!Long} Remainder\n     */ LongPrototype.rem = LongPrototype.modulo;\n    /**\n     * Returns the bitwise NOT of this Long.\n     * @this {!Long}\n     * @returns {!Long}\n     */ LongPrototype.not = function not() {\n        return fromBits(~this.low, ~this.high, this.unsigned);\n    };\n    /**\n     * Returns count leading zeros of this Long.\n     * @this {!Long}\n     * @returns {!number}\n     */ LongPrototype.countLeadingZeros = function countLeadingZeros() {\n        return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n    };\n    /**\n     * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n     * @function\n     * @param {!Long}\n     * @returns {!number}\n     */ LongPrototype.clz = LongPrototype.countLeadingZeros;\n    /**\n     * Returns count trailing zeros of this Long.\n     * @this {!Long}\n     * @returns {!number}\n     */ LongPrototype.countTrailingZeros = function countTrailingZeros() {\n        return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n    };\n    /**\n     * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n     * @function\n     * @param {!Long}\n     * @returns {!number}\n     */ LongPrototype.ctz = LongPrototype.countTrailingZeros;\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */ LongPrototype.and = function and(other) {\n        if (!isLong(other)) other = fromValue(other);\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */ LongPrototype.or = function or(other) {\n        if (!isLong(other)) other = fromValue(other);\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @this {!Long}\n     * @param {!Long|number|bigint|string} other Other Long\n     * @returns {!Long}\n     */ LongPrototype.xor = function xor(other) {\n        if (!isLong(other)) other = fromValue(other);\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */ LongPrototype.shiftLeft = function shiftLeft(numBits) {\n        if (isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;\n        else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);\n        else return fromBits(0, this.low << numBits - 32, this.unsigned);\n    };\n    /**\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */ LongPrototype.shl = LongPrototype.shiftLeft;\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */ LongPrototype.shiftRight = function shiftRight(numBits) {\n        if (isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;\n        else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);\n        else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n    };\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */ LongPrototype.shr = LongPrototype.shiftRight;\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */ LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n        if (isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;\n        if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n        if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n        return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n    };\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */ LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     */ LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n    /**\n     * Returns this Long with bits rotated to the left by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */ LongPrototype.rotateLeft = function rotateLeft(numBits) {\n        var b;\n        if (isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;\n        if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n        if (numBits < 32) {\n            b = 32 - numBits;\n            return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n        }\n        numBits -= 32;\n        b = 32 - numBits;\n        return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n    };\n    /**\n     * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */ LongPrototype.rotl = LongPrototype.rotateLeft;\n    /**\n     * Returns this Long with bits rotated to the right by the given amount.\n     * @this {!Long}\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */ LongPrototype.rotateRight = function rotateRight(numBits) {\n        var b;\n        if (isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;\n        if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n        if (numBits < 32) {\n            b = 32 - numBits;\n            return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n        }\n        numBits -= 32;\n        b = 32 - numBits;\n        return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n    };\n    /**\n     * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Rotated Long\n     */ LongPrototype.rotr = LongPrototype.rotateRight;\n    /**\n     * Converts this Long to signed.\n     * @this {!Long}\n     * @returns {!Long} Signed long\n     */ LongPrototype.toSigned = function toSigned() {\n        if (!this.unsigned) return this;\n        return fromBits(this.low, this.high, false);\n    };\n    /**\n     * Converts this Long to unsigned.\n     * @this {!Long}\n     * @returns {!Long} Unsigned long\n     */ LongPrototype.toUnsigned = function toUnsigned() {\n        if (this.unsigned) return this;\n        return fromBits(this.low, this.high, true);\n    };\n    /**\n     * Converts this Long to its byte representation.\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @this {!Long}\n     * @returns {!Array.<number>} Byte representation\n     */ LongPrototype.toBytes = function toBytes(le) {\n        return le ? this.toBytesLE() : this.toBytesBE();\n    };\n    /**\n     * Converts this Long to its little endian byte representation.\n     * @this {!Long}\n     * @returns {!Array.<number>} Little endian byte representation\n     */ LongPrototype.toBytesLE = function toBytesLE() {\n        var hi = this.high, lo = this.low;\n        return [\n            lo & 0xff,\n            lo >>> 8 & 0xff,\n            lo >>> 16 & 0xff,\n            lo >>> 24,\n            hi & 0xff,\n            hi >>> 8 & 0xff,\n            hi >>> 16 & 0xff,\n            hi >>> 24\n        ];\n    };\n    /**\n     * Converts this Long to its big endian byte representation.\n     * @this {!Long}\n     * @returns {!Array.<number>} Big endian byte representation\n     */ LongPrototype.toBytesBE = function toBytesBE() {\n        var hi = this.high, lo = this.low;\n        return [\n            hi >>> 24,\n            hi >>> 16 & 0xff,\n            hi >>> 8 & 0xff,\n            hi & 0xff,\n            lo >>> 24,\n            lo >>> 16 & 0xff,\n            lo >>> 8 & 0xff,\n            lo & 0xff\n        ];\n    };\n    /**\n     * Creates a Long from its byte representation.\n     * @param {!Array.<number>} bytes Byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\n     * @returns {Long} The corresponding Long value\n     */ Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n        return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n    };\n    /**\n     * Creates a Long from its little endian byte representation.\n     * @param {!Array.<number>} bytes Little endian byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {Long} The corresponding Long value\n     */ Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n        return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n    };\n    /**\n     * Creates a Long from its big endian byte representation.\n     * @param {!Array.<number>} bytes Big endian byte representation\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n     * @returns {Long} The corresponding Long value\n     */ Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n        return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n    };\n    // Support conversion to/from BigInt where available\n    if (typeof BigInt === \"function\") {\n        /**\n       * Returns a Long representing the given big integer.\n       * @function\n       * @param {number} value The big integer value\n       * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n       * @returns {!Long} The corresponding Long value\n       */ Long.fromBigInt = function fromBigInt(value, unsigned) {\n            var lowBits = Number(BigInt.asIntN(32, value));\n            var highBits = Number(BigInt.asIntN(32, value >> BigInt(32)));\n            return fromBits(lowBits, highBits, unsigned);\n        };\n        // Override\n        Long.fromValue = function fromValueWithBigInt(value, unsigned) {\n            if (typeof value === \"bigint\") return Long.fromBigInt(value, unsigned);\n            return fromValue(value, unsigned);\n        };\n        /**\n       * Converts the Long to its big integer representation.\n       * @this {!Long}\n       * @returns {bigint}\n       */ LongPrototype.toBigInt = function toBigInt() {\n            var lowBigInt = BigInt(this.low >>> 0);\n            var highBigInt = BigInt(this.unsigned ? this.high >>> 0 : this.high);\n            return highBigInt << BigInt(32) | lowBigInt;\n        };\n    }\n    var _default = _exports.default = Long;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/node_modules/long/umd/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/api.json":
/*!*************************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/api.json ***!
  \*************************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Api":{"fields":{"name":{"type":"string","id":1},"methods":{"rule":"repeated","type":"Method","id":2},"options":{"rule":"repeated","type":"Option","id":3},"version":{"type":"string","id":4},"sourceContext":{"type":"SourceContext","id":5},"mixins":{"rule":"repeated","type":"Mixin","id":6},"syntax":{"type":"Syntax","id":7}}},"Method":{"fields":{"name":{"type":"string","id":1},"requestTypeUrl":{"type":"string","id":2},"requestStreaming":{"type":"bool","id":3},"responseTypeUrl":{"type":"string","id":4},"responseStreaming":{"type":"bool","id":5},"options":{"rule":"repeated","type":"Option","id":6},"syntax":{"type":"Syntax","id":7}}},"Mixin":{"fields":{"name":{"type":"string","id":1},"root":{"type":"string","id":2}}},"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}},"Option":{"fields":{"name":{"type":"string","id":1},"value":{"type":"Any","id":2}}},"Syntax":{"values":{"SYNTAX_PROTO2":0,"SYNTAX_PROTO3":1}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/descriptor.json":
/*!********************************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/descriptor.json ***!
  \********************************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5},"serverStreaming":{"type":"bool","id":6}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16},"javaGenericServices":{"type":"bool","id":17},"pyGenericServices":{"type":"bool","id":18},"deprecated":{"type":"bool","id":23},"ccEnableArenas":{"type":"bool","id":31},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1},"noStandardDescriptorAccessor":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5},"deprecated":{"type":"bool","id":3},"weak":{"type":"bool","id":10},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/source_context.json":
/*!************************************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/source_context.json ***!
  \************************************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/type.json":
/*!**************************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/node_modules/protobufjs/google/protobuf/type.json ***!
  \**************************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Type":{"fields":{"name":{"type":"string","id":1},"fields":{"rule":"repeated","type":"Field","id":2},"oneofs":{"rule":"repeated","type":"string","id":3},"options":{"rule":"repeated","type":"Option","id":4},"sourceContext":{"type":"SourceContext","id":5},"syntax":{"type":"Syntax","id":6}}},"Field":{"fields":{"kind":{"type":"Kind","id":1},"cardinality":{"type":"Cardinality","id":2},"number":{"type":"int32","id":3},"name":{"type":"string","id":4},"typeUrl":{"type":"string","id":6},"oneofIndex":{"type":"int32","id":7},"packed":{"type":"bool","id":8},"options":{"rule":"repeated","type":"Option","id":9},"jsonName":{"type":"string","id":10},"defaultValue":{"type":"string","id":11}},"nested":{"Kind":{"values":{"TYPE_UNKNOWN":0,"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Cardinality":{"values":{"CARDINALITY_UNKNOWN":0,"CARDINALITY_OPTIONAL":1,"CARDINALITY_REQUIRED":2,"CARDINALITY_REPEATED":3}}}},"Enum":{"fields":{"name":{"type":"string","id":1},"enumvalue":{"rule":"repeated","type":"EnumValue","id":2},"options":{"rule":"repeated","type":"Option","id":3},"sourceContext":{"type":"SourceContext","id":4},"syntax":{"type":"Syntax","id":5}}},"EnumValue":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"rule":"repeated","type":"Option","id":3}}},"Option":{"fields":{"name":{"type":"string","id":1},"value":{"type":"Any","id":2}}},"Syntax":{"values":{"SYNTAX_PROTO2":0,"SYNTAX_PROTO3":1}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/package.json":
/*!*************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/package.json ***!
  \*************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@grpc/grpc-js","version":"1.7.3","description":"gRPC Library for Node - pure JS implementation","homepage":"https://grpc.io/","repository":"https://github.com/grpc/grpc-node/tree/master/packages/grpc-js","main":"build/src/index.js","engines":{"node":"^8.13.0 || >=10.10.0"},"keywords":[],"author":{"name":"Google Inc."},"types":"build/src/index.d.ts","license":"Apache-2.0","devDependencies":{"@types/gulp":"^4.0.6","@types/gulp-mocha":"0.0.32","@types/lodash":"^4.14.108","@types/mocha":"^5.2.6","@types/ncp":"^2.0.1","@types/pify":"^3.0.2","@types/semver":"^7.3.9","clang-format":"^1.0.55","execa":"^2.0.3","gts":"^2.0.0","gulp":"^4.0.2","gulp-mocha":"^6.0.0","lodash":"^4.17.4","madge":"^5.0.1","mocha-jenkins-reporter":"^0.4.1","ncp":"^2.0.0","pify":"^4.0.1","rimraf":"^3.0.2","semver":"^7.3.5","ts-node":"^8.3.0","typescript":"^3.7.2"},"contributors":[{"name":"Google Inc."}],"scripts":{"build":"npm run compile","clean":"rimraf ./build","compile":"tsc -p .","format":"clang-format -i -style=\\"{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}\\" src/*.ts test/*.ts","lint":"npm run check","prepare":"npm run generate-types && npm run compile","test":"gulp test","check":"gts check src/**/*.ts","fix":"gts fix src/*.ts","pretest":"npm run generate-types && npm run generate-test-types && npm run compile","posttest":"npm run check && madge -c ./build/src","generate-types":"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --includeDirs proto/ --include-dirs test/fixtures/ -O src/generated/ --grpcLib ../index channelz.proto","generate-test-types":"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --include-dirs test/fixtures/ -O test/generated/ --grpcLib ../../src/index test_service.proto"},"dependencies":{"@grpc/proto-loader":"^0.7.0","@types/node":">=12.12.47"},"files":["src/**/*.ts","build/src/**/*.{js,d.ts,js.map}","proto/*.proto","LICENSE","deps/envoy-api/envoy/api/v2/**/*.proto","deps/envoy-api/envoy/config/**/*.proto","deps/envoy-api/envoy/service/**/*.proto","deps/envoy-api/envoy/type/**/*.proto","deps/udpa/udpa/**/*.proto","deps/googleapis/google/api/*.proto","deps/googleapis/google/rpc/*.proto","deps/protoc-gen-validate/validate/**/*.proto"]}');

/***/ })

};
;